
STM32M4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e3c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000464  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007430  08007430  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007430  08007430  00017430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007438  08007438  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007438  08007438  00017438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800743c  0800743c  0001743c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020078  2**0
                  CONTENTS
 10 .bss          00001460  20000078  20000078  00020078  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200014d8  200014d8  00020078  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ca42  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003216  00000000  00000000  0003caea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  0003fd00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e98  00000000  00000000  00040cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024763  00000000  00000000  00041b48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014473  00000000  00000000  000662ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8c76  00000000  00000000  0007a71e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00153394  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000044d8  00000000  00000000  001533e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006fb4 	.word	0x08006fb4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006fb4 	.word	0x08006fb4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2uiz>:
 800083c:	004a      	lsls	r2, r1, #1
 800083e:	d211      	bcs.n	8000864 <__aeabi_d2uiz+0x28>
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d211      	bcs.n	800086a <__aeabi_d2uiz+0x2e>
 8000846:	d50d      	bpl.n	8000864 <__aeabi_d2uiz+0x28>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d40e      	bmi.n	8000870 <__aeabi_d2uiz+0x34>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	fa23 f002 	lsr.w	r0, r3, r2
 8000862:	4770      	bx	lr
 8000864:	f04f 0000 	mov.w	r0, #0
 8000868:	4770      	bx	lr
 800086a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800086e:	d102      	bne.n	8000876 <__aeabi_d2uiz+0x3a>
 8000870:	f04f 30ff 	mov.w	r0, #4294967295
 8000874:	4770      	bx	lr
 8000876:	f04f 0000 	mov.w	r0, #0
 800087a:	4770      	bx	lr

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_uldivmod>:
 800091c:	b953      	cbnz	r3, 8000934 <__aeabi_uldivmod+0x18>
 800091e:	b94a      	cbnz	r2, 8000934 <__aeabi_uldivmod+0x18>
 8000920:	2900      	cmp	r1, #0
 8000922:	bf08      	it	eq
 8000924:	2800      	cmpeq	r0, #0
 8000926:	bf1c      	itt	ne
 8000928:	f04f 31ff 	movne.w	r1, #4294967295
 800092c:	f04f 30ff 	movne.w	r0, #4294967295
 8000930:	f000 b96e 	b.w	8000c10 <__aeabi_idiv0>
 8000934:	f1ad 0c08 	sub.w	ip, sp, #8
 8000938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800093c:	f000 f806 	bl	800094c <__udivmoddi4>
 8000940:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000948:	b004      	add	sp, #16
 800094a:	4770      	bx	lr

0800094c <__udivmoddi4>:
 800094c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000950:	9d08      	ldr	r5, [sp, #32]
 8000952:	4604      	mov	r4, r0
 8000954:	468c      	mov	ip, r1
 8000956:	2b00      	cmp	r3, #0
 8000958:	f040 8083 	bne.w	8000a62 <__udivmoddi4+0x116>
 800095c:	428a      	cmp	r2, r1
 800095e:	4617      	mov	r7, r2
 8000960:	d947      	bls.n	80009f2 <__udivmoddi4+0xa6>
 8000962:	fab2 f282 	clz	r2, r2
 8000966:	b142      	cbz	r2, 800097a <__udivmoddi4+0x2e>
 8000968:	f1c2 0020 	rsb	r0, r2, #32
 800096c:	fa24 f000 	lsr.w	r0, r4, r0
 8000970:	4091      	lsls	r1, r2
 8000972:	4097      	lsls	r7, r2
 8000974:	ea40 0c01 	orr.w	ip, r0, r1
 8000978:	4094      	lsls	r4, r2
 800097a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800097e:	0c23      	lsrs	r3, r4, #16
 8000980:	fbbc f6f8 	udiv	r6, ip, r8
 8000984:	fa1f fe87 	uxth.w	lr, r7
 8000988:	fb08 c116 	mls	r1, r8, r6, ip
 800098c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000990:	fb06 f10e 	mul.w	r1, r6, lr
 8000994:	4299      	cmp	r1, r3
 8000996:	d909      	bls.n	80009ac <__udivmoddi4+0x60>
 8000998:	18fb      	adds	r3, r7, r3
 800099a:	f106 30ff 	add.w	r0, r6, #4294967295
 800099e:	f080 8119 	bcs.w	8000bd4 <__udivmoddi4+0x288>
 80009a2:	4299      	cmp	r1, r3
 80009a4:	f240 8116 	bls.w	8000bd4 <__udivmoddi4+0x288>
 80009a8:	3e02      	subs	r6, #2
 80009aa:	443b      	add	r3, r7
 80009ac:	1a5b      	subs	r3, r3, r1
 80009ae:	b2a4      	uxth	r4, r4
 80009b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80009b4:	fb08 3310 	mls	r3, r8, r0, r3
 80009b8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80009bc:	fb00 fe0e 	mul.w	lr, r0, lr
 80009c0:	45a6      	cmp	lr, r4
 80009c2:	d909      	bls.n	80009d8 <__udivmoddi4+0x8c>
 80009c4:	193c      	adds	r4, r7, r4
 80009c6:	f100 33ff 	add.w	r3, r0, #4294967295
 80009ca:	f080 8105 	bcs.w	8000bd8 <__udivmoddi4+0x28c>
 80009ce:	45a6      	cmp	lr, r4
 80009d0:	f240 8102 	bls.w	8000bd8 <__udivmoddi4+0x28c>
 80009d4:	3802      	subs	r0, #2
 80009d6:	443c      	add	r4, r7
 80009d8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80009dc:	eba4 040e 	sub.w	r4, r4, lr
 80009e0:	2600      	movs	r6, #0
 80009e2:	b11d      	cbz	r5, 80009ec <__udivmoddi4+0xa0>
 80009e4:	40d4      	lsrs	r4, r2
 80009e6:	2300      	movs	r3, #0
 80009e8:	e9c5 4300 	strd	r4, r3, [r5]
 80009ec:	4631      	mov	r1, r6
 80009ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009f2:	b902      	cbnz	r2, 80009f6 <__udivmoddi4+0xaa>
 80009f4:	deff      	udf	#255	; 0xff
 80009f6:	fab2 f282 	clz	r2, r2
 80009fa:	2a00      	cmp	r2, #0
 80009fc:	d150      	bne.n	8000aa0 <__udivmoddi4+0x154>
 80009fe:	1bcb      	subs	r3, r1, r7
 8000a00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a04:	fa1f f887 	uxth.w	r8, r7
 8000a08:	2601      	movs	r6, #1
 8000a0a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a0e:	0c21      	lsrs	r1, r4, #16
 8000a10:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a14:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a18:	fb08 f30c 	mul.w	r3, r8, ip
 8000a1c:	428b      	cmp	r3, r1
 8000a1e:	d907      	bls.n	8000a30 <__udivmoddi4+0xe4>
 8000a20:	1879      	adds	r1, r7, r1
 8000a22:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000a26:	d202      	bcs.n	8000a2e <__udivmoddi4+0xe2>
 8000a28:	428b      	cmp	r3, r1
 8000a2a:	f200 80e9 	bhi.w	8000c00 <__udivmoddi4+0x2b4>
 8000a2e:	4684      	mov	ip, r0
 8000a30:	1ac9      	subs	r1, r1, r3
 8000a32:	b2a3      	uxth	r3, r4
 8000a34:	fbb1 f0fe 	udiv	r0, r1, lr
 8000a38:	fb0e 1110 	mls	r1, lr, r0, r1
 8000a3c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000a40:	fb08 f800 	mul.w	r8, r8, r0
 8000a44:	45a0      	cmp	r8, r4
 8000a46:	d907      	bls.n	8000a58 <__udivmoddi4+0x10c>
 8000a48:	193c      	adds	r4, r7, r4
 8000a4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a4e:	d202      	bcs.n	8000a56 <__udivmoddi4+0x10a>
 8000a50:	45a0      	cmp	r8, r4
 8000a52:	f200 80d9 	bhi.w	8000c08 <__udivmoddi4+0x2bc>
 8000a56:	4618      	mov	r0, r3
 8000a58:	eba4 0408 	sub.w	r4, r4, r8
 8000a5c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000a60:	e7bf      	b.n	80009e2 <__udivmoddi4+0x96>
 8000a62:	428b      	cmp	r3, r1
 8000a64:	d909      	bls.n	8000a7a <__udivmoddi4+0x12e>
 8000a66:	2d00      	cmp	r5, #0
 8000a68:	f000 80b1 	beq.w	8000bce <__udivmoddi4+0x282>
 8000a6c:	2600      	movs	r6, #0
 8000a6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000a72:	4630      	mov	r0, r6
 8000a74:	4631      	mov	r1, r6
 8000a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a7a:	fab3 f683 	clz	r6, r3
 8000a7e:	2e00      	cmp	r6, #0
 8000a80:	d14a      	bne.n	8000b18 <__udivmoddi4+0x1cc>
 8000a82:	428b      	cmp	r3, r1
 8000a84:	d302      	bcc.n	8000a8c <__udivmoddi4+0x140>
 8000a86:	4282      	cmp	r2, r0
 8000a88:	f200 80b8 	bhi.w	8000bfc <__udivmoddi4+0x2b0>
 8000a8c:	1a84      	subs	r4, r0, r2
 8000a8e:	eb61 0103 	sbc.w	r1, r1, r3
 8000a92:	2001      	movs	r0, #1
 8000a94:	468c      	mov	ip, r1
 8000a96:	2d00      	cmp	r5, #0
 8000a98:	d0a8      	beq.n	80009ec <__udivmoddi4+0xa0>
 8000a9a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000a9e:	e7a5      	b.n	80009ec <__udivmoddi4+0xa0>
 8000aa0:	f1c2 0320 	rsb	r3, r2, #32
 8000aa4:	fa20 f603 	lsr.w	r6, r0, r3
 8000aa8:	4097      	lsls	r7, r2
 8000aaa:	fa01 f002 	lsl.w	r0, r1, r2
 8000aae:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ab2:	40d9      	lsrs	r1, r3
 8000ab4:	4330      	orrs	r0, r6
 8000ab6:	0c03      	lsrs	r3, r0, #16
 8000ab8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000abc:	fa1f f887 	uxth.w	r8, r7
 8000ac0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000ac4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ac8:	fb06 f108 	mul.w	r1, r6, r8
 8000acc:	4299      	cmp	r1, r3
 8000ace:	fa04 f402 	lsl.w	r4, r4, r2
 8000ad2:	d909      	bls.n	8000ae8 <__udivmoddi4+0x19c>
 8000ad4:	18fb      	adds	r3, r7, r3
 8000ad6:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ada:	f080 808d 	bcs.w	8000bf8 <__udivmoddi4+0x2ac>
 8000ade:	4299      	cmp	r1, r3
 8000ae0:	f240 808a 	bls.w	8000bf8 <__udivmoddi4+0x2ac>
 8000ae4:	3e02      	subs	r6, #2
 8000ae6:	443b      	add	r3, r7
 8000ae8:	1a5b      	subs	r3, r3, r1
 8000aea:	b281      	uxth	r1, r0
 8000aec:	fbb3 f0fe 	udiv	r0, r3, lr
 8000af0:	fb0e 3310 	mls	r3, lr, r0, r3
 8000af4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000af8:	fb00 f308 	mul.w	r3, r0, r8
 8000afc:	428b      	cmp	r3, r1
 8000afe:	d907      	bls.n	8000b10 <__udivmoddi4+0x1c4>
 8000b00:	1879      	adds	r1, r7, r1
 8000b02:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b06:	d273      	bcs.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d971      	bls.n	8000bf0 <__udivmoddi4+0x2a4>
 8000b0c:	3802      	subs	r0, #2
 8000b0e:	4439      	add	r1, r7
 8000b10:	1acb      	subs	r3, r1, r3
 8000b12:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b16:	e778      	b.n	8000a0a <__udivmoddi4+0xbe>
 8000b18:	f1c6 0c20 	rsb	ip, r6, #32
 8000b1c:	fa03 f406 	lsl.w	r4, r3, r6
 8000b20:	fa22 f30c 	lsr.w	r3, r2, ip
 8000b24:	431c      	orrs	r4, r3
 8000b26:	fa20 f70c 	lsr.w	r7, r0, ip
 8000b2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000b2e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000b32:	fa21 f10c 	lsr.w	r1, r1, ip
 8000b36:	431f      	orrs	r7, r3
 8000b38:	0c3b      	lsrs	r3, r7, #16
 8000b3a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000b3e:	fa1f f884 	uxth.w	r8, r4
 8000b42:	fb0e 1119 	mls	r1, lr, r9, r1
 8000b46:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000b4a:	fb09 fa08 	mul.w	sl, r9, r8
 8000b4e:	458a      	cmp	sl, r1
 8000b50:	fa02 f206 	lsl.w	r2, r2, r6
 8000b54:	fa00 f306 	lsl.w	r3, r0, r6
 8000b58:	d908      	bls.n	8000b6c <__udivmoddi4+0x220>
 8000b5a:	1861      	adds	r1, r4, r1
 8000b5c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000b60:	d248      	bcs.n	8000bf4 <__udivmoddi4+0x2a8>
 8000b62:	458a      	cmp	sl, r1
 8000b64:	d946      	bls.n	8000bf4 <__udivmoddi4+0x2a8>
 8000b66:	f1a9 0902 	sub.w	r9, r9, #2
 8000b6a:	4421      	add	r1, r4
 8000b6c:	eba1 010a 	sub.w	r1, r1, sl
 8000b70:	b2bf      	uxth	r7, r7
 8000b72:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b76:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b7a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000b7e:	fb00 f808 	mul.w	r8, r0, r8
 8000b82:	45b8      	cmp	r8, r7
 8000b84:	d907      	bls.n	8000b96 <__udivmoddi4+0x24a>
 8000b86:	19e7      	adds	r7, r4, r7
 8000b88:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b8c:	d22e      	bcs.n	8000bec <__udivmoddi4+0x2a0>
 8000b8e:	45b8      	cmp	r8, r7
 8000b90:	d92c      	bls.n	8000bec <__udivmoddi4+0x2a0>
 8000b92:	3802      	subs	r0, #2
 8000b94:	4427      	add	r7, r4
 8000b96:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000b9a:	eba7 0708 	sub.w	r7, r7, r8
 8000b9e:	fba0 8902 	umull	r8, r9, r0, r2
 8000ba2:	454f      	cmp	r7, r9
 8000ba4:	46c6      	mov	lr, r8
 8000ba6:	4649      	mov	r1, r9
 8000ba8:	d31a      	bcc.n	8000be0 <__udivmoddi4+0x294>
 8000baa:	d017      	beq.n	8000bdc <__udivmoddi4+0x290>
 8000bac:	b15d      	cbz	r5, 8000bc6 <__udivmoddi4+0x27a>
 8000bae:	ebb3 020e 	subs.w	r2, r3, lr
 8000bb2:	eb67 0701 	sbc.w	r7, r7, r1
 8000bb6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000bba:	40f2      	lsrs	r2, r6
 8000bbc:	ea4c 0202 	orr.w	r2, ip, r2
 8000bc0:	40f7      	lsrs	r7, r6
 8000bc2:	e9c5 2700 	strd	r2, r7, [r5]
 8000bc6:	2600      	movs	r6, #0
 8000bc8:	4631      	mov	r1, r6
 8000bca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bce:	462e      	mov	r6, r5
 8000bd0:	4628      	mov	r0, r5
 8000bd2:	e70b      	b.n	80009ec <__udivmoddi4+0xa0>
 8000bd4:	4606      	mov	r6, r0
 8000bd6:	e6e9      	b.n	80009ac <__udivmoddi4+0x60>
 8000bd8:	4618      	mov	r0, r3
 8000bda:	e6fd      	b.n	80009d8 <__udivmoddi4+0x8c>
 8000bdc:	4543      	cmp	r3, r8
 8000bde:	d2e5      	bcs.n	8000bac <__udivmoddi4+0x260>
 8000be0:	ebb8 0e02 	subs.w	lr, r8, r2
 8000be4:	eb69 0104 	sbc.w	r1, r9, r4
 8000be8:	3801      	subs	r0, #1
 8000bea:	e7df      	b.n	8000bac <__udivmoddi4+0x260>
 8000bec:	4608      	mov	r0, r1
 8000bee:	e7d2      	b.n	8000b96 <__udivmoddi4+0x24a>
 8000bf0:	4660      	mov	r0, ip
 8000bf2:	e78d      	b.n	8000b10 <__udivmoddi4+0x1c4>
 8000bf4:	4681      	mov	r9, r0
 8000bf6:	e7b9      	b.n	8000b6c <__udivmoddi4+0x220>
 8000bf8:	4666      	mov	r6, ip
 8000bfa:	e775      	b.n	8000ae8 <__udivmoddi4+0x19c>
 8000bfc:	4630      	mov	r0, r6
 8000bfe:	e74a      	b.n	8000a96 <__udivmoddi4+0x14a>
 8000c00:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c04:	4439      	add	r1, r7
 8000c06:	e713      	b.n	8000a30 <__udivmoddi4+0xe4>
 8000c08:	3802      	subs	r0, #2
 8000c0a:	443c      	add	r4, r7
 8000c0c:	e724      	b.n	8000a58 <__udivmoddi4+0x10c>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_idiv0>:
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop

08000c14 <SCIx_TxChar>:
    	return huart5.Instance->DR  & 0x1FF;
    }
}

void SCIx_TxChar(char Data)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b083      	sub	sp, #12
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	71fb      	strb	r3, [r7, #7]

    huart4.Instance->DR = Data & 0x1FF;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <SCIx_TxChar+0x30>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	79fa      	ldrb	r2, [r7, #7]
 8000c24:	605a      	str	r2, [r3, #4]
    while(!(huart4.Instance->SR & 0x80));
 8000c26:	bf00      	nop
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <SCIx_TxChar+0x30>)
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d0f8      	beq.n	8000c28 <SCIx_TxChar+0x14>
}
 8000c36:	bf00      	nop
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	200013f0 	.word	0x200013f0

08000c48 <SCIx_TxString>:

void SCIx_TxString(char *Str)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
    while(*Str) 
 8000c50:	e00d      	b.n	8000c6e <SCIx_TxString+0x26>
    {
        if(*Str == '\n'){
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	2b0a      	cmp	r3, #10
 8000c58:	d102      	bne.n	8000c60 <SCIx_TxString+0x18>
            SCIx_TxChar('\r');
 8000c5a:	200d      	movs	r0, #13
 8000c5c:	f7ff ffda 	bl	8000c14 <SCIx_TxChar>
        }
		
        SCIx_TxChar(*Str++ );
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	1c5a      	adds	r2, r3, #1
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f7ff ffd3 	bl	8000c14 <SCIx_TxChar>
    while(*Str) 
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d1ed      	bne.n	8000c52 <SCIx_TxString+0xa>
    }
}      
 8000c76:	bf00      	nop
 8000c78:	bf00      	nop
 8000c7a:	3708      	adds	r7, #8
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}

08000c80 <TxPrintf>:
void TxPrintf(char *Form, ... )
{
 8000c80:	b40f      	push	{r0, r1, r2, r3}
 8000c82:	b580      	push	{r7, lr}
 8000c84:	b082      	sub	sp, #8
 8000c86:	af00      	add	r7, sp, #0
    static char Buff[128];
    va_list ArgPtr;
    va_start(ArgPtr,Form);	 
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	607b      	str	r3, [r7, #4]
    vsprintf(Buff, Form, ArgPtr);
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	6939      	ldr	r1, [r7, #16]
 8000c92:	4806      	ldr	r0, [pc, #24]	; (8000cac <TxPrintf+0x2c>)
 8000c94:	f005 fd76 	bl	8006784 <vsiprintf>
    va_end(ArgPtr);
    SCIx_TxString(Buff);
 8000c98:	4804      	ldr	r0, [pc, #16]	; (8000cac <TxPrintf+0x2c>)
 8000c9a:	f7ff ffd5 	bl	8000c48 <SCIx_TxString>
}
 8000c9e:	bf00      	nop
 8000ca0:	3708      	adds	r7, #8
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ca8:	b004      	add	sp, #16
 8000caa:	4770      	bx	lr
 8000cac:	20000094 	.word	0x20000094

08000cb0 <VfdCtlRegInit>:
	{0x00,0x00,0x00,0x00,0x00},	 //	        7F

};

void VfdCtlRegInit(int CrlReg)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b085      	sub	sp, #20
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
	int	Cnt;
	//select control register

	VFD_CLK_L;
 8000cb8:	4b2c      	ldr	r3, [pc, #176]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cba:	695b      	ldr	r3, [r3, #20]
 8000cbc:	4a2b      	ldr	r2, [pc, #172]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cbe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000cc2:	6153      	str	r3, [r2, #20]
	VFD_RS_H;
 8000cc4:	4b2a      	ldr	r3, [pc, #168]	; (8000d70 <VfdCtlRegInit+0xc0>)
 8000cc6:	695b      	ldr	r3, [r3, #20]
 8000cc8:	4a29      	ldr	r2, [pc, #164]	; (8000d70 <VfdCtlRegInit+0xc0>)
 8000cca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cce:	6153      	str	r3, [r2, #20]
	VFD_CE_H;
 8000cd0:	4b26      	ldr	r3, [pc, #152]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cd2:	695b      	ldr	r3, [r3, #20]
 8000cd4:	4a25      	ldr	r2, [pc, #148]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cda:	6153      	str	r3, [r2, #20]
	VFD_CLK_H;
 8000cdc:	4b23      	ldr	r3, [pc, #140]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	4a22      	ldr	r2, [pc, #136]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000ce2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ce6:	6153      	str	r3, [r2, #20]
	VFD_CE_L;
 8000ce8:	4b20      	ldr	r3, [pc, #128]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cea:	695b      	ldr	r3, [r3, #20]
 8000cec:	4a1f      	ldr	r2, [pc, #124]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cee:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000cf2:	6153      	str	r3, [r2, #20]

	//Load control register
	for(Cnt= 7; Cnt >= 0; Cnt--)	//왼쪽부터 차례대로 한계씩 가져옴. (VFD 가 8 bit 로 인식함)
 8000cf4:	2307      	movs	r3, #7
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e023      	b.n	8000d42 <VfdCtlRegInit+0x92>
	{
		VFD_CLK_L;
 8000cfa:	4b1c      	ldr	r3, [pc, #112]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000cfc:	695b      	ldr	r3, [r3, #20]
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d04:	6153      	str	r3, [r2, #20]
		if((CrlReg >> Cnt) & 0x01) //밝기 조절 (1이면 켜주고, 0이면 꺼준다)
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	fa42 f303 	asr.w	r3, r2, r3
 8000d0e:	f003 0301 	and.w	r3, r3, #1
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d006      	beq.n	8000d24 <VfdCtlRegInit+0x74>
		{
			VFD_DA_H;
 8000d16:	4b15      	ldr	r3, [pc, #84]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d18:	695b      	ldr	r3, [r3, #20]
 8000d1a:	4a14      	ldr	r2, [pc, #80]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d20:	6153      	str	r3, [r2, #20]
 8000d22:	e005      	b.n	8000d30 <VfdCtlRegInit+0x80>
		}
		else
		{
			VFD_DA_L;
 8000d24:	4b11      	ldr	r3, [pc, #68]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d26:	695b      	ldr	r3, [r3, #20]
 8000d28:	4a10      	ldr	r2, [pc, #64]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d2a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d2e:	6153      	str	r3, [r2, #20]
		}
		VFD_CLK_H;	//하나씩 확인후 클럭을 High 상태로 바꿔 입력해줌.
 8000d30:	4b0e      	ldr	r3, [pc, #56]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d32:	695b      	ldr	r3, [r3, #20]
 8000d34:	4a0d      	ldr	r2, [pc, #52]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d3a:	6153      	str	r3, [r2, #20]
	for(Cnt= 7; Cnt >= 0; Cnt--)	//왼쪽부터 차례대로 한계씩 가져옴. (VFD 가 8 bit 로 인식함)
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	dad8      	bge.n	8000cfa <VfdCtlRegInit+0x4a>
	}
	//Latch data to control word
	VFD_CE_H;
 8000d48:	4b08      	ldr	r3, [pc, #32]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d4a:	695b      	ldr	r3, [r3, #20]
 8000d4c:	4a07      	ldr	r2, [pc, #28]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d52:	6153      	str	r3, [r2, #20]
	VFD_CLK_L;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d56:	695b      	ldr	r3, [r3, #20]
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <VfdCtlRegInit+0xbc>)
 8000d5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d5e:	6153      	str	r3, [r2, #20]

}
 8000d60:	bf00      	nop
 8000d62:	3714      	adds	r7, #20
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr
 8000d6c:	40020c00 	.word	0x40020c00
 8000d70:	40020400 	.word	0x40020400

08000d74 <VfdInit>:
void VfdInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
	VFD_RESET_H;
 8000d78:	4b12      	ldr	r3, [pc, #72]	; (8000dc4 <VfdInit+0x50>)
 8000d7a:	695b      	ldr	r3, [r3, #20]
 8000d7c:	4a11      	ldr	r2, [pc, #68]	; (8000dc4 <VfdInit+0x50>)
 8000d7e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d82:	6153      	str	r3, [r2, #20]
	VFD_CE_L;
 8000d84:	4b0f      	ldr	r3, [pc, #60]	; (8000dc4 <VfdInit+0x50>)
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	4a0e      	ldr	r2, [pc, #56]	; (8000dc4 <VfdInit+0x50>)
 8000d8a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000d8e:	6153      	str	r3, [r2, #20]
	VFD_CLK_L;
 8000d90:	4b0c      	ldr	r3, [pc, #48]	; (8000dc4 <VfdInit+0x50>)
 8000d92:	695b      	ldr	r3, [r3, #20]
 8000d94:	4a0b      	ldr	r2, [pc, #44]	; (8000dc4 <VfdInit+0x50>)
 8000d96:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000d9a:	6153      	str	r3, [r2, #20]
	VFD_DA_L;
 8000d9c:	4b09      	ldr	r3, [pc, #36]	; (8000dc4 <VfdInit+0x50>)
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	4a08      	ldr	r2, [pc, #32]	; (8000dc4 <VfdInit+0x50>)
 8000da2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000da6:	6153      	str	r3, [r2, #20]
	VFD_RS_L;
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <VfdInit+0x54>)
 8000daa:	695b      	ldr	r3, [r3, #20]
 8000dac:	4a06      	ldr	r2, [pc, #24]	; (8000dc8 <VfdInit+0x54>)
 8000dae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000db2:	6153      	str	r3, [r2, #20]
	VfdCtlRegInit(0x81);	//1000 0001		//129
 8000db4:	2081      	movs	r0, #129	; 0x81
 8000db6:	f7ff ff7b 	bl	8000cb0 <VfdCtlRegInit>
	VfdCtlRegInit(0x4d);	//0100 1101		//77
 8000dba:	204d      	movs	r0, #77	; 0x4d
 8000dbc:	f7ff ff78 	bl	8000cb0 <VfdCtlRegInit>
}
 8000dc0:	bf00      	nop
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	40020c00 	.word	0x40020c00
 8000dc8:	40020400 	.word	0x40020400

08000dcc <VfdDataLoad>:

void VfdDataLoad(char *Buff)//(char *buffer)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b089      	sub	sp, #36	; 0x24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
	int	x;
	int i;
	int y;
	int z;
	int ConverData = 0;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
	//unsigned char Add;

	//select Dot register
	VFD_CLK_L;
 8000dd8:	4b49      	ldr	r3, [pc, #292]	; (8000f00 <VfdDataLoad+0x134>)
 8000dda:	695b      	ldr	r3, [r3, #20]
 8000ddc:	4a48      	ldr	r2, [pc, #288]	; (8000f00 <VfdDataLoad+0x134>)
 8000dde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000de2:	6153      	str	r3, [r2, #20]
	VFD_RS_L;	//Dot Register 선택
 8000de4:	4b47      	ldr	r3, [pc, #284]	; (8000f04 <VfdDataLoad+0x138>)
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	4a46      	ldr	r2, [pc, #280]	; (8000f04 <VfdDataLoad+0x138>)
 8000dea:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dee:	6153      	str	r3, [r2, #20]
	VFD_CE_H;	//CE가 0이고 CLK가 High이어야만 데이터가 들어간다.
 8000df0:	4b43      	ldr	r3, [pc, #268]	; (8000f00 <VfdDataLoad+0x134>)
 8000df2:	695b      	ldr	r3, [r3, #20]
 8000df4:	4a42      	ldr	r2, [pc, #264]	; (8000f00 <VfdDataLoad+0x134>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6153      	str	r3, [r2, #20]
	VFD_CLK_H;
 8000dfc:	4b40      	ldr	r3, [pc, #256]	; (8000f00 <VfdDataLoad+0x134>)
 8000dfe:	695b      	ldr	r3, [r3, #20]
 8000e00:	4a3f      	ldr	r2, [pc, #252]	; (8000f00 <VfdDataLoad+0x134>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6153      	str	r3, [r2, #20]
	VFD_CE_L;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <VfdDataLoad+0x134>)
 8000e0a:	695b      	ldr	r3, [r3, #20]
 8000e0c:	4a3c      	ldr	r2, [pc, #240]	; (8000f00 <VfdDataLoad+0x134>)
 8000e0e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000e12:	6153      	str	r3, [r2, #20]

	//Load control register
	for(z = 0; z < 8; z++) // VFD는 8칸으로 이루어져 있음. 글자 수 조절
 8000e14:	2300      	movs	r3, #0
 8000e16:	613b      	str	r3, [r7, #16]
 8000e18:	e05c      	b.n	8000ed4 <VfdDataLoad+0x108>
	{
		for(i = 4; i >= 0 ; i--) 	//가로 5개
 8000e1a:	2304      	movs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
 8000e1e:	e050      	b.n	8000ec2 <VfdDataLoad+0xf6>
		{
			for(y = 6; y >= 0; y--) 	//세로 7개
 8000e20:	2306      	movs	r3, #6
 8000e22:	617b      	str	r3, [r7, #20]
 8000e24:	e01b      	b.n	8000e5e <VfdDataLoad+0x92>
				ConverData |= ((FontData[*Buff][i]>> y) & 0x01) << (6-y); 	//buffer는 아스키코드에 따라 값이 정해짐. 그래서 1번째 배열칸에 들어간다.
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	781b      	ldrb	r3, [r3, #0]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4a36      	ldr	r2, [pc, #216]	; (8000f08 <VfdDataLoad+0x13c>)
 8000e2e:	460b      	mov	r3, r1
 8000e30:	009b      	lsls	r3, r3, #2
 8000e32:	440b      	add	r3, r1
 8000e34:	441a      	add	r2, r3
 8000e36:	69bb      	ldr	r3, [r7, #24]
 8000e38:	4413      	add	r3, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	fa42 f303 	asr.w	r3, r2, r3
 8000e44:	f003 0201 	and.w	r2, r3, #1
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	f1c3 0306 	rsb	r3, r3, #6
 8000e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e52:	68fa      	ldr	r2, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]
			for(y = 6; y >= 0; y--) 	//세로 7개
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	dae0      	bge.n	8000e26 <VfdDataLoad+0x5a>
																			//FontData[*Buff][i] >> y 왼쪽부터 1의 자리로 쉬프트해서 1과 비교. (1이면 High, 0이면 Low) 다시 원상복구하고 ConverData에 삽입.


			for(x = 7; x >= 0; x--)		//VFD가 8bit로 인식함. 가로 5칸중 하나씩 다 넣어줌. 이때 MSB는 0.
 8000e64:	2307      	movs	r3, #7
 8000e66:	61fb      	str	r3, [r7, #28]
 8000e68:	e023      	b.n	8000eb2 <VfdDataLoad+0xe6>
			{
				VFD_CLK_L;
 8000e6a:	4b25      	ldr	r3, [pc, #148]	; (8000f00 <VfdDataLoad+0x134>)
 8000e6c:	695b      	ldr	r3, [r3, #20]
 8000e6e:	4a24      	ldr	r2, [pc, #144]	; (8000f00 <VfdDataLoad+0x134>)
 8000e70:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000e74:	6153      	str	r3, [r2, #20]
				if(( ConverData >> x) & 0x01)	//MSB부터 LSB로 1000 0000 에서 1이 MSB (맨 왼쪽), 0이 LSB (맨 오른쪽)
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	fa42 f303 	asr.w	r3, r2, r3
 8000e7e:	f003 0301 	and.w	r3, r3, #1
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <VfdDataLoad+0xc8>
				{
					VFD_DA_H;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <VfdDataLoad+0x134>)
 8000e88:	695b      	ldr	r3, [r3, #20]
 8000e8a:	4a1d      	ldr	r2, [pc, #116]	; (8000f00 <VfdDataLoad+0x134>)
 8000e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e90:	6153      	str	r3, [r2, #20]
 8000e92:	e005      	b.n	8000ea0 <VfdDataLoad+0xd4>
				}
				else
				{
					VFD_DA_L;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	; (8000f00 <VfdDataLoad+0x134>)
 8000e96:	695b      	ldr	r3, [r3, #20]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <VfdDataLoad+0x134>)
 8000e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000e9e:	6153      	str	r3, [r2, #20]
				}
				VFD_CLK_H;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	; (8000f00 <VfdDataLoad+0x134>)
 8000ea2:	695b      	ldr	r3, [r3, #20]
 8000ea4:	4a16      	ldr	r2, [pc, #88]	; (8000f00 <VfdDataLoad+0x134>)
 8000ea6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eaa:	6153      	str	r3, [r2, #20]
			for(x = 7; x >= 0; x--)		//VFD가 8bit로 인식함. 가로 5칸중 하나씩 다 넣어줌. 이때 MSB는 0.
 8000eac:	69fb      	ldr	r3, [r7, #28]
 8000eae:	3b01      	subs	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	dad8      	bge.n	8000e6a <VfdDataLoad+0x9e>
			}
			ConverData = 0;	//ConverData 초기화
 8000eb8:	2300      	movs	r3, #0
 8000eba:	60fb      	str	r3, [r7, #12]
		for(i = 4; i >= 0 ; i--) 	//가로 5개
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	61bb      	str	r3, [r7, #24]
 8000ec2:	69bb      	ldr	r3, [r7, #24]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	daab      	bge.n	8000e20 <VfdDataLoad+0x54>
		}
		Buff++;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	607b      	str	r3, [r7, #4]
	for(z = 0; z < 8; z++) // VFD는 8칸으로 이루어져 있음. 글자 수 조절
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	2b07      	cmp	r3, #7
 8000ed8:	dd9f      	ble.n	8000e1a <VfdDataLoad+0x4e>
	}
	VFD_CE_H;		//CE가 High 이고 CLK가 Low 이면 데이터가 안들어감.
 8000eda:	4b09      	ldr	r3, [pc, #36]	; (8000f00 <VfdDataLoad+0x134>)
 8000edc:	695b      	ldr	r3, [r3, #20]
 8000ede:	4a08      	ldr	r2, [pc, #32]	; (8000f00 <VfdDataLoad+0x134>)
 8000ee0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ee4:	6153      	str	r3, [r2, #20]
	VFD_CLK_L;
 8000ee6:	4b06      	ldr	r3, [pc, #24]	; (8000f00 <VfdDataLoad+0x134>)
 8000ee8:	695b      	ldr	r3, [r3, #20]
 8000eea:	4a05      	ldr	r2, [pc, #20]	; (8000f00 <VfdDataLoad+0x134>)
 8000eec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000ef0:	6153      	str	r3, [r2, #20]

}
 8000ef2:	bf00      	nop
 8000ef4:	3724      	adds	r7, #36	; 0x24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	40020c00 	.word	0x40020c00
 8000f04:	40020400 	.word	0x40020400
 8000f08:	08007164 	.word	0x08007164

08000f0c <VFDPrintf>:

void VFDPrintf(char *Form, ... )
{
 8000f0c:	b40f      	push	{r0, r1, r2, r3}
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	b082      	sub	sp, #8
 8000f12:	af00      	add	r7, sp, #0

    static char Buff[20];
    va_list ArgPtr;
    va_start(ArgPtr,Form);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	607b      	str	r3, [r7, #4]
    vsprintf(Buff, Form, ArgPtr);
 8000f1a:	687a      	ldr	r2, [r7, #4]
 8000f1c:	6939      	ldr	r1, [r7, #16]
 8000f1e:	4806      	ldr	r0, [pc, #24]	; (8000f38 <VFDPrintf+0x2c>)
 8000f20:	f005 fc30 	bl	8006784 <vsiprintf>
    va_end(ArgPtr);
    VfdDataLoad(Buff);
 8000f24:	4804      	ldr	r0, [pc, #16]	; (8000f38 <VFDPrintf+0x2c>)
 8000f26:	f7ff ff51 	bl	8000dcc <VfdDataLoad>
}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f34:	b004      	add	sp, #16
 8000f36:	4770      	bx	lr
 8000f38:	20000114 	.word	0x20000114

08000f3c <HAL_TIM_PeriodElapsedCallback>:
static void MX_UART5_Init(void);
/* USER CODE BEGIN PFP */


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
	//activates every 20us
	if (htim -> Instance == TIM6)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a08      	ldr	r2, [pc, #32]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d102      	bne.n	8000f54 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		sensor_ISR();
 8000f4e:	f001 fd33 	bl	80029b8 <sensor_ISR>
	}
	else if (htim -> Instance == TIM7)
	{
		motor_ISR();
	}
}
 8000f52:	e006      	b.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x26>
	else if (htim -> Instance == TIM7)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d101      	bne.n	8000f62 <HAL_TIM_PeriodElapsedCallback+0x26>
		motor_ISR();
 8000f5e:	f001 faa3 	bl	80024a8 <motor_ISR>
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	40001000 	.word	0x40001000
 8000f70:	40001400 	.word	0x40001400

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */


	uint8_t value = "";
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <main+0xdc>)
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7e:	f002 f8c3 	bl	8003108 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f82:	f000 f88b 	bl	800109c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f86:	f000 fc6b 	bl	8001860 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000f8a:	f000 f963 	bl	8001254 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000f8e:	f000 fb21 	bl	80015d4 <MX_TIM8_Init>
  MX_TIM10_Init();
 8000f92:	f000 fbc1 	bl	8001718 <MX_TIM10_Init>
  MX_UART4_Init();
 8000f96:	f000 fc0f 	bl	80017b8 <MX_UART4_Init>
  MX_TIM2_Init();
 8000f9a:	f000 f9df 	bl	800135c <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f9e:	f000 faad 	bl	80014fc <MX_TIM6_Init>
  MX_TIM7_Init();
 8000fa2:	f000 fae1 	bl	8001568 <MX_TIM7_Init>
  MX_TIM3_Init();
 8000fa6:	f000 fa5b 	bl	8001460 <MX_TIM3_Init>
  MX_ADC1_Init();
 8000faa:	f000 f8e1 	bl	8001170 <MX_ADC1_Init>
  MX_UART5_Init();
 8000fae:	f000 fc2d 	bl	800180c <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  VfdInit();
 8000fb2:	f7ff fedf 	bl	8000d74 <VfdInit>

  VFDPrintf("Initiate");
 8000fb6:	4827      	ldr	r0, [pc, #156]	; (8001054 <main+0xe0>)
 8000fb8:	f7ff ffa8 	bl	8000f0c <VFDPrintf>
  HAL_Delay(100);
 8000fbc:	2064      	movs	r0, #100	; 0x64
 8000fbe:	f002 f915 	bl	80031ec <HAL_Delay>

  VFDPrintf("PWM_INIT");
 8000fc2:	4825      	ldr	r0, [pc, #148]	; (8001058 <main+0xe4>)
 8000fc4:	f7ff ffa2 	bl	8000f0c <VFDPrintf>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4824      	ldr	r0, [pc, #144]	; (800105c <main+0xe8>)
 8000fcc:	f003 feb4 	bl	8004d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4822      	ldr	r0, [pc, #136]	; (800105c <main+0xe8>)
 8000fd4:	f003 feb0 	bl	8004d38 <HAL_TIM_PWM_Start>


  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4821      	ldr	r0, [pc, #132]	; (8001060 <main+0xec>)
 8000fdc:	f003 feac 	bl	8004d38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim10,TIM_CHANNEL_1);
 8000fe0:	2100      	movs	r1, #0
 8000fe2:	4820      	ldr	r0, [pc, #128]	; (8001064 <main+0xf0>)
 8000fe4:	f003 fea8 	bl	8004d38 <HAL_TIM_PWM_Start>

  VFDPrintf("PWM_DONE");
 8000fe8:	481f      	ldr	r0, [pc, #124]	; (8001068 <main+0xf4>)
 8000fea:	f7ff ff8f 	bl	8000f0c <VFDPrintf>
  HAL_Delay(100);
 8000fee:	2064      	movs	r0, #100	; 0x64
 8000ff0:	f002 f8fc 	bl	80031ec <HAL_Delay>
  VFDPrintf("ENC_INIT");
 8000ff4:	481d      	ldr	r0, [pc, #116]	; (800106c <main+0xf8>)
 8000ff6:	f7ff ff89 	bl	8000f0c <VFDPrintf>

  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8000ffa:	213c      	movs	r1, #60	; 0x3c
 8000ffc:	481c      	ldr	r0, [pc, #112]	; (8001070 <main+0xfc>)
 8000ffe:	f004 f862 	bl	80050c6 <HAL_TIM_Encoder_Start>

  VFDPrintf("ENC_DONE");
 8001002:	481c      	ldr	r0, [pc, #112]	; (8001074 <main+0x100>)
 8001004:	f7ff ff82 	bl	8000f0c <VFDPrintf>
  HAL_Delay(100);
 8001008:	2064      	movs	r0, #100	; 0x64
 800100a:	f002 f8ef 	bl	80031ec <HAL_Delay>
  VFDPrintf("INT_INIT");
 800100e:	481a      	ldr	r0, [pc, #104]	; (8001078 <main+0x104>)
 8001010:	f7ff ff7c 	bl	8000f0c <VFDPrintf>

  //enable TIM 6 for sensor Interrupt
  HAL_TIM_Base_Start_IT(&htim6);
 8001014:	4819      	ldr	r0, [pc, #100]	; (800107c <main+0x108>)
 8001016:	f003 fdcf 	bl	8004bb8 <HAL_TIM_Base_Start_IT>

  //enable TIM 7 for motor Interrupt
  HAL_TIM_Base_Start_IT(&htim7);
 800101a:	4819      	ldr	r0, [pc, #100]	; (8001080 <main+0x10c>)
 800101c:	f003 fdcc 	bl	8004bb8 <HAL_TIM_Base_Start_IT>

  VFDPrintf("INT_DONE");
 8001020:	4818      	ldr	r0, [pc, #96]	; (8001084 <main+0x110>)
 8001022:	f7ff ff73 	bl	8000f0c <VFDPrintf>

  motor.kp = 0.6;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <main+0x114>)
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <main+0x118>)
 800102a:	669a      	str	r2, [r3, #104]	; 0x68
  motor.ki = 0.00002;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <main+0x114>)
 800102e:	4a18      	ldr	r2, [pc, #96]	; (8001090 <main+0x11c>)
 8001030:	66da      	str	r2, [r3, #108]	; 0x6c
  motor.kd = 0.65;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <main+0x114>)
 8001034:	4a17      	ldr	r2, [pc, #92]	; (8001094 <main+0x120>)
 8001036:	671a      	str	r2, [r3, #112]	; 0x70

  //  sensorInit();

  MenuSetting();
 8001038:	f000 ffb8 	bl	8001fac <MenuSetting>

  VFDPrintf("YOONCHUL");
 800103c:	4816      	ldr	r0, [pc, #88]	; (8001098 <main+0x124>)
 800103e:	f7ff ff65 	bl	8000f0c <VFDPrintf>

  HAL_Delay(100);
 8001042:	2064      	movs	r0, #100	; 0x64
 8001044:	f002 f8d2 	bl	80031ec <HAL_Delay>
  while (1)
  {

	//TxPrintf("%c", (char) SCIx_RxChar());

	menu();
 8001048:	f001 f8c4 	bl	80021d4 <menu>
 800104c:	e7fc      	b.n	8001048 <main+0xd4>
 800104e:	bf00      	nop
 8001050:	08006fcc 	.word	0x08006fcc
 8001054:	08006fd0 	.word	0x08006fd0
 8001058:	08006fdc 	.word	0x08006fdc
 800105c:	200013a8 	.word	0x200013a8
 8001060:	200011fc 	.word	0x200011fc
 8001064:	20001244 	.word	0x20001244
 8001068:	08006fe8 	.word	0x08006fe8
 800106c:	08006ff4 	.word	0x08006ff4
 8001070:	20001434 	.word	0x20001434
 8001074:	08007000 	.word	0x08007000
 8001078:	0800700c 	.word	0x0800700c
 800107c:	20001360 	.word	0x20001360
 8001080:	2000147c 	.word	0x2000147c
 8001084:	08007018 	.word	0x08007018
 8001088:	2000116c 	.word	0x2000116c
 800108c:	3f19999a 	.word	0x3f19999a
 8001090:	37a7c5ac 	.word	0x37a7c5ac
 8001094:	3f266666 	.word	0x3f266666
 8001098:	08007024 	.word	0x08007024

0800109c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b094      	sub	sp, #80	; 0x50
 80010a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a2:	f107 0320 	add.w	r3, r7, #32
 80010a6:	2230      	movs	r2, #48	; 0x30
 80010a8:	2100      	movs	r1, #0
 80010aa:	4618      	mov	r0, r3
 80010ac:	f005 fb4c 	bl	8006748 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c0:	2300      	movs	r3, #0
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	4b28      	ldr	r3, [pc, #160]	; (8001168 <SystemClock_Config+0xcc>)
 80010c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c8:	4a27      	ldr	r2, [pc, #156]	; (8001168 <SystemClock_Config+0xcc>)
 80010ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010ce:	6413      	str	r3, [r2, #64]	; 0x40
 80010d0:	4b25      	ldr	r3, [pc, #148]	; (8001168 <SystemClock_Config+0xcc>)
 80010d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010d8:	60bb      	str	r3, [r7, #8]
 80010da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010dc:	2300      	movs	r3, #0
 80010de:	607b      	str	r3, [r7, #4]
 80010e0:	4b22      	ldr	r3, [pc, #136]	; (800116c <SystemClock_Config+0xd0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a21      	ldr	r2, [pc, #132]	; (800116c <SystemClock_Config+0xd0>)
 80010e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b1f      	ldr	r3, [pc, #124]	; (800116c <SystemClock_Config+0xd0>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010f4:	607b      	str	r3, [r7, #4]
 80010f6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010f8:	2301      	movs	r3, #1
 80010fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001100:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001102:	2302      	movs	r3, #2
 8001104:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001106:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800110a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800110c:	2304      	movs	r3, #4
 800110e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001110:	23a8      	movs	r3, #168	; 0xa8
 8001112:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001114:	2302      	movs	r3, #2
 8001116:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001118:	2304      	movs	r3, #4
 800111a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f003 f885 	bl	8004230 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800112c:	f000 fc9e 	bl	8001a6c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001134:	2302      	movs	r3, #2
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800113c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001142:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001146:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001148:	f107 030c 	add.w	r3, r7, #12
 800114c:	2105      	movs	r1, #5
 800114e:	4618      	mov	r0, r3
 8001150:	f003 fae6 	bl	8004720 <HAL_RCC_ClockConfig>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800115a:	f000 fc87 	bl	8001a6c <Error_Handler>
  }
}
 800115e:	bf00      	nop
 8001160:	3750      	adds	r7, #80	; 0x50
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	40023800 	.word	0x40023800
 800116c:	40007000 	.word	0x40007000

08001170 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
 800117e:	609a      	str	r2, [r3, #8]
 8001180:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001182:	4b31      	ldr	r3, [pc, #196]	; (8001248 <MX_ADC1_Init+0xd8>)
 8001184:	4a31      	ldr	r2, [pc, #196]	; (800124c <MX_ADC1_Init+0xdc>)
 8001186:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001188:	4b2f      	ldr	r3, [pc, #188]	; (8001248 <MX_ADC1_Init+0xd8>)
 800118a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800118e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001190:	4b2d      	ldr	r3, [pc, #180]	; (8001248 <MX_ADC1_Init+0xd8>)
 8001192:	2200      	movs	r2, #0
 8001194:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001196:	4b2c      	ldr	r3, [pc, #176]	; (8001248 <MX_ADC1_Init+0xd8>)
 8001198:	2201      	movs	r2, #1
 800119a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800119c:	4b2a      	ldr	r3, [pc, #168]	; (8001248 <MX_ADC1_Init+0xd8>)
 800119e:	2200      	movs	r2, #0
 80011a0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = ENABLE;
 80011a2:	4b29      	ldr	r3, [pc, #164]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.NbrOfDiscConversion = 1;
 80011aa:	4b27      	ldr	r3, [pc, #156]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b6:	4b24      	ldr	r3, [pc, #144]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011b8:	4a25      	ldr	r2, [pc, #148]	; (8001250 <MX_ADC1_Init+0xe0>)
 80011ba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011bc:	4b22      	ldr	r3, [pc, #136]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011be:	2200      	movs	r2, #0
 80011c0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 3;
 80011c2:	4b21      	ldr	r3, [pc, #132]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011c4:	2203      	movs	r2, #3
 80011c6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011c8:	4b1f      	ldr	r3, [pc, #124]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d0:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011d2:	2201      	movs	r2, #1
 80011d4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d6:	481c      	ldr	r0, [pc, #112]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011d8:	f002 f82c 	bl	8003234 <HAL_ADC_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 80011e2:	f000 fc43 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80011e6:	2305      	movs	r3, #5
 80011e8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ea:	2301      	movs	r3, #1
 80011ec:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80011ee:	2305      	movs	r3, #5
 80011f0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f2:	463b      	mov	r3, r7
 80011f4:	4619      	mov	r1, r3
 80011f6:	4814      	ldr	r0, [pc, #80]	; (8001248 <MX_ADC1_Init+0xd8>)
 80011f8:	f002 fb2a 	bl	8003850 <HAL_ADC_ConfigChannel>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001202:	f000 fc33 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001206:	2304      	movs	r3, #4
 8001208:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800120a:	2302      	movs	r3, #2
 800120c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800120e:	463b      	mov	r3, r7
 8001210:	4619      	mov	r1, r3
 8001212:	480d      	ldr	r0, [pc, #52]	; (8001248 <MX_ADC1_Init+0xd8>)
 8001214:	f002 fb1c 	bl	8003850 <HAL_ADC_ConfigChannel>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800121e:	f000 fc25 	bl	8001a6c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001222:	2302      	movs	r3, #2
 8001224:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001226:	2303      	movs	r3, #3
 8001228:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	4619      	mov	r1, r3
 800122e:	4806      	ldr	r0, [pc, #24]	; (8001248 <MX_ADC1_Init+0xd8>)
 8001230:	f002 fb0e 	bl	8003850 <HAL_ADC_ConfigChannel>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800123a:	f000 fc17 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20001318 	.word	0x20001318
 800124c:	40012000 	.word	0x40012000
 8001250:	0f000001 	.word	0x0f000001

08001254 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b092      	sub	sp, #72	; 0x48
 8001258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800125a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001264:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]
 800126e:	609a      	str	r2, [r3, #8]
 8001270:	60da      	str	r2, [r3, #12]
 8001272:	611a      	str	r2, [r3, #16]
 8001274:	615a      	str	r2, [r3, #20]
 8001276:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001278:	1d3b      	adds	r3, r7, #4
 800127a:	2220      	movs	r2, #32
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f005 fa62 	bl	8006748 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001284:	4b33      	ldr	r3, [pc, #204]	; (8001354 <MX_TIM1_Init+0x100>)
 8001286:	4a34      	ldr	r2, [pc, #208]	; (8001358 <MX_TIM1_Init+0x104>)
 8001288:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 2-1;
 800128a:	4b32      	ldr	r3, [pc, #200]	; (8001354 <MX_TIM1_Init+0x100>)
 800128c:	2201      	movs	r2, #1
 800128e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001290:	4b30      	ldr	r3, [pc, #192]	; (8001354 <MX_TIM1_Init+0x100>)
 8001292:	2200      	movs	r2, #0
 8001294:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1680-1;
 8001296:	4b2f      	ldr	r3, [pc, #188]	; (8001354 <MX_TIM1_Init+0x100>)
 8001298:	f240 628f 	movw	r2, #1679	; 0x68f
 800129c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <MX_TIM1_Init+0x100>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012a4:	4b2b      	ldr	r3, [pc, #172]	; (8001354 <MX_TIM1_Init+0x100>)
 80012a6:	2200      	movs	r2, #0
 80012a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012aa:	4b2a      	ldr	r3, [pc, #168]	; (8001354 <MX_TIM1_Init+0x100>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b0:	4828      	ldr	r0, [pc, #160]	; (8001354 <MX_TIM1_Init+0x100>)
 80012b2:	f003 fcf1 	bl	8004c98 <HAL_TIM_PWM_Init>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80012bc:	f000 fbd6 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012c8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012cc:	4619      	mov	r1, r3
 80012ce:	4821      	ldr	r0, [pc, #132]	; (8001354 <MX_TIM1_Init+0x100>)
 80012d0:	f004 ff18 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80012da:	f000 fbc7 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012de:	2360      	movs	r3, #96	; 0x60
 80012e0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 2-1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e6:	2300      	movs	r3, #0
 80012e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ea:	2300      	movs	r3, #0
 80012ec:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ee:	2300      	movs	r3, #0
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f6:	2300      	movs	r3, #0
 80012f8:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012fe:	2200      	movs	r2, #0
 8001300:	4619      	mov	r1, r3
 8001302:	4814      	ldr	r0, [pc, #80]	; (8001354 <MX_TIM1_Init+0x100>)
 8001304:	f004 f912 	bl	800552c <HAL_TIM_PWM_ConfigChannel>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800130e:	f000 fbad 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001312:	2300      	movs	r3, #0
 8001314:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800131a:	2300      	movs	r3, #0
 800131c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001326:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800132a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001330:	1d3b      	adds	r3, r7, #4
 8001332:	4619      	mov	r1, r3
 8001334:	4807      	ldr	r0, [pc, #28]	; (8001354 <MX_TIM1_Init+0x100>)
 8001336:	f004 ff61 	bl	80061fc <HAL_TIMEx_ConfigBreakDeadTime>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 8001340:	f000 fb94 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <MX_TIM1_Init+0x100>)
 8001346:	f001 fcfb 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 800134a:	bf00      	nop
 800134c:	3748      	adds	r7, #72	; 0x48
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	200013a8 	.word	0x200013a8
 8001358:	40010000 	.word	0x40010000

0800135c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b090      	sub	sp, #64	; 0x40
 8001360:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 f9ec 	bl	8006748 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001370:	f107 0314 	add.w	r3, r7, #20
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001386:	4b35      	ldr	r3, [pc, #212]	; (800145c <MX_TIM2_Init+0x100>)
 8001388:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800138c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800138e:	4b33      	ldr	r3, [pc, #204]	; (800145c <MX_TIM2_Init+0x100>)
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b31      	ldr	r3, [pc, #196]	; (800145c <MX_TIM2_Init+0x100>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4096;
 800139a:	4b30      	ldr	r3, [pc, #192]	; (800145c <MX_TIM2_Init+0x100>)
 800139c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013a0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b2e      	ldr	r3, [pc, #184]	; (800145c <MX_TIM2_Init+0x100>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b2c      	ldr	r3, [pc, #176]	; (800145c <MX_TIM2_Init+0x100>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80013ae:	482b      	ldr	r0, [pc, #172]	; (800145c <MX_TIM2_Init+0x100>)
 80013b0:	f003 fd8a 	bl	8004ec8 <HAL_TIM_IC_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80013ba:	f000 fb57 	bl	8001a6c <Error_Handler>
  }
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80013be:	2301      	movs	r3, #1
 80013c0:	61fb      	str	r3, [r7, #28]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c6:	2301      	movs	r3, #1
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013ca:	2300      	movs	r3, #0
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC1Filter = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d6:	2301      	movs	r3, #1
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfig.IC2Filter = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013e2:	f107 031c 	add.w	r3, r7, #28
 80013e6:	4619      	mov	r1, r3
 80013e8:	481c      	ldr	r0, [pc, #112]	; (800145c <MX_TIM2_Init+0x100>)
 80013ea:	f003 fdbc 	bl	8004f66 <HAL_TIM_Encoder_Init>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 80013f4:	f000 fb3a 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013fc:	2300      	movs	r3, #0
 80013fe:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001400:	f107 0314 	add.w	r3, r7, #20
 8001404:	4619      	mov	r1, r3
 8001406:	4815      	ldr	r0, [pc, #84]	; (800145c <MX_TIM2_Init+0x100>)
 8001408:	f004 fe7c 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d001      	beq.n	8001416 <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 8001412:	f000 fb2b 	bl	8001a6c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001416:	2300      	movs	r3, #0
 8001418:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800141a:	2301      	movs	r3, #1
 800141c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2208      	movs	r2, #8
 800142a:	4619      	mov	r1, r3
 800142c:	480b      	ldr	r0, [pc, #44]	; (800145c <MX_TIM2_Init+0x100>)
 800142e:	f003 ffe0 	bl	80053f2 <HAL_TIM_IC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM2_Init+0xe0>
  {
    Error_Handler();
 8001438:	f000 fb18 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	220c      	movs	r2, #12
 8001440:	4619      	mov	r1, r3
 8001442:	4806      	ldr	r0, [pc, #24]	; (800145c <MX_TIM2_Init+0x100>)
 8001444:	f003 ffd5 	bl	80053f2 <HAL_TIM_IC_ConfigChannel>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM2_Init+0xf6>
  {
    Error_Handler();
 800144e:	f000 fb0d 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001452:	bf00      	nop
 8001454:	3740      	adds	r7, #64	; 0x40
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20001434 	.word	0x20001434

08001460 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001466:	f107 0308 	add.w	r3, r7, #8
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001474:	463b      	mov	r3, r7
 8001476:	2200      	movs	r2, #0
 8001478:	601a      	str	r2, [r3, #0]
 800147a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147c:	4b1d      	ldr	r3, [pc, #116]	; (80014f4 <MX_TIM3_Init+0x94>)
 800147e:	4a1e      	ldr	r2, [pc, #120]	; (80014f8 <MX_TIM3_Init+0x98>)
 8001480:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001482:	4b1c      	ldr	r3, [pc, #112]	; (80014f4 <MX_TIM3_Init+0x94>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <MX_TIM3_Init+0x94>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148e:	4b19      	ldr	r3, [pc, #100]	; (80014f4 <MX_TIM3_Init+0x94>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b17      	ldr	r3, [pc, #92]	; (80014f4 <MX_TIM3_Init+0x94>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <MX_TIM3_Init+0x94>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a2:	4814      	ldr	r0, [pc, #80]	; (80014f4 <MX_TIM3_Init+0x94>)
 80014a4:	f003 fb38 	bl	8004b18 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80014ae:	f000 fadd 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0308 	add.w	r3, r7, #8
 80014bc:	4619      	mov	r1, r3
 80014be:	480d      	ldr	r0, [pc, #52]	; (80014f4 <MX_TIM3_Init+0x94>)
 80014c0:	f004 f8f6 	bl	80056b0 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80014ca:	f000 facf 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80014ce:	2320      	movs	r3, #32
 80014d0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d2:	2300      	movs	r3, #0
 80014d4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d6:	463b      	mov	r3, r7
 80014d8:	4619      	mov	r1, r3
 80014da:	4806      	ldr	r0, [pc, #24]	; (80014f4 <MX_TIM3_Init+0x94>)
 80014dc:	f004 fe12 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80014e6:	f000 fac1 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	2000128c 	.word	0x2000128c
 80014f8:	40000400 	.word	0x40000400

080014fc <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001502:	463b      	mov	r3, r7
 8001504:	2200      	movs	r2, #0
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800150a:	4b15      	ldr	r3, [pc, #84]	; (8001560 <MX_TIM6_Init+0x64>)
 800150c:	4a15      	ldr	r2, [pc, #84]	; (8001564 <MX_TIM6_Init+0x68>)
 800150e:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001510:	4b13      	ldr	r3, [pc, #76]	; (8001560 <MX_TIM6_Init+0x64>)
 8001512:	2200      	movs	r2, #0
 8001514:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001516:	4b12      	ldr	r3, [pc, #72]	; (8001560 <MX_TIM6_Init+0x64>)
 8001518:	2200      	movs	r2, #0
 800151a:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 1680 - 1;
 800151c:	4b10      	ldr	r3, [pc, #64]	; (8001560 <MX_TIM6_Init+0x64>)
 800151e:	f240 628f 	movw	r2, #1679	; 0x68f
 8001522:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001524:	4b0e      	ldr	r3, [pc, #56]	; (8001560 <MX_TIM6_Init+0x64>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800152a:	480d      	ldr	r0, [pc, #52]	; (8001560 <MX_TIM6_Init+0x64>)
 800152c:	f003 faf4 	bl	8004b18 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001536:	f000 fa99 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001542:	463b      	mov	r3, r7
 8001544:	4619      	mov	r1, r3
 8001546:	4806      	ldr	r0, [pc, #24]	; (8001560 <MX_TIM6_Init+0x64>)
 8001548:	f004 fddc 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 8001552:	f000 fa8b 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	20001360 	.word	0x20001360
 8001564:	40001000 	.word	0x40001000

08001568 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800156e:	463b      	mov	r3, r7
 8001570:	2200      	movs	r2, #0
 8001572:	601a      	str	r2, [r3, #0]
 8001574:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001576:	4b15      	ldr	r3, [pc, #84]	; (80015cc <MX_TIM7_Init+0x64>)
 8001578:	4a15      	ldr	r2, [pc, #84]	; (80015d0 <MX_TIM7_Init+0x68>)
 800157a:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 0;
 800157c:	4b13      	ldr	r3, [pc, #76]	; (80015cc <MX_TIM7_Init+0x64>)
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001582:	4b12      	ldr	r3, [pc, #72]	; (80015cc <MX_TIM7_Init+0x64>)
 8001584:	2200      	movs	r2, #0
 8001586:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 2100-1;
 8001588:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_TIM7_Init+0x64>)
 800158a:	f640 0233 	movw	r2, #2099	; 0x833
 800158e:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001590:	4b0e      	ldr	r3, [pc, #56]	; (80015cc <MX_TIM7_Init+0x64>)
 8001592:	2200      	movs	r2, #0
 8001594:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001596:	480d      	ldr	r0, [pc, #52]	; (80015cc <MX_TIM7_Init+0x64>)
 8001598:	f003 fabe 	bl	8004b18 <HAL_TIM_Base_Init>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80015a2:	f000 fa63 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a6:	2300      	movs	r3, #0
 80015a8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80015ae:	463b      	mov	r3, r7
 80015b0:	4619      	mov	r1, r3
 80015b2:	4806      	ldr	r0, [pc, #24]	; (80015cc <MX_TIM7_Init+0x64>)
 80015b4:	f004 fda6 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80015be:	f000 fa55 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	2000147c 	.word	0x2000147c
 80015d0:	40001400 	.word	0x40001400

080015d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f005 f89b 	bl	8006748 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001612:	4b3f      	ldr	r3, [pc, #252]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001614:	4a3f      	ldr	r2, [pc, #252]	; (8001714 <MX_TIM8_Init+0x140>)
 8001616:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 3-1;
 8001618:	4b3d      	ldr	r3, [pc, #244]	; (8001710 <MX_TIM8_Init+0x13c>)
 800161a:	2202      	movs	r2, #2
 800161c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b3c      	ldr	r3, [pc, #240]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 56000-1;
 8001624:	4b3a      	ldr	r3, [pc, #232]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001626:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 800162a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b38      	ldr	r3, [pc, #224]	; (8001710 <MX_TIM8_Init+0x13c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001632:	4b37      	ldr	r3, [pc, #220]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b35      	ldr	r3, [pc, #212]	; (8001710 <MX_TIM8_Init+0x13c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800163e:	4834      	ldr	r0, [pc, #208]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001640:	f003 fa6a 	bl	8004b18 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800164a:	f000 fa0f 	bl	8001a6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001658:	4619      	mov	r1, r3
 800165a:	482d      	ldr	r0, [pc, #180]	; (8001710 <MX_TIM8_Init+0x13c>)
 800165c:	f004 f828 	bl	80056b0 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001666:	f000 fa01 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800166a:	4829      	ldr	r0, [pc, #164]	; (8001710 <MX_TIM8_Init+0x13c>)
 800166c:	f003 fb14 	bl	8004c98 <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001676:	f000 f9f9 	bl	8001a6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001686:	4619      	mov	r1, r3
 8001688:	4821      	ldr	r0, [pc, #132]	; (8001710 <MX_TIM8_Init+0x13c>)
 800168a:	f004 fd3b 	bl	8006104 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001694:	f000 f9ea 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 39200-1;
 800169c:	f649 131f 	movw	r3, #39199	; 0x991f
 80016a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a2:	2300      	movs	r3, #0
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a6:	2300      	movs	r3, #0
 80016a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ae:	2300      	movs	r3, #0
 80016b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ba:	2200      	movs	r2, #0
 80016bc:	4619      	mov	r1, r3
 80016be:	4814      	ldr	r0, [pc, #80]	; (8001710 <MX_TIM8_Init+0x13c>)
 80016c0:	f003 ff34 	bl	800552c <HAL_TIM_PWM_ConfigChannel>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80016ca:	f000 f9cf 	bl	8001a6c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ce:	2300      	movs	r3, #0
 80016d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016d6:	2300      	movs	r3, #0
 80016d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ec:	1d3b      	adds	r3, r7, #4
 80016ee:	4619      	mov	r1, r3
 80016f0:	4807      	ldr	r0, [pc, #28]	; (8001710 <MX_TIM8_Init+0x13c>)
 80016f2:	f004 fd83 	bl	80061fc <HAL_TIMEx_ConfigBreakDeadTime>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d001      	beq.n	8001700 <MX_TIM8_Init+0x12c>
  {
    Error_Handler();
 80016fc:	f000 f9b6 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001700:	4803      	ldr	r0, [pc, #12]	; (8001710 <MX_TIM8_Init+0x13c>)
 8001702:	f001 fb1d 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 8001706:	bf00      	nop
 8001708:	3758      	adds	r7, #88	; 0x58
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	200011fc 	.word	0x200011fc
 8001714:	40010400 	.word	0x40010400

08001718 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800171e:	1d3b      	adds	r3, r7, #4
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
 800172c:	615a      	str	r2, [r3, #20]
 800172e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001730:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <MX_TIM10_Init+0x9c>)
 8001734:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 15999;
 8001736:	4b1e      	ldr	r3, [pc, #120]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001738:	f643 627f 	movw	r2, #15999	; 0x3e7f
 800173c:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001740:	2200      	movs	r2, #0
 8001742:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8001744:	4b1a      	ldr	r3, [pc, #104]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001746:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800174a:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800174c:	4b18      	ldr	r3, [pc, #96]	; (80017b0 <MX_TIM10_Init+0x98>)
 800174e:	2200      	movs	r2, #0
 8001750:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001752:	4b17      	ldr	r3, [pc, #92]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001758:	4815      	ldr	r0, [pc, #84]	; (80017b0 <MX_TIM10_Init+0x98>)
 800175a:	f003 f9dd 	bl	8004b18 <HAL_TIM_Base_Init>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d001      	beq.n	8001768 <MX_TIM10_Init+0x50>
  {
    Error_Handler();
 8001764:	f000 f982 	bl	8001a6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 8001768:	4811      	ldr	r0, [pc, #68]	; (80017b0 <MX_TIM10_Init+0x98>)
 800176a:	f003 fa95 	bl	8004c98 <HAL_TIM_PWM_Init>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d001      	beq.n	8001778 <MX_TIM10_Init+0x60>
  {
    Error_Handler();
 8001774:	f000 f97a 	bl	8001a6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001778:	2360      	movs	r3, #96	; 0x60
 800177a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 300;
 800177c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001780:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001786:	2300      	movs	r3, #0
 8001788:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800178a:	1d3b      	adds	r3, r7, #4
 800178c:	2200      	movs	r2, #0
 800178e:	4619      	mov	r1, r3
 8001790:	4807      	ldr	r0, [pc, #28]	; (80017b0 <MX_TIM10_Init+0x98>)
 8001792:	f003 fecb 	bl	800552c <HAL_TIM_PWM_ConfigChannel>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <MX_TIM10_Init+0x88>
  {
    Error_Handler();
 800179c:	f000 f966 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80017a0:	4803      	ldr	r0, [pc, #12]	; (80017b0 <MX_TIM10_Init+0x98>)
 80017a2:	f001 facd 	bl	8002d40 <HAL_TIM_MspPostInit>

}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	20001244 	.word	0x20001244
 80017b4:	40014400 	.word	0x40014400

080017b8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_UART4_Init+0x4c>)
 80017be:	4a12      	ldr	r2, [pc, #72]	; (8001808 <MX_UART4_Init+0x50>)
 80017c0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017c2:	4b10      	ldr	r3, [pc, #64]	; (8001804 <MX_UART4_Init+0x4c>)
 80017c4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017c8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_UART4_Init+0x4c>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_UART4_Init+0x4c>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_UART4_Init+0x4c>)
 80017d8:	2200      	movs	r2, #0
 80017da:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_UART4_Init+0x4c>)
 80017de:	220c      	movs	r2, #12
 80017e0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_UART4_Init+0x4c>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_UART4_Init+0x4c>)
 80017ea:	2200      	movs	r2, #0
 80017ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80017ee:	4805      	ldr	r0, [pc, #20]	; (8001804 <MX_UART4_Init+0x4c>)
 80017f0:	f004 fd6a 	bl	80062c8 <HAL_UART_Init>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80017fa:	f000 f937 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200013f0 	.word	0x200013f0
 8001808:	40004c00 	.word	0x40004c00

0800180c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <MX_UART5_Init+0x4c>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <MX_UART5_Init+0x50>)
 8001814:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <MX_UART5_Init+0x4c>)
 8001818:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800181c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <MX_UART5_Init+0x4c>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001824:	4b0c      	ldr	r3, [pc, #48]	; (8001858 <MX_UART5_Init+0x4c>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <MX_UART5_Init+0x4c>)
 800182c:	2200      	movs	r2, #0
 800182e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <MX_UART5_Init+0x4c>)
 8001832:	220c      	movs	r2, #12
 8001834:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001836:	4b08      	ldr	r3, [pc, #32]	; (8001858 <MX_UART5_Init+0x4c>)
 8001838:	2200      	movs	r2, #0
 800183a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <MX_UART5_Init+0x4c>)
 800183e:	2200      	movs	r2, #0
 8001840:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001842:	4805      	ldr	r0, [pc, #20]	; (8001858 <MX_UART5_Init+0x4c>)
 8001844:	f004 fd40 	bl	80062c8 <HAL_UART_Init>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800184e:	f000 f90d 	bl	8001a6c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001852:	bf00      	nop
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200012d4 	.word	0x200012d4
 800185c:	40005000 	.word	0x40005000

08001860 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b08c      	sub	sp, #48	; 0x30
 8001864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001866:	f107 031c 	add.w	r3, r7, #28
 800186a:	2200      	movs	r2, #0
 800186c:	601a      	str	r2, [r3, #0]
 800186e:	605a      	str	r2, [r3, #4]
 8001870:	609a      	str	r2, [r3, #8]
 8001872:	60da      	str	r2, [r3, #12]
 8001874:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	61bb      	str	r3, [r7, #24]
 800187a:	4b76      	ldr	r3, [pc, #472]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a75      	ldr	r2, [pc, #468]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b73      	ldr	r3, [pc, #460]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	61bb      	str	r3, [r7, #24]
 8001890:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	617b      	str	r3, [r7, #20]
 8001896:	4b6f      	ldr	r3, [pc, #444]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a6e      	ldr	r2, [pc, #440]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 800189c:	f043 0301 	orr.w	r3, r3, #1
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b6c      	ldr	r3, [pc, #432]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	617b      	str	r3, [r7, #20]
 80018ac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	4b68      	ldr	r3, [pc, #416]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a67      	ldr	r2, [pc, #412]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018b8:	f043 0310 	orr.w	r3, r3, #16
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b65      	ldr	r3, [pc, #404]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0310 	and.w	r3, r3, #16
 80018c6:	613b      	str	r3, [r7, #16]
 80018c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60fb      	str	r3, [r7, #12]
 80018ce:	4b61      	ldr	r3, [pc, #388]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a60      	ldr	r2, [pc, #384]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b5e      	ldr	r3, [pc, #376]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60fb      	str	r3, [r7, #12]
 80018e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60bb      	str	r3, [r7, #8]
 80018ea:	4b5a      	ldr	r3, [pc, #360]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a59      	ldr	r2, [pc, #356]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b57      	ldr	r3, [pc, #348]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	607b      	str	r3, [r7, #4]
 8001906:	4b53      	ldr	r3, [pc, #332]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4a52      	ldr	r2, [pc, #328]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 800190c:	f043 0304 	orr.w	r3, r3, #4
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4b50      	ldr	r3, [pc, #320]	; (8001a54 <MX_GPIO_Init+0x1f4>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0304 	and.w	r3, r3, #4
 800191a:	607b      	str	r3, [r7, #4]
 800191c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(TEST_PIN_GPIO_Port, TEST_PIN_Pin, GPIO_PIN_RESET);
 800191e:	2200      	movs	r2, #0
 8001920:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001924:	484c      	ldr	r0, [pc, #304]	; (8001a58 <MX_GPIO_Init+0x1f8>)
 8001926:	f002 fc69 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|VFD_RS_Pin, GPIO_PIN_RESET);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001930:	484a      	ldr	r0, [pc, #296]	; (8001a5c <MX_GPIO_Init+0x1fc>)
 8001932:	f002 fc63 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|VFD_CE_Pin|VFD_CLK_Pin|VFD_RESET_Pin, GPIO_PIN_RESET);
 8001936:	2200      	movs	r2, #0
 8001938:	f44f 51b8 	mov.w	r1, #5888	; 0x1700
 800193c:	4848      	ldr	r0, [pc, #288]	; (8001a60 <MX_GPIO_Init+0x200>)
 800193e:	f002 fc5d 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DC_DIR_Pin|U_Sonic_CH1_O_Pin, GPIO_PIN_RESET);
 8001942:	2200      	movs	r2, #0
 8001944:	f44f 61a0 	mov.w	r1, #1280	; 0x500
 8001948:	4846      	ldr	r0, [pc, #280]	; (8001a64 <MX_GPIO_Init+0x204>)
 800194a:	f002 fc57 	bl	80041fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TEST_PIN_Pin */
  GPIO_InitStruct.Pin = TEST_PIN_Pin;
 800194e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001954:	2301      	movs	r3, #1
 8001956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001958:	2301      	movs	r3, #1
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(TEST_PIN_GPIO_Port, &GPIO_InitStruct);
 8001960:	f107 031c 	add.w	r3, r7, #28
 8001964:	4619      	mov	r1, r3
 8001966:	483c      	ldr	r0, [pc, #240]	; (8001a58 <MX_GPIO_Init+0x1f8>)
 8001968:	f002 faac 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 VFD_RS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_14|VFD_RS_Pin;
 800196c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001972:	2301      	movs	r3, #1
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001976:	2301      	movs	r3, #1
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800197a:	2300      	movs	r3, #0
 800197c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800197e:	f107 031c 	add.w	r3, r7, #28
 8001982:	4619      	mov	r1, r3
 8001984:	4835      	ldr	r0, [pc, #212]	; (8001a5c <MX_GPIO_Init+0x1fc>)
 8001986:	f002 fa9d 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 VFD_CLK_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|VFD_CLK_Pin;
 800198a:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 800198e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001990:	2301      	movs	r3, #1
 8001992:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001998:	2300      	movs	r3, #0
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800199c:	f107 031c 	add.w	r3, r7, #28
 80019a0:	4619      	mov	r1, r3
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <MX_GPIO_Init+0x200>)
 80019a4:	f002 fa8e 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : VFD_CE_Pin VFD_RESET_Pin */
  GPIO_InitStruct.Pin = VFD_CE_Pin|VFD_RESET_Pin;
 80019a8:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 80019ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019ae:	2301      	movs	r3, #1
 80019b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019b2:	2301      	movs	r3, #1
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 031c 	add.w	r3, r7, #28
 80019be:	4619      	mov	r1, r3
 80019c0:	4827      	ldr	r0, [pc, #156]	; (8001a60 <MX_GPIO_Init+0x200>)
 80019c2:	f002 fa7f 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Left_Pin SW_Down_Pin SW_Right_Pin */
  GPIO_InitStruct.Pin = SW_Left_Pin|SW_Down_Pin|SW_Right_Pin;
 80019c6:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80019ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80019d0:	2301      	movs	r3, #1
 80019d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019d4:	f107 031c 	add.w	r3, r7, #28
 80019d8:	4619      	mov	r1, r3
 80019da:	4821      	ldr	r0, [pc, #132]	; (8001a60 <MX_GPIO_Init+0x200>)
 80019dc:	f002 fa72 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019e6:	2300      	movs	r3, #0
 80019e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ee:	f107 031c 	add.w	r3, r7, #28
 80019f2:	4619      	mov	r1, r3
 80019f4:	481a      	ldr	r0, [pc, #104]	; (8001a60 <MX_GPIO_Init+0x200>)
 80019f6:	f002 fa65 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : DC_DIR_Pin U_Sonic_CH1_O_Pin */
  GPIO_InitStruct.Pin = DC_DIR_Pin|U_Sonic_CH1_O_Pin;
 80019fa:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80019fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a00:	2301      	movs	r3, #1
 8001a02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a04:	2301      	movs	r3, #1
 8001a06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f107 031c 	add.w	r3, r7, #28
 8001a10:	4619      	mov	r1, r3
 8001a12:	4814      	ldr	r0, [pc, #80]	; (8001a64 <MX_GPIO_Init+0x204>)
 8001a14:	f002 fa56 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_Decrease_Pin SW_Increase_Pin */
  GPIO_InitStruct.Pin = SW_Decrease_Pin|SW_Increase_Pin;
 8001a18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001a1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a22:	2301      	movs	r3, #1
 8001a24:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480e      	ldr	r0, [pc, #56]	; (8001a68 <MX_GPIO_Init+0x208>)
 8001a2e:	f002 fa49 	bl	8003ec4 <HAL_GPIO_Init>

  /*Configure GPIO pin : U_Sonic_CH1_I_Pin */
  GPIO_InitStruct.Pin = U_Sonic_CH1_I_Pin;
 8001a32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001a36:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(U_Sonic_CH1_I_GPIO_Port, &GPIO_InitStruct);
 8001a40:	f107 031c 	add.w	r3, r7, #28
 8001a44:	4619      	mov	r1, r3
 8001a46:	4807      	ldr	r0, [pc, #28]	; (8001a64 <MX_GPIO_Init+0x204>)
 8001a48:	f002 fa3c 	bl	8003ec4 <HAL_GPIO_Init>

}
 8001a4c:	bf00      	nop
 8001a4e:	3730      	adds	r7, #48	; 0x30
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40020400 	.word	0x40020400
 8001a60:	40020c00 	.word	0x40020c00
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020000 	.word	0x40020000

08001a6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a70:	b672      	cpsid	i
}
 8001a72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a74:	e7fe      	b.n	8001a74 <Error_Handler+0x8>
	...

08001a78 <DecreaseValue>:
uint16_t InitialPWMValue = 2-1;
volatile uint16_t DCValue = 2 - 1;
volatile uint16_t ServoValue = 39200-1;

void DecreaseValue(int type, int value)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	6039      	str	r1, [r7, #0]
	//type == 0: BLDC
	//type == 1: ServoMotor
	if(!type)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d120      	bne.n	8001aca <DecreaseValue+0x52>
	{
		DCValue = DCValue - value;
 8001a88:	4b22      	ldr	r3, [pc, #136]	; (8001b14 <DecreaseValue+0x9c>)
 8001a8a:	881b      	ldrh	r3, [r3, #0]
 8001a8c:	b29a      	uxth	r2, r3
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	1ad3      	subs	r3, r2, r3
 8001a94:	b29a      	uxth	r2, r3
 8001a96:	4b1f      	ldr	r3, [pc, #124]	; (8001b14 <DecreaseValue+0x9c>)
 8001a98:	801a      	strh	r2, [r3, #0]

		if(2 > DCValue)
 8001a9a:	4b1e      	ldr	r3, [pc, #120]	; (8001b14 <DecreaseValue+0x9c>)
 8001a9c:	881b      	ldrh	r3, [r3, #0]
 8001a9e:	b29b      	uxth	r3, r3
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d802      	bhi.n	8001aaa <DecreaseValue+0x32>
		{
			DCValue = 2;
 8001aa4:	4b1b      	ldr	r3, [pc, #108]	; (8001b14 <DecreaseValue+0x9c>)
 8001aa6:	2202      	movs	r2, #2
 8001aa8:	801a      	strh	r2, [r3, #0]
		}

		//set DCpulse
		DCPulse = DCValue;
 8001aaa:	4b1a      	ldr	r3, [pc, #104]	; (8001b14 <DecreaseValue+0x9c>)
 8001aac:	881b      	ldrh	r3, [r3, #0]
 8001aae:	b29a      	uxth	r2, r3
 8001ab0:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <DecreaseValue+0xa0>)
 8001ab2:	635a      	str	r2, [r3, #52]	; 0x34
		VFDPrintf("%8ld", DCValue);
 8001ab4:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <DecreaseValue+0x9c>)
 8001ab6:	881b      	ldrh	r3, [r3, #0]
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	4619      	mov	r1, r3
 8001abc:	4817      	ldr	r0, [pc, #92]	; (8001b1c <DecreaseValue+0xa4>)
 8001abe:	f7ff fa25 	bl	8000f0c <VFDPrintf>

		HAL_Delay(50);
 8001ac2:	2032      	movs	r0, #50	; 0x32
 8001ac4:	f001 fb92 	bl	80031ec <HAL_Delay>
		VFDPrintf("%8ld", ServoValue);

		HAL_Delay(50);
	}

}
 8001ac8:	e01f      	b.n	8001b0a <DecreaseValue+0x92>
		ServoValue = ServoValue - value;
 8001aca:	4b15      	ldr	r3, [pc, #84]	; (8001b20 <DecreaseValue+0xa8>)
 8001acc:	881b      	ldrh	r3, [r3, #0]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	4b11      	ldr	r3, [pc, #68]	; (8001b20 <DecreaseValue+0xa8>)
 8001ada:	801a      	strh	r2, [r3, #0]
		if(2 > ServoValue)
 8001adc:	4b10      	ldr	r3, [pc, #64]	; (8001b20 <DecreaseValue+0xa8>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d802      	bhi.n	8001aec <DecreaseValue+0x74>
			ServoValue = 2;
 8001ae6:	4b0e      	ldr	r3, [pc, #56]	; (8001b20 <DecreaseValue+0xa8>)
 8001ae8:	2202      	movs	r2, #2
 8001aea:	801a      	strh	r2, [r3, #0]
		ServoPulse = ServoValue;
 8001aec:	4b0c      	ldr	r3, [pc, #48]	; (8001b20 <DecreaseValue+0xa8>)
 8001aee:	881b      	ldrh	r3, [r3, #0]
 8001af0:	b29a      	uxth	r2, r3
 8001af2:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <DecreaseValue+0xac>)
 8001af4:	635a      	str	r2, [r3, #52]	; 0x34
		VFDPrintf("%8ld", ServoValue);
 8001af6:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <DecreaseValue+0xa8>)
 8001af8:	881b      	ldrh	r3, [r3, #0]
 8001afa:	b29b      	uxth	r3, r3
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	; (8001b1c <DecreaseValue+0xa4>)
 8001b00:	f7ff fa04 	bl	8000f0c <VFDPrintf>
		HAL_Delay(50);
 8001b04:	2032      	movs	r0, #50	; 0x32
 8001b06:	f001 fb71 	bl	80031ec <HAL_Delay>
}
 8001b0a:	bf00      	nop
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	bf00      	nop
 8001b14:	20000002 	.word	0x20000002
 8001b18:	40010000 	.word	0x40010000
 8001b1c:	08007030 	.word	0x08007030
 8001b20:	20000004 	.word	0x20000004
 8001b24:	40010400 	.word	0x40010400

08001b28 <IncreaseValue>:

void IncreaseValue(int type, int value)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
 8001b30:	6039      	str	r1, [r7, #0]
	//type == 0: DC
	//type == 1: ServoMotor

	if(!type)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d123      	bne.n	8001b80 <IncreaseValue+0x58>
	{
		DCValue = DCValue + value;
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b24      	ldr	r3, [pc, #144]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b3e:	881b      	ldrh	r3, [r3, #0]
 8001b40:	b29b      	uxth	r3, r3
 8001b42:	4413      	add	r3, r2
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b48:	801a      	strh	r2, [r3, #0]

		if(1670 < DCValue)
 8001b4a:	4b21      	ldr	r3, [pc, #132]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	b29b      	uxth	r3, r3
 8001b50:	f240 6286 	movw	r2, #1670	; 0x686
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d903      	bls.n	8001b60 <IncreaseValue+0x38>
		{
			DCValue = 1670;
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b5a:	f240 6286 	movw	r2, #1670	; 0x686
 8001b5e:	801a      	strh	r2, [r3, #0]
		{

		}

		//set DCpulse
		DCPulse = DCValue;
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b62:	881b      	ldrh	r3, [r3, #0]
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b1b      	ldr	r3, [pc, #108]	; (8001bd4 <IncreaseValue+0xac>)
 8001b68:	635a      	str	r2, [r3, #52]	; 0x34
		VFDPrintf("%8ld", DCValue);
 8001b6a:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <IncreaseValue+0xa8>)
 8001b6c:	881b      	ldrh	r3, [r3, #0]
 8001b6e:	b29b      	uxth	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	4819      	ldr	r0, [pc, #100]	; (8001bd8 <IncreaseValue+0xb0>)
 8001b74:	f7ff f9ca 	bl	8000f0c <VFDPrintf>

		HAL_Delay(50);
 8001b78:	2032      	movs	r0, #50	; 0x32
 8001b7a:	f001 fb37 	bl	80031ec <HAL_Delay>
		VFDPrintf("%8ld", ServoValue);

		HAL_Delay(50);
	}

}
 8001b7e:	e022      	b.n	8001bc6 <IncreaseValue+0x9e>
		ServoValue = ServoValue + value;
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <IncreaseValue+0xb4>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	b29b      	uxth	r3, r3
 8001b8a:	4413      	add	r3, r2
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <IncreaseValue+0xb4>)
 8001b90:	801a      	strh	r2, [r3, #0]
		if(55000 < ServoValue)
 8001b92:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <IncreaseValue+0xb4>)
 8001b94:	881b      	ldrh	r3, [r3, #0]
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d903      	bls.n	8001ba8 <IncreaseValue+0x80>
			ServoValue = 55000;
 8001ba0:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <IncreaseValue+0xb4>)
 8001ba2:	f24d 62d8 	movw	r2, #55000	; 0xd6d8
 8001ba6:	801a      	strh	r2, [r3, #0]
		ServoPulse = ServoValue;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <IncreaseValue+0xb4>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	4b0c      	ldr	r3, [pc, #48]	; (8001be0 <IncreaseValue+0xb8>)
 8001bb0:	635a      	str	r2, [r3, #52]	; 0x34
		VFDPrintf("%8ld", ServoValue);
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	; (8001bdc <IncreaseValue+0xb4>)
 8001bb4:	881b      	ldrh	r3, [r3, #0]
 8001bb6:	b29b      	uxth	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4807      	ldr	r0, [pc, #28]	; (8001bd8 <IncreaseValue+0xb0>)
 8001bbc:	f7ff f9a6 	bl	8000f0c <VFDPrintf>
		HAL_Delay(50);
 8001bc0:	2032      	movs	r0, #50	; 0x32
 8001bc2:	f001 fb13 	bl	80031ec <HAL_Delay>
}
 8001bc6:	bf00      	nop
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	20000002 	.word	0x20000002
 8001bd4:	40010000 	.word	0x40010000
 8001bd8:	08007030 	.word	0x08007030
 8001bdc:	20000004 	.word	0x20000004
 8001be0:	40010400 	.word	0x40010400

08001be4 <ControlPulse>:

void ControlPulse(int type, int value)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	6039      	str	r1, [r7, #0]
	while(0 < SW_U)
 8001bee:	e014      	b.n	8001c1a <ControlPulse+0x36>
	{

		if(SW_L == 0)
 8001bf0:	4b0f      	ldr	r3, [pc, #60]	; (8001c30 <ControlPulse+0x4c>)
 8001bf2:	691b      	ldr	r3, [r3, #16]
 8001bf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d104      	bne.n	8001c06 <ControlPulse+0x22>
		{
			DecreaseValue(type, value);
 8001bfc:	6839      	ldr	r1, [r7, #0]
 8001bfe:	6878      	ldr	r0, [r7, #4]
 8001c00:	f7ff ff3a 	bl	8001a78 <DecreaseValue>
 8001c04:	e009      	b.n	8001c1a <ControlPulse+0x36>
		}
		else if(SW_R == 0)
 8001c06:	4b0a      	ldr	r3, [pc, #40]	; (8001c30 <ControlPulse+0x4c>)
 8001c08:	691b      	ldr	r3, [r3, #16]
 8001c0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d103      	bne.n	8001c1a <ControlPulse+0x36>
		{
			IncreaseValue(type, value);
 8001c12:	6839      	ldr	r1, [r7, #0]
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f7ff ff87 	bl	8001b28 <IncreaseValue>
	while(0 < SW_U)
 8001c1a:	4b05      	ldr	r3, [pc, #20]	; (8001c30 <ControlPulse+0x4c>)
 8001c1c:	691b      	ldr	r3, [r3, #16]
 8001c1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1e4      	bne.n	8001bf0 <ControlPulse+0xc>
		else
		{

		}
	}
}
 8001c26:	bf00      	nop
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	40020c00 	.word	0x40020c00

08001c34 <DCControlPrint>:

//<<<First Page>>>
void DCControlPrint(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
	VFDPrintf("1__DC__C");
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <DCControlPrint+0x10>)
 8001c3a:	f7ff f967 	bl	8000f0c <VFDPrintf>
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	08007038 	.word	0x08007038

08001c48 <ServoControlPrint>:

void ServoControlPrint(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
	VFDPrintf("1_SERV_C");
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <ServoControlPrint+0x10>)
 8001c4e:	f7ff f95d 	bl	8000f0c <VFDPrintf>
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	08007044 	.word	0x08007044

08001c5c <IRSensorPrint>:

void IRSensorPrint(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
	VFDPrintf("1___IR__");
 8001c60:	4802      	ldr	r0, [pc, #8]	; (8001c6c <IRSensorPrint+0x10>)
 8001c62:	f7ff f953 	bl	8000f0c <VFDPrintf>
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	08007050 	.word	0x08007050

08001c70 <FirstPageEndPrint>:

void FirstPageEndPrint(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
	VFDPrintf("1_%d_END_", SwitchCategory);
 8001c74:	4b03      	ldr	r3, [pc, #12]	; (8001c84 <FirstPageEndPrint+0x14>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4803      	ldr	r0, [pc, #12]	; (8001c88 <FirstPageEndPrint+0x18>)
 8001c7c:	f7ff f946 	bl	8000f0c <VFDPrintf>
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20001158 	.word	0x20001158
 8001c88:	0800705c 	.word	0x0800705c

08001c8c <DCInitiatePrint>:
//<<<Second Page>>>

//<DCControl>

void DCInitiatePrint(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
	menuCnt = 0;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <DCInitiatePrint+0x14>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
	VFDPrintf("2_INIT__");
 8001c96:	4803      	ldr	r0, [pc, #12]	; (8001ca4 <DCInitiatePrint+0x18>)
 8001c98:	f7ff f938 	bl	8000f0c <VFDPrintf>
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000138 	.word	0x20000138
 8001ca4:	08007068 	.word	0x08007068

08001ca8 <DCControl100Print>:

void DCControl100Print(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
	VFDPrintf("2_D_100_");
 8001cac:	4802      	ldr	r0, [pc, #8]	; (8001cb8 <DCControl100Print+0x10>)
 8001cae:	f7ff f92d 	bl	8000f0c <VFDPrintf>
}
 8001cb2:	bf00      	nop
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	08007074 	.word	0x08007074

08001cbc <DCControl10Print>:

void DCControl10Print(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	af00      	add	r7, sp, #0
	VFDPrintf("2_D_10__");
 8001cc0:	4802      	ldr	r0, [pc, #8]	; (8001ccc <DCControl10Print+0x10>)
 8001cc2:	f7ff f923 	bl	8000f0c <VFDPrintf>
}
 8001cc6:	bf00      	nop
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	08007080 	.word	0x08007080

08001cd0 <DCControl1Print>:

void DCControl1Print(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	af00      	add	r7, sp, #0
	VFDPrintf("2_D_1___");
 8001cd4:	4802      	ldr	r0, [pc, #8]	; (8001ce0 <DCControl1Print+0x10>)
 8001cd6:	f7ff f919 	bl	8000f0c <VFDPrintf>
}
 8001cda:	bf00      	nop
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	0800708c 	.word	0x0800708c

08001ce4 <DCVEL10Print>:

void DCVEL10Print(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
	VFDPrintf("2_VEL_10");
 8001ce8:	4802      	ldr	r0, [pc, #8]	; (8001cf4 <DCVEL10Print+0x10>)
 8001cea:	f7ff f90f 	bl	8000f0c <VFDPrintf>
}
 8001cee:	bf00      	nop
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	08007098 	.word	0x08007098

08001cf8 <getSensorValPrint>:

//<IR>
void getSensorValPrint(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
	VFDPrintf("2_I_4095");
 8001cfc:	4802      	ldr	r0, [pc, #8]	; (8001d08 <getSensorValPrint+0x10>)
 8001cfe:	f7ff f905 	bl	8000f0c <VFDPrintf>
}
 8001d02:	bf00      	nop
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	080070a4 	.word	0x080070a4

08001d0c <getEncoderValPrint>:

void getEncoderValPrint(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
	VFDPrintf("2_ENCOD_");
 8001d10:	4802      	ldr	r0, [pc, #8]	; (8001d1c <getEncoderValPrint+0x10>)
 8001d12:	f7ff f8fb 	bl	8000f0c <VFDPrintf>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	080070b0 	.word	0x080070b0

08001d20 <doZeroControlPrint>:

void doZeroControlPrint(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	af00      	add	r7, sp, #0
	VFDPrintf("2_ZERO__");
 8001d24:	4802      	ldr	r0, [pc, #8]	; (8001d30 <doZeroControlPrint+0x10>)
 8001d26:	f7ff f8f1 	bl	8000f0c <VFDPrintf>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	080070bc 	.word	0x080070bc

08001d34 <ServoControl100Print>:
	menuCnt = 0;
	VFDPrintf("2_INIT__");
}

void ServoControl100Print(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	VFDPrintf("2_S_100_");
 8001d38:	4802      	ldr	r0, [pc, #8]	; (8001d44 <ServoControl100Print+0x10>)
 8001d3a:	f7ff f8e7 	bl	8000f0c <VFDPrintf>
}
 8001d3e:	bf00      	nop
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	080070c8 	.word	0x080070c8

08001d48 <ServoControl10Print>:

void ServoControl10Print(void)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	af00      	add	r7, sp, #0
	VFDPrintf("2_S_10__");
 8001d4c:	4802      	ldr	r0, [pc, #8]	; (8001d58 <ServoControl10Print+0x10>)
 8001d4e:	f7ff f8dd 	bl	8000f0c <VFDPrintf>
}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	080070d4 	.word	0x080070d4

08001d5c <ServoControl1Print>:

void ServoControl1Print(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	af00      	add	r7, sp, #0
	VFDPrintf("2_S_1___");
 8001d60:	4802      	ldr	r0, [pc, #8]	; (8001d6c <ServoControl1Print+0x10>)
 8001d62:	f7ff f8d3 	bl	8000f0c <VFDPrintf>
}
 8001d66:	bf00      	nop
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	080070e0 	.word	0x080070e0

08001d70 <SecondPageEndPrint>:

void SecondPageEndPrint(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
	VFDPrintf("2_%d_END_", SwitchFunction);
 8001d74:	4b03      	ldr	r3, [pc, #12]	; (8001d84 <SecondPageEndPrint+0x14>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4803      	ldr	r0, [pc, #12]	; (8001d88 <SecondPageEndPrint+0x18>)
 8001d7c:	f7ff f8c6 	bl	8000f0c <VFDPrintf>
}
 8001d80:	bf00      	nop
 8001d82:	bd80      	pop	{r7, pc}
 8001d84:	20001164 	.word	0x20001164
 8001d88:	080070ec 	.word	0x080070ec

08001d8c <DCInitiate>:

//<<<Third Page>>>

//<DCControl>
void DCInitiate(void)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	af00      	add	r7, sp, #0
	if (menuCnt == 0)
 8001d90:	4b15      	ldr	r3, [pc, #84]	; (8001de8 <DCInitiate+0x5c>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11d      	bne.n	8001dd4 <DCInitiate+0x48>
	{
		VFDPrintf("INITIATE");
 8001d98:	4814      	ldr	r0, [pc, #80]	; (8001dec <DCInitiate+0x60>)
 8001d9a:	f7ff f8b7 	bl	8000f0c <VFDPrintf>
		DCValue = InitialPWMValue;
 8001d9e:	4b14      	ldr	r3, [pc, #80]	; (8001df0 <DCInitiate+0x64>)
 8001da0:	881a      	ldrh	r2, [r3, #0]
 8001da2:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <DCInitiate+0x68>)
 8001da4:	801a      	strh	r2, [r3, #0]
		HAL_Delay(100);
 8001da6:	2064      	movs	r0, #100	; 0x64
 8001da8:	f001 fa20 	bl	80031ec <HAL_Delay>
		VFDPrintf("FINISHED");
 8001dac:	4812      	ldr	r0, [pc, #72]	; (8001df8 <DCInitiate+0x6c>)
 8001dae:	f7ff f8ad 	bl	8000f0c <VFDPrintf>

		//set pulse
		DCPulse = DCValue;
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <DCInitiate+0x68>)
 8001db4:	881b      	ldrh	r3, [r3, #0]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <DCInitiate+0x70>)
 8001dba:	635a      	str	r2, [r3, #52]	; 0x34
		HAL_Delay(10);
 8001dbc:	200a      	movs	r0, #10
 8001dbe:	f001 fa15 	bl	80031ec <HAL_Delay>
		menuCnt++;
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <DCInitiate+0x5c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	4a07      	ldr	r2, [pc, #28]	; (8001de8 <DCInitiate+0x5c>)
 8001dca:	6013      	str	r3, [r2, #0]
		ControlCnt = 0;
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <DCInitiate+0x74>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	601a      	str	r2, [r3, #0]
	else
	{
		VFDPrintf("%8ld", DCValue);
	}

}
 8001dd2:	e006      	b.n	8001de2 <DCInitiate+0x56>
		VFDPrintf("%8ld", DCValue);
 8001dd4:	4b07      	ldr	r3, [pc, #28]	; (8001df4 <DCInitiate+0x68>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	b29b      	uxth	r3, r3
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4809      	ldr	r0, [pc, #36]	; (8001e04 <DCInitiate+0x78>)
 8001dde:	f7ff f895 	bl	8000f0c <VFDPrintf>
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20000138 	.word	0x20000138
 8001dec:	080070f8 	.word	0x080070f8
 8001df0:	20000000 	.word	0x20000000
 8001df4:	20000002 	.word	0x20000002
 8001df8:	08007104 	.word	0x08007104
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	2000115c 	.word	0x2000115c
 8001e04:	08007030 	.word	0x08007030

08001e08 <DCControl100>:


void DCControl100(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	ControlPulse(DC, 100);
 8001e0c:	2164      	movs	r1, #100	; 0x64
 8001e0e:	2000      	movs	r0, #0
 8001e10:	f7ff fee8 	bl	8001be4 <ControlPulse>
}
 8001e14:	bf00      	nop
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <DCControl10>:

void DCControl10(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
	ControlPulse(DC, 10);
 8001e1c:	210a      	movs	r1, #10
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fee0 	bl	8001be4 <ControlPulse>
}
 8001e24:	bf00      	nop
 8001e26:	bd80      	pop	{r7, pc}

08001e28 <DCControl1>:

void DCControl1(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
	ControlPulse(DC, 1);
 8001e2c:	2101      	movs	r1, #1
 8001e2e:	2000      	movs	r0, #0
 8001e30:	f7ff fed8 	bl	8001be4 <ControlPulse>
}
 8001e34:	bf00      	nop
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <DCVEL10>:

void DCVEL10(void)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	move_to_target ( 1000, 0, 10, 0, ( int32_t ) 5);
 8001e3c:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8001e40:	eddf 1a08 	vldr	s3, [pc, #32]	; 8001e64 <DCVEL10+0x2c>
 8001e44:	eeb2 1a04 	vmov.f32	s2, #36	; 0x41200000  10.0
 8001e48:	eddf 0a06 	vldr	s1, [pc, #24]	; 8001e64 <DCVEL10+0x2c>
 8001e4c:	ed9f 0a06 	vldr	s0, [pc, #24]	; 8001e68 <DCVEL10+0x30>
 8001e50:	f000 fd6e 	bl	8002930 <move_to_target>


	g_flag.move_state = ON;
 8001e54:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <DCVEL10+0x34>)
 8001e56:	7813      	ldrb	r3, [r2, #0]
 8001e58:	f043 0310 	orr.w	r3, r3, #16
 8001e5c:	7013      	strb	r3, [r2, #0]
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	00000000 	.word	0x00000000
 8001e68:	447a0000 	.word	0x447a0000
 8001e6c:	20001140 	.word	0x20001140

08001e70 <ServoControl100>:

}


void ServoControl100(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
	ControlPulse(Servo, 100);
 8001e74:	2164      	movs	r1, #100	; 0x64
 8001e76:	2001      	movs	r0, #1
 8001e78:	f7ff feb4 	bl	8001be4 <ControlPulse>
}
 8001e7c:	bf00      	nop
 8001e7e:	bd80      	pop	{r7, pc}

08001e80 <ServoControl10>:

void ServoControl10(void)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
	ControlPulse(Servo, 10);
 8001e84:	210a      	movs	r1, #10
 8001e86:	2001      	movs	r0, #1
 8001e88:	f7ff feac 	bl	8001be4 <ControlPulse>
}
 8001e8c:	bf00      	nop
 8001e8e:	bd80      	pop	{r7, pc}

08001e90 <ServoControl1>:

void ServoControl1(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
	ControlPulse(Servo, 1);
 8001e94:	2101      	movs	r1, #1
 8001e96:	2001      	movs	r0, #1
 8001e98:	f7ff fea4 	bl	8001be4 <ControlPulse>
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <getSensorValue>:

//<IR>

void getSensorValue(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
	volatile uint32_t sensor_cnt = 0;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	603b      	str	r3, [r7, #0]

#ifdef HC-SR04_ENABLED
	VFDPrintf("%8ld", ultraSonic_CH1.distance_cnt);
#endif

		if(SwitchList < 3)
 8001eaa:	4b14      	ldr	r3, [pc, #80]	; (8001efc <getSensorValue+0x5c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d820      	bhi.n	8001ef4 <getSensorValue+0x54>
		{
			for(int i = 0; i < 3; i++)
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e00b      	b.n	8001ed0 <getSensorValue+0x30>
			{
				TxPrintf("%d: %d \t|", i, ir[i].u32result);
 8001eb8:	4a11      	ldr	r2, [pc, #68]	; (8001f00 <getSensorValue+0x60>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	6879      	ldr	r1, [r7, #4]
 8001ec4:	480f      	ldr	r0, [pc, #60]	; (8001f04 <getSensorValue+0x64>)
 8001ec6:	f7fe fedb 	bl	8000c80 <TxPrintf>
			for(int i = 0; i < 3; i++)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	607b      	str	r3, [r7, #4]
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	ddf0      	ble.n	8001eb8 <getSensorValue+0x18>
			}
			TxPrintf("\n");
 8001ed6:	480c      	ldr	r0, [pc, #48]	; (8001f08 <getSensorValue+0x68>)
 8001ed8:	f7fe fed2 	bl	8000c80 <TxPrintf>

			VFDPrintf("%d: %d", SwitchList, ir[SwitchList - 1].u32result);
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <getSensorValue+0x5c>)
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	4b06      	ldr	r3, [pc, #24]	; (8001efc <getSensorValue+0x5c>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	3b01      	subs	r3, #1
 8001ee6:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <getSensorValue+0x60>)
 8001ee8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eec:	461a      	mov	r2, r3
 8001eee:	4807      	ldr	r0, [pc, #28]	; (8001f0c <getSensorValue+0x6c>)
 8001ef0:	f7ff f80c 	bl	8000f0c <VFDPrintf>
		}
		else;

}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	20001148 	.word	0x20001148
 8001f00:	2000114c 	.word	0x2000114c
 8001f04:	08007110 	.word	0x08007110
 8001f08:	0800711c 	.word	0x0800711c
 8001f0c:	08007120 	.word	0x08007120

08001f10 <getEncoderValue>:

void getEncoderValue(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	af00      	add	r7, sp, #0
	VFDPrintf("%8ld", TIM2->CNT);
 8001f14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <getEncoderValue+0x18>)
 8001f1e:	f7fe fff5 	bl	8000f0c <VFDPrintf>
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	08007030 	.word	0x08007030

08001f2c <ZeroControl>:

void ZeroControl(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
	VFDPrintf("RUNNING_");
 8001f30:	4816      	ldr	r0, [pc, #88]	; (8001f8c <ZeroControl+0x60>)
 8001f32:	f7fe ffeb 	bl	8000f0c <VFDPrintf>



	  HAL_TIM_Base_Start_IT(&htim7);
 8001f36:	4816      	ldr	r0, [pc, #88]	; (8001f90 <ZeroControl+0x64>)
 8001f38:	f002 fe3e 	bl	8004bb8 <HAL_TIM_Base_Start_IT>


	  g_flag.move_state = ON;
 8001f3c:	4a15      	ldr	r2, [pc, #84]	; (8001f94 <ZeroControl+0x68>)
 8001f3e:	7813      	ldrb	r3, [r2, #0]
 8001f40:	f043 0310 	orr.w	r3, r3, #16
 8001f44:	7013      	strb	r3, [r2, #0]

	while(SW_U)
 8001f46:	e018      	b.n	8001f7a <ZeroControl+0x4e>
		{

		move_to_target ( 0, 0, 0, 0, 5);
 8001f48:	eeb1 2a04 	vmov.f32	s4, #20	; 0x40a00000  5.0
 8001f4c:	eddf 1a12 	vldr	s3, [pc, #72]	; 8001f98 <ZeroControl+0x6c>
 8001f50:	ed9f 1a11 	vldr	s2, [pc, #68]	; 8001f98 <ZeroControl+0x6c>
 8001f54:	eddf 0a10 	vldr	s1, [pc, #64]	; 8001f98 <ZeroControl+0x6c>
 8001f58:	ed9f 0a0f 	vldr	s0, [pc, #60]	; 8001f98 <ZeroControl+0x6c>
 8001f5c:	f000 fce8 	bl	8002930 <move_to_target>


#if 1
		TxPrintf("Motor: %d \t PWM: %d \n", (int32_t) motor.pid_output, TIM1->CCR1);
 8001f60:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <ZeroControl+0x70>)
 8001f62:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	4b0d      	ldr	r3, [pc, #52]	; (8001fa0 <ZeroControl+0x74>)
 8001f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f6e:	461a      	mov	r2, r3
 8001f70:	ee17 1a90 	vmov	r1, s15
 8001f74:	480b      	ldr	r0, [pc, #44]	; (8001fa4 <ZeroControl+0x78>)
 8001f76:	f7fe fe83 	bl	8000c80 <TxPrintf>
	while(SW_U)
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	; (8001fa8 <ZeroControl+0x7c>)
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1e0      	bne.n	8001f48 <ZeroControl+0x1c>
#endif
		}


}
 8001f86:	bf00      	nop
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	08007128 	.word	0x08007128
 8001f90:	2000147c 	.word	0x2000147c
 8001f94:	20001140 	.word	0x20001140
 8001f98:	00000000 	.word	0x00000000
 8001f9c:	2000116c 	.word	0x2000116c
 8001fa0:	40010000 	.word	0x40010000
 8001fa4:	08007134 	.word	0x08007134
 8001fa8:	40020c00 	.word	0x40020c00

08001fac <MenuSetting>:
#include "menu_setting.h"


void MenuSetting(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b083      	sub	sp, #12
 8001fb0:	af00      	add	r7, sp, #0
	//SwitchCategory = 6; SwitchFunction = 9; SwitchList = 16;

		int Menucounter = 0;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]

		SwitchCategoryMax = 6;
 8001fb6:	4b68      	ldr	r3, [pc, #416]	; (8002158 <MenuSetting+0x1ac>)
 8001fb8:	2206      	movs	r2, #6
 8001fba:	601a      	str	r2, [r3, #0]
		SwitchFunctionMax = 10;
 8001fbc:	4b67      	ldr	r3, [pc, #412]	; (800215c <MenuSetting+0x1b0>)
 8001fbe:	220a      	movs	r2, #10
 8001fc0:	601a      	str	r2, [r3, #0]
		SwitchListMax = 17;
 8001fc2:	4b67      	ldr	r3, [pc, #412]	; (8002160 <MenuSetting+0x1b4>)
 8001fc4:	2211      	movs	r2, #17
 8001fc6:	601a      	str	r2, [r3, #0]

		//<<Define VFD FirstPage>>
		arrSwitch[0][0][0] = DCControlPrint;
 8001fc8:	4b66      	ldr	r3, [pc, #408]	; (8002164 <MenuSetting+0x1b8>)
 8001fca:	4a67      	ldr	r2, [pc, #412]	; (8002168 <MenuSetting+0x1bc>)
 8001fcc:	601a      	str	r2, [r3, #0]
		arrSwitch[1][0][0] = IRSensorPrint;
 8001fce:	4b65      	ldr	r3, [pc, #404]	; (8002164 <MenuSetting+0x1b8>)
 8001fd0:	4a66      	ldr	r2, [pc, #408]	; (800216c <MenuSetting+0x1c0>)
 8001fd2:	f8c3 22a8 	str.w	r2, [r3, #680]	; 0x2a8
		arrSwitch[2][0][0] = ServoControlPrint;
 8001fd6:	4b63      	ldr	r3, [pc, #396]	; (8002164 <MenuSetting+0x1b8>)
 8001fd8:	4a65      	ldr	r2, [pc, #404]	; (8002170 <MenuSetting+0x1c4>)
 8001fda:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
		for(Menucounter = 3; Menucounter < SwitchCategoryMax; Menucounter++)
 8001fde:	2303      	movs	r3, #3
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	e00b      	b.n	8001ffc <MenuSetting+0x50>
			{
				arrSwitch[Menucounter][0][0] = FirstPageEndPrint;
 8001fe4:	4a5f      	ldr	r2, [pc, #380]	; (8002164 <MenuSetting+0x1b8>)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	f44f 712a 	mov.w	r1, #680	; 0x2a8
 8001fec:	fb01 f303 	mul.w	r3, r1, r3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	4a60      	ldr	r2, [pc, #384]	; (8002174 <MenuSetting+0x1c8>)
 8001ff4:	601a      	str	r2, [r3, #0]
		for(Menucounter = 3; Menucounter < SwitchCategoryMax; Menucounter++)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	607b      	str	r3, [r7, #4]
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4b56      	ldr	r3, [pc, #344]	; (8002158 <MenuSetting+0x1ac>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	d3ee      	bcc.n	8001fe4 <MenuSetting+0x38>


		//<<Define VFD SecondPage>>

		//------DCControl--------
		arrSwitch[0][1][0] = DCInitiatePrint;
 8002006:	4b57      	ldr	r3, [pc, #348]	; (8002164 <MenuSetting+0x1b8>)
 8002008:	4a5b      	ldr	r2, [pc, #364]	; (8002178 <MenuSetting+0x1cc>)
 800200a:	645a      	str	r2, [r3, #68]	; 0x44
		arrSwitch[0][2][0] = DCControl100Print;
 800200c:	4b55      	ldr	r3, [pc, #340]	; (8002164 <MenuSetting+0x1b8>)
 800200e:	4a5b      	ldr	r2, [pc, #364]	; (800217c <MenuSetting+0x1d0>)
 8002010:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
		arrSwitch[0][3][0] = DCControl10Print;
 8002014:	4b53      	ldr	r3, [pc, #332]	; (8002164 <MenuSetting+0x1b8>)
 8002016:	4a5a      	ldr	r2, [pc, #360]	; (8002180 <MenuSetting+0x1d4>)
 8002018:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
		arrSwitch[0][4][0] = DCControl1Print;
 800201c:	4b51      	ldr	r3, [pc, #324]	; (8002164 <MenuSetting+0x1b8>)
 800201e:	4a59      	ldr	r2, [pc, #356]	; (8002184 <MenuSetting+0x1d8>)
 8002020:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		arrSwitch[0][5][0] = DCVEL10Print;
 8002024:	4b4f      	ldr	r3, [pc, #316]	; (8002164 <MenuSetting+0x1b8>)
 8002026:	4a58      	ldr	r2, [pc, #352]	; (8002188 <MenuSetting+0x1dc>)
 8002028:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
		for(Menucounter = 6; Menucounter < SwitchFunctionMax; Menucounter++)
 800202c:	2306      	movs	r3, #6
 800202e:	607b      	str	r3, [r7, #4]
 8002030:	e00b      	b.n	800204a <MenuSetting+0x9e>
			{
				arrSwitch[0][Menucounter][0] = SecondPageEndPrint;
 8002032:	494c      	ldr	r1, [pc, #304]	; (8002164 <MenuSetting+0x1b8>)
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	4613      	mov	r3, r2
 8002038:	011b      	lsls	r3, r3, #4
 800203a:	4413      	add	r3, r2
 800203c:	009b      	lsls	r3, r3, #2
 800203e:	440b      	add	r3, r1
 8002040:	4a52      	ldr	r2, [pc, #328]	; (800218c <MenuSetting+0x1e0>)
 8002042:	601a      	str	r2, [r3, #0]
		for(Menucounter = 6; Menucounter < SwitchFunctionMax; Menucounter++)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	3301      	adds	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
 800204a:	687a      	ldr	r2, [r7, #4]
 800204c:	4b43      	ldr	r3, [pc, #268]	; (800215c <MenuSetting+0x1b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	429a      	cmp	r2, r3
 8002052:	d3ee      	bcc.n	8002032 <MenuSetting+0x86>
			}

		arrSwitch[1][1][0] = getSensorValPrint;
 8002054:	4b43      	ldr	r3, [pc, #268]	; (8002164 <MenuSetting+0x1b8>)
 8002056:	4a4e      	ldr	r2, [pc, #312]	; (8002190 <MenuSetting+0x1e4>)
 8002058:	f8c3 22ec 	str.w	r2, [r3, #748]	; 0x2ec
		arrSwitch[1][2][0] = getEncoderValPrint;
 800205c:	4b41      	ldr	r3, [pc, #260]	; (8002164 <MenuSetting+0x1b8>)
 800205e:	4a4d      	ldr	r2, [pc, #308]	; (8002194 <MenuSetting+0x1e8>)
 8002060:	f8c3 2330 	str.w	r2, [r3, #816]	; 0x330
		arrSwitch[1][3][0] = doZeroControlPrint;
 8002064:	4b3f      	ldr	r3, [pc, #252]	; (8002164 <MenuSetting+0x1b8>)
 8002066:	4a4c      	ldr	r2, [pc, #304]	; (8002198 <MenuSetting+0x1ec>)
 8002068:	f8c3 2374 	str.w	r2, [r3, #884]	; 0x374

		for(Menucounter = 4; Menucounter < SwitchFunctionMax ; Menucounter++)
 800206c:	2304      	movs	r3, #4
 800206e:	607b      	str	r3, [r7, #4]
 8002070:	e00d      	b.n	800208e <MenuSetting+0xe2>
		{
			arrSwitch[1][Menucounter][0] = SecondPageEndPrint;
 8002072:	493c      	ldr	r1, [pc, #240]	; (8002164 <MenuSetting+0x1b8>)
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	4613      	mov	r3, r2
 8002078:	011b      	lsls	r3, r3, #4
 800207a:	4413      	add	r3, r2
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	440b      	add	r3, r1
 8002080:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8002084:	4a41      	ldr	r2, [pc, #260]	; (800218c <MenuSetting+0x1e0>)
 8002086:	601a      	str	r2, [r3, #0]
		for(Menucounter = 4; Menucounter < SwitchFunctionMax ; Menucounter++)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	3301      	adds	r3, #1
 800208c:	607b      	str	r3, [r7, #4]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4b32      	ldr	r3, [pc, #200]	; (800215c <MenuSetting+0x1b0>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	429a      	cmp	r2, r3
 8002096:	d3ec      	bcc.n	8002072 <MenuSetting+0xc6>
		}

		//------ServoControl--------
		arrSwitch[2][1][0] = ServoControl100Print;
 8002098:	4b32      	ldr	r3, [pc, #200]	; (8002164 <MenuSetting+0x1b8>)
 800209a:	4a40      	ldr	r2, [pc, #256]	; (800219c <MenuSetting+0x1f0>)
 800209c:	f8c3 2594 	str.w	r2, [r3, #1428]	; 0x594
		arrSwitch[2][2][0] = ServoControl10Print;
 80020a0:	4b30      	ldr	r3, [pc, #192]	; (8002164 <MenuSetting+0x1b8>)
 80020a2:	4a3f      	ldr	r2, [pc, #252]	; (80021a0 <MenuSetting+0x1f4>)
 80020a4:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
		arrSwitch[2][3][0] = ServoControl1Print;
 80020a8:	4b2e      	ldr	r3, [pc, #184]	; (8002164 <MenuSetting+0x1b8>)
 80020aa:	4a3e      	ldr	r2, [pc, #248]	; (80021a4 <MenuSetting+0x1f8>)
 80020ac:	f8c3 261c 	str.w	r2, [r3, #1564]	; 0x61c
		for(Menucounter = 4; Menucounter < SwitchFunctionMax; Menucounter++)
 80020b0:	2304      	movs	r3, #4
 80020b2:	607b      	str	r3, [r7, #4]
 80020b4:	e00d      	b.n	80020d2 <MenuSetting+0x126>
			{
				arrSwitch[2][Menucounter][0] = SecondPageEndPrint;
 80020b6:	492b      	ldr	r1, [pc, #172]	; (8002164 <MenuSetting+0x1b8>)
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	011b      	lsls	r3, r3, #4
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	f503 63aa 	add.w	r3, r3, #1360	; 0x550
 80020c8:	4a30      	ldr	r2, [pc, #192]	; (800218c <MenuSetting+0x1e0>)
 80020ca:	601a      	str	r2, [r3, #0]
		for(Menucounter = 4; Menucounter < SwitchFunctionMax; Menucounter++)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3301      	adds	r3, #1
 80020d0:	607b      	str	r3, [r7, #4]
 80020d2:	687a      	ldr	r2, [r7, #4]
 80020d4:	4b21      	ldr	r3, [pc, #132]	; (800215c <MenuSetting+0x1b0>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3ec      	bcc.n	80020b6 <MenuSetting+0x10a>
			}

		//<<Define VFD ThirdPage>>

		//------DCControl--------
		arrSwitch[0][1][1] = DCInitiate;
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <MenuSetting+0x1b8>)
 80020de:	4a32      	ldr	r2, [pc, #200]	; (80021a8 <MenuSetting+0x1fc>)
 80020e0:	649a      	str	r2, [r3, #72]	; 0x48
		arrSwitch[0][2][1] = DCControl100;
 80020e2:	4b20      	ldr	r3, [pc, #128]	; (8002164 <MenuSetting+0x1b8>)
 80020e4:	4a31      	ldr	r2, [pc, #196]	; (80021ac <MenuSetting+0x200>)
 80020e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
		arrSwitch[0][3][1] = DCControl10;
 80020ea:	4b1e      	ldr	r3, [pc, #120]	; (8002164 <MenuSetting+0x1b8>)
 80020ec:	4a30      	ldr	r2, [pc, #192]	; (80021b0 <MenuSetting+0x204>)
 80020ee:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
		arrSwitch[0][4][1] = DCControl1;
 80020f2:	4b1c      	ldr	r3, [pc, #112]	; (8002164 <MenuSetting+0x1b8>)
 80020f4:	4a2f      	ldr	r2, [pc, #188]	; (80021b4 <MenuSetting+0x208>)
 80020f6:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
		arrSwitch[0][5][1] = DCVEL10;
 80020fa:	4b1a      	ldr	r3, [pc, #104]	; (8002164 <MenuSetting+0x1b8>)
 80020fc:	4a2e      	ldr	r2, [pc, #184]	; (80021b8 <MenuSetting+0x20c>)
 80020fe:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158


		for(Menucounter = 1; Menucounter < SwitchListMax; Menucounter++)
 8002102:	2301      	movs	r3, #1
 8002104:	607b      	str	r3, [r7, #4]
 8002106:	e008      	b.n	800211a <MenuSetting+0x16e>
		{
			arrSwitch[1][1][Menucounter] = getSensorValue;
 8002108:	4a16      	ldr	r2, [pc, #88]	; (8002164 <MenuSetting+0x1b8>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	33bb      	adds	r3, #187	; 0xbb
 800210e:	492b      	ldr	r1, [pc, #172]	; (80021bc <MenuSetting+0x210>)
 8002110:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(Menucounter = 1; Menucounter < SwitchListMax; Menucounter++)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	3301      	adds	r3, #1
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	4b10      	ldr	r3, [pc, #64]	; (8002160 <MenuSetting+0x1b4>)
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d3f1      	bcc.n	8002108 <MenuSetting+0x15c>

		}

		arrSwitch[1][2][1] = getEncoderValue;
 8002124:	4b0f      	ldr	r3, [pc, #60]	; (8002164 <MenuSetting+0x1b8>)
 8002126:	4a26      	ldr	r2, [pc, #152]	; (80021c0 <MenuSetting+0x214>)
 8002128:	f8c3 2334 	str.w	r2, [r3, #820]	; 0x334
		arrSwitch[1][3][1] = ZeroControl;
 800212c:	4b0d      	ldr	r3, [pc, #52]	; (8002164 <MenuSetting+0x1b8>)
 800212e:	4a25      	ldr	r2, [pc, #148]	; (80021c4 <MenuSetting+0x218>)
 8002130:	f8c3 2378 	str.w	r2, [r3, #888]	; 0x378


		//------ServoControl-----------
		arrSwitch[2][1][1] = ServoControl100;
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <MenuSetting+0x1b8>)
 8002136:	4a24      	ldr	r2, [pc, #144]	; (80021c8 <MenuSetting+0x21c>)
 8002138:	f8c3 2598 	str.w	r2, [r3, #1432]	; 0x598
		arrSwitch[2][2][1] = ServoControl10;
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <MenuSetting+0x1b8>)
 800213e:	4a23      	ldr	r2, [pc, #140]	; (80021cc <MenuSetting+0x220>)
 8002140:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
		arrSwitch[2][3][1] = ServoControl1;
 8002144:	4b07      	ldr	r3, [pc, #28]	; (8002164 <MenuSetting+0x1b8>)
 8002146:	4a22      	ldr	r2, [pc, #136]	; (80021d0 <MenuSetting+0x224>)
 8002148:	f8c3 2620 	str.w	r2, [r3, #1568]	; 0x620
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	20001168 	.word	0x20001168
 800215c:	200011f8 	.word	0x200011f8
 8002160:	20001134 	.word	0x20001134
 8002164:	20000140 	.word	0x20000140
 8002168:	08001c35 	.word	0x08001c35
 800216c:	08001c5d 	.word	0x08001c5d
 8002170:	08001c49 	.word	0x08001c49
 8002174:	08001c71 	.word	0x08001c71
 8002178:	08001c8d 	.word	0x08001c8d
 800217c:	08001ca9 	.word	0x08001ca9
 8002180:	08001cbd 	.word	0x08001cbd
 8002184:	08001cd1 	.word	0x08001cd1
 8002188:	08001ce5 	.word	0x08001ce5
 800218c:	08001d71 	.word	0x08001d71
 8002190:	08001cf9 	.word	0x08001cf9
 8002194:	08001d0d 	.word	0x08001d0d
 8002198:	08001d21 	.word	0x08001d21
 800219c:	08001d35 	.word	0x08001d35
 80021a0:	08001d49 	.word	0x08001d49
 80021a4:	08001d5d 	.word	0x08001d5d
 80021a8:	08001d8d 	.word	0x08001d8d
 80021ac:	08001e09 	.word	0x08001e09
 80021b0:	08001e19 	.word	0x08001e19
 80021b4:	08001e29 	.word	0x08001e29
 80021b8:	08001e39 	.word	0x08001e39
 80021bc:	08001ea1 	.word	0x08001ea1
 80021c0:	08001f11 	.word	0x08001f11
 80021c4:	08001f2d 	.word	0x08001f2d
 80021c8:	08001e71 	.word	0x08001e71
 80021cc:	08001e81 	.word	0x08001e81
 80021d0:	08001e91 	.word	0x08001e91

080021d4 <menu>:

void menu(void)
{
 80021d4:	b590      	push	{r4, r7, lr}
 80021d6:	b083      	sub	sp, #12
 80021d8:	af00      	add	r7, sp, #0
	int32_t delay = 50;
 80021da:	2332      	movs	r3, #50	; 0x32
 80021dc:	607b      	str	r3, [r7, #4]
	int logic = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	603b      	str	r3, [r7, #0]

	//Category
	if(SwitchCounter == 0)
 80021e2:	4b92      	ldr	r3, [pc, #584]	; (800242c <menu+0x258>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d15a      	bne.n	80022a0 <menu+0xcc>
		{
			if (SW_D == logic)
 80021ea:	4b91      	ldr	r3, [pc, #580]	; (8002430 <menu+0x25c>)
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d10e      	bne.n	8002216 <menu+0x42>
			{
				SwitchFunction++;
 80021f8:	4b8e      	ldr	r3, [pc, #568]	; (8002434 <menu+0x260>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	3301      	adds	r3, #1
 80021fe:	4a8d      	ldr	r2, [pc, #564]	; (8002434 <menu+0x260>)
 8002200:	6013      	str	r3, [r2, #0]
				SwitchCounter++;
 8002202:	4b8a      	ldr	r3, [pc, #552]	; (800242c <menu+0x258>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	3301      	adds	r3, #1
 8002208:	4a88      	ldr	r2, [pc, #544]	; (800242c <menu+0x258>)
 800220a:	6013      	str	r3, [r2, #0]
				HAL_Delay(delay);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	4618      	mov	r0, r3
 8002210:	f000 ffec 	bl	80031ec <HAL_Delay>
 8002214:	e129      	b.n	800246a <menu+0x296>
			}
			else if (SW_U == logic)
 8002216:	4b86      	ldr	r3, [pc, #536]	; (8002430 <menu+0x25c>)
 8002218:	691b      	ldr	r3, [r3, #16]
 800221a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	429a      	cmp	r2, r3
 8002222:	d107      	bne.n	8002234 <menu+0x60>
			{
				VFDPrintf("WRONG");
 8002224:	4884      	ldr	r0, [pc, #528]	; (8002438 <menu+0x264>)
 8002226:	f7fe fe71 	bl	8000f0c <VFDPrintf>
				HAL_Delay(delay);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4618      	mov	r0, r3
 800222e:	f000 ffdd 	bl	80031ec <HAL_Delay>
 8002232:	e11a      	b.n	800246a <menu+0x296>
			}
			else if (SW_R == logic)
 8002234:	4b7e      	ldr	r3, [pc, #504]	; (8002430 <menu+0x25c>)
 8002236:	691b      	ldr	r3, [r3, #16]
 8002238:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	429a      	cmp	r2, r3
 8002240:	d112      	bne.n	8002268 <menu+0x94>
			{
				SwitchCategory++;
 8002242:	4b7e      	ldr	r3, [pc, #504]	; (800243c <menu+0x268>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	3301      	adds	r3, #1
 8002248:	4a7c      	ldr	r2, [pc, #496]	; (800243c <menu+0x268>)
 800224a:	6013      	str	r3, [r2, #0]

				if (SwitchCategory == SwitchCategoryMax)
 800224c:	4b7b      	ldr	r3, [pc, #492]	; (800243c <menu+0x268>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b7b      	ldr	r3, [pc, #492]	; (8002440 <menu+0x26c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d102      	bne.n	800225e <menu+0x8a>
				{
					SwitchCategory = 0;
 8002258:	4b78      	ldr	r3, [pc, #480]	; (800243c <menu+0x268>)
 800225a:	2200      	movs	r2, #0
 800225c:	601a      	str	r2, [r3, #0]
				}
				HAL_Delay(delay);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4618      	mov	r0, r3
 8002262:	f000 ffc3 	bl	80031ec <HAL_Delay>
 8002266:	e100      	b.n	800246a <menu+0x296>
			}

			else if (SW_L == logic)
 8002268:	4b71      	ldr	r3, [pc, #452]	; (8002430 <menu+0x25c>)
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	429a      	cmp	r2, r3
 8002274:	f040 80f9 	bne.w	800246a <menu+0x296>
			{
			if (SwitchCategory == 0)
 8002278:	4b70      	ldr	r3, [pc, #448]	; (800243c <menu+0x268>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d105      	bne.n	800228c <menu+0xb8>
				{
					SwitchCategory = SwitchCategoryMax - 1;
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <menu+0x26c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	3b01      	subs	r3, #1
 8002286:	4a6d      	ldr	r2, [pc, #436]	; (800243c <menu+0x268>)
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e004      	b.n	8002296 <menu+0xc2>
				}
			else
				{
					SwitchCategory--;
 800228c:	4b6b      	ldr	r3, [pc, #428]	; (800243c <menu+0x268>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	3b01      	subs	r3, #1
 8002292:	4a6a      	ldr	r2, [pc, #424]	; (800243c <menu+0x268>)
 8002294:	6013      	str	r3, [r2, #0]
				}
				HAL_Delay(delay);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4618      	mov	r0, r3
 800229a:	f000 ffa7 	bl	80031ec <HAL_Delay>
 800229e:	e0e4      	b.n	800246a <menu+0x296>
			}

		}

	//Function
	else if (SwitchCounter == 1)
 80022a0:	4b62      	ldr	r3, [pc, #392]	; (800242c <menu+0x258>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d16e      	bne.n	8002386 <menu+0x1b2>
		{
				if (SW_D == logic)
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <menu+0x25c>)
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d11a      	bne.n	80022ec <menu+0x118>
				{
					if(SwitchDownError == 2)
 80022b6:	4b63      	ldr	r3, [pc, #396]	; (8002444 <menu+0x270>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d10c      	bne.n	80022d8 <menu+0x104>
						{
							SwitchList++;
 80022be:	4b62      	ldr	r3, [pc, #392]	; (8002448 <menu+0x274>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	3301      	adds	r3, #1
 80022c4:	4a60      	ldr	r2, [pc, #384]	; (8002448 <menu+0x274>)
 80022c6:	6013      	str	r3, [r2, #0]
							SwitchCounter++;
 80022c8:	4b58      	ldr	r3, [pc, #352]	; (800242c <menu+0x258>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3301      	adds	r3, #1
 80022ce:	4a57      	ldr	r2, [pc, #348]	; (800242c <menu+0x258>)
 80022d0:	6013      	str	r3, [r2, #0]
							SwitchDownError = 0;
 80022d2:	4b5c      	ldr	r3, [pc, #368]	; (8002444 <menu+0x270>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]
						}
					SwitchDownError++;
 80022d8:	4b5a      	ldr	r3, [pc, #360]	; (8002444 <menu+0x270>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	3301      	adds	r3, #1
 80022de:	4a59      	ldr	r2, [pc, #356]	; (8002444 <menu+0x270>)
 80022e0:	6013      	str	r3, [r2, #0]
					HAL_Delay(delay);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f000 ff81 	bl	80031ec <HAL_Delay>
 80022ea:	e0be      	b.n	800246a <menu+0x296>
				}

				else if (SW_U == logic)
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <menu+0x25c>)
 80022ee:	691b      	ldr	r3, [r3, #16]
 80022f0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d10f      	bne.n	800231a <menu+0x146>
				{
					SwitchFunction = 0;
 80022fa:	4b4e      	ldr	r3, [pc, #312]	; (8002434 <menu+0x260>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	601a      	str	r2, [r3, #0]
					SwitchDownError = 0;
 8002300:	4b50      	ldr	r3, [pc, #320]	; (8002444 <menu+0x270>)
 8002302:	2200      	movs	r2, #0
 8002304:	601a      	str	r2, [r3, #0]
					SwitchCounter--;
 8002306:	4b49      	ldr	r3, [pc, #292]	; (800242c <menu+0x258>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	3b01      	subs	r3, #1
 800230c:	4a47      	ldr	r2, [pc, #284]	; (800242c <menu+0x258>)
 800230e:	6013      	str	r3, [r2, #0]
					HAL_Delay(delay);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4618      	mov	r0, r3
 8002314:	f000 ff6a 	bl	80031ec <HAL_Delay>
 8002318:	e0a7      	b.n	800246a <menu+0x296>
				}

				else if (SW_R == logic)
 800231a:	4b45      	ldr	r3, [pc, #276]	; (8002430 <menu+0x25c>)
 800231c:	691b      	ldr	r3, [r3, #16]
 800231e:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	429a      	cmp	r2, r3
 8002326:	d112      	bne.n	800234e <menu+0x17a>
				{

					SwitchFunction++;
 8002328:	4b42      	ldr	r3, [pc, #264]	; (8002434 <menu+0x260>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	3301      	adds	r3, #1
 800232e:	4a41      	ldr	r2, [pc, #260]	; (8002434 <menu+0x260>)
 8002330:	6013      	str	r3, [r2, #0]
					if( SwitchFunction == SwitchFunctionMax)
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <menu+0x260>)
 8002334:	681a      	ldr	r2, [r3, #0]
 8002336:	4b45      	ldr	r3, [pc, #276]	; (800244c <menu+0x278>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	429a      	cmp	r2, r3
 800233c:	d102      	bne.n	8002344 <menu+0x170>
						{
							SwitchFunction = 1;
 800233e:	4b3d      	ldr	r3, [pc, #244]	; (8002434 <menu+0x260>)
 8002340:	2201      	movs	r2, #1
 8002342:	601a      	str	r2, [r3, #0]
						}
					else
						{

						}
					HAL_Delay(delay);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 ff50 	bl	80031ec <HAL_Delay>
 800234c:	e08d      	b.n	800246a <menu+0x296>
				}

				else if (SW_L == logic)
 800234e:	4b38      	ldr	r3, [pc, #224]	; (8002430 <menu+0x25c>)
 8002350:	691b      	ldr	r3, [r3, #16]
 8002352:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	429a      	cmp	r2, r3
 800235a:	f040 8086 	bne.w	800246a <menu+0x296>
				{
					if (SwitchFunction == 0)
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <menu+0x260>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d105      	bne.n	8002372 <menu+0x19e>
						{
							SwitchFunction = SwitchFunctionMax - 1;
 8002366:	4b39      	ldr	r3, [pc, #228]	; (800244c <menu+0x278>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	3b01      	subs	r3, #1
 800236c:	4a31      	ldr	r2, [pc, #196]	; (8002434 <menu+0x260>)
 800236e:	6013      	str	r3, [r2, #0]
 8002370:	e004      	b.n	800237c <menu+0x1a8>
						}
					else
						{
							SwitchFunction--;
 8002372:	4b30      	ldr	r3, [pc, #192]	; (8002434 <menu+0x260>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	3b01      	subs	r3, #1
 8002378:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <menu+0x260>)
 800237a:	6013      	str	r3, [r2, #0]
						}

					HAL_Delay(delay);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	4618      	mov	r0, r3
 8002380:	f000 ff34 	bl	80031ec <HAL_Delay>
 8002384:	e071      	b.n	800246a <menu+0x296>
				}

		}

		//List
		else if(SwitchCounter == 2)
 8002386:	4b29      	ldr	r3, [pc, #164]	; (800242c <menu+0x258>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2b02      	cmp	r3, #2
 800238c:	d16d      	bne.n	800246a <menu+0x296>
			{
				if (SW_D == logic)
 800238e:	4b28      	ldr	r3, [pc, #160]	; (8002430 <menu+0x25c>)
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	429a      	cmp	r2, r3
 800239a:	d107      	bne.n	80023ac <menu+0x1d8>
				{
					VFDPrintf("END");
 800239c:	482c      	ldr	r0, [pc, #176]	; (8002450 <menu+0x27c>)
 800239e:	f7fe fdb5 	bl	8000f0c <VFDPrintf>
					HAL_Delay(delay);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 ff21 	bl	80031ec <HAL_Delay>
 80023aa:	e05e      	b.n	800246a <menu+0x296>
				}

				else if (SW_U == logic)
 80023ac:	4b20      	ldr	r3, [pc, #128]	; (8002430 <menu+0x25c>)
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d10c      	bne.n	80023d4 <menu+0x200>
				{
					SwitchList = 0;
 80023ba:	4b23      	ldr	r3, [pc, #140]	; (8002448 <menu+0x274>)
 80023bc:	2200      	movs	r2, #0
 80023be:	601a      	str	r2, [r3, #0]
					SwitchCounter--;
 80023c0:	4b1a      	ldr	r3, [pc, #104]	; (800242c <menu+0x258>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	3b01      	subs	r3, #1
 80023c6:	4a19      	ldr	r2, [pc, #100]	; (800242c <menu+0x258>)
 80023c8:	6013      	str	r3, [r2, #0]
					HAL_Delay(delay);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f000 ff0d 	bl	80031ec <HAL_Delay>
 80023d2:	e04a      	b.n	800246a <menu+0x296>
				}


				else if (SW_R == logic)
 80023d4:	4b16      	ldr	r3, [pc, #88]	; (8002430 <menu+0x25c>)
 80023d6:	691b      	ldr	r3, [r3, #16]
 80023d8:	f403 4200 	and.w	r2, r3, #32768	; 0x8000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d112      	bne.n	8002408 <menu+0x234>
				{
					SwitchList++;
 80023e2:	4b19      	ldr	r3, [pc, #100]	; (8002448 <menu+0x274>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	3301      	adds	r3, #1
 80023e8:	4a17      	ldr	r2, [pc, #92]	; (8002448 <menu+0x274>)
 80023ea:	6013      	str	r3, [r2, #0]
					if( SwitchList == SwitchListMax)
 80023ec:	4b16      	ldr	r3, [pc, #88]	; (8002448 <menu+0x274>)
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	4b18      	ldr	r3, [pc, #96]	; (8002454 <menu+0x280>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d102      	bne.n	80023fe <menu+0x22a>
						{
							SwitchList = 1;
 80023f8:	4b13      	ldr	r3, [pc, #76]	; (8002448 <menu+0x274>)
 80023fa:	2201      	movs	r2, #1
 80023fc:	601a      	str	r2, [r3, #0]
						}
					HAL_Delay(delay);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4618      	mov	r0, r3
 8002402:	f000 fef3 	bl	80031ec <HAL_Delay>
 8002406:	e030      	b.n	800246a <menu+0x296>
				}

				else if (SW_L == logic)
 8002408:	4b09      	ldr	r3, [pc, #36]	; (8002430 <menu+0x25c>)
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	429a      	cmp	r2, r3
 8002414:	d129      	bne.n	800246a <menu+0x296>
				{
					if(SwitchList == 0)
 8002416:	4b0c      	ldr	r3, [pc, #48]	; (8002448 <menu+0x274>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d11c      	bne.n	8002458 <menu+0x284>
						{
							SwitchList = SwitchListMax -1;
 800241e:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <menu+0x280>)
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	3b01      	subs	r3, #1
 8002424:	4a08      	ldr	r2, [pc, #32]	; (8002448 <menu+0x274>)
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e01b      	b.n	8002462 <menu+0x28e>
 800242a:	bf00      	nop
 800242c:	20001130 	.word	0x20001130
 8002430:	40020c00 	.word	0x40020c00
 8002434:	20001164 	.word	0x20001164
 8002438:	08007158 	.word	0x08007158
 800243c:	20001158 	.word	0x20001158
 8002440:	20001168 	.word	0x20001168
 8002444:	2000113c 	.word	0x2000113c
 8002448:	20001148 	.word	0x20001148
 800244c:	200011f8 	.word	0x200011f8
 8002450:	08007160 	.word	0x08007160
 8002454:	20001134 	.word	0x20001134
						}
					else
						{
							SwitchList--;
 8002458:	4b0f      	ldr	r3, [pc, #60]	; (8002498 <menu+0x2c4>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	3b01      	subs	r3, #1
 800245e:	4a0e      	ldr	r2, [pc, #56]	; (8002498 <menu+0x2c4>)
 8002460:	6013      	str	r3, [r2, #0]
						}
					HAL_Delay(delay);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4618      	mov	r0, r3
 8002466:	f000 fec1 	bl	80031ec <HAL_Delay>
			{

			}

	//RUN!!!!
	arrSwitch[SwitchCategory][SwitchFunction][SwitchList]();
 800246a:	4b0c      	ldr	r3, [pc, #48]	; (800249c <menu+0x2c8>)
 800246c:	6818      	ldr	r0, [r3, #0]
 800246e:	4b0c      	ldr	r3, [pc, #48]	; (80024a0 <menu+0x2cc>)
 8002470:	681a      	ldr	r2, [r3, #0]
 8002472:	4b09      	ldr	r3, [pc, #36]	; (8002498 <menu+0x2c4>)
 8002474:	6819      	ldr	r1, [r3, #0]
 8002476:	4c0b      	ldr	r4, [pc, #44]	; (80024a4 <menu+0x2d0>)
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	4413      	add	r3, r2
 800247e:	22aa      	movs	r2, #170	; 0xaa
 8002480:	fb02 f200 	mul.w	r2, r2, r0
 8002484:	4413      	add	r3, r2
 8002486:	440b      	add	r3, r1
 8002488:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800248c:	4798      	blx	r3

}
 800248e:	bf00      	nop
 8002490:	370c      	adds	r7, #12
 8002492:	46bd      	mov	sp, r7
 8002494:	bd90      	pop	{r4, r7, pc}
 8002496:	bf00      	nop
 8002498:	20001148 	.word	0x20001148
 800249c:	20001158 	.word	0x20001158
 80024a0:	20001164 	.word	0x20001164
 80024a4:	20000140 	.word	0x20000140

080024a8 <motor_ISR>:
	pm->ki = 0.000002;
	pm->kd = 0.65;
}

void motor_ISR(void)
{
 80024a8:	b598      	push	{r3, r4, r7, lr}
 80024aa:	af00      	add	r7, sp, #0

	if(ISRCounter == 0)
 80024ac:	4b86      	ldr	r3, [pc, #536]	; (80026c8 <motor_ISR+0x220>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d10b      	bne.n	80024cc <motor_ISR+0x24>
	{
		GPIOE->ODR |= GPIO_PIN_9;
 80024b4:	4b85      	ldr	r3, [pc, #532]	; (80026cc <motor_ISR+0x224>)
 80024b6:	695b      	ldr	r3, [r3, #20]
 80024b8:	4a84      	ldr	r2, [pc, #528]	; (80026cc <motor_ISR+0x224>)
 80024ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024be:	6153      	str	r3, [r2, #20]
		ISRCounter++;
 80024c0:	4b81      	ldr	r3, [pc, #516]	; (80026c8 <motor_ISR+0x220>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	3301      	adds	r3, #1
 80024c6:	4a80      	ldr	r2, [pc, #512]	; (80026c8 <motor_ISR+0x220>)
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	e00c      	b.n	80024e6 <motor_ISR+0x3e>
	}
	else if (ISRCounter == 1)
 80024cc:	4b7e      	ldr	r3, [pc, #504]	; (80026c8 <motor_ISR+0x220>)
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <motor_ISR+0x3e>
	{
		GPIOE->ODR &= ~GPIO_PIN_9;
 80024d4:	4b7d      	ldr	r3, [pc, #500]	; (80026cc <motor_ISR+0x224>)
 80024d6:	695b      	ldr	r3, [r3, #20]
 80024d8:	4a7c      	ldr	r2, [pc, #496]	; (80026cc <motor_ISR+0x224>)
 80024da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80024de:	6153      	str	r3, [r2, #20]
		ISRCounter = 0;
 80024e0:	4b79      	ldr	r3, [pc, #484]	; (80026c8 <motor_ISR+0x220>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	601a      	str	r2, [r3, #0]

	}
	//Encoder 값 받기
	motor.encoder_value = TIM2->CNT;
 80024e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	ee07 3a90 	vmov	s15, r3
 80024f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024f4:	4b76      	ldr	r3, [pc, #472]	; (80026d0 <motor_ISR+0x228>)
 80024f6:	edc3 7a02 	vstr	s15, [r3, #8]

	//Encoder 값 초기화
	TIM2->CNT = 0;
 80024fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80024fe:	2200      	movs	r2, #0
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

	//encoder 부호 compute
	motor.encoder_value = - (( motor.encoder_value > 2048 )? ( motor.encoder_value ) - 4097  : motor.encoder_value);
 8002502:	4b73      	ldr	r3, [pc, #460]	; (80026d0 <motor_ISR+0x228>)
 8002504:	edd3 7a02 	vldr	s15, [r3, #8]
 8002508:	ed9f 7a72 	vldr	s14, [pc, #456]	; 80026d4 <motor_ISR+0x22c>
 800250c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002514:	dd09      	ble.n	800252a <motor_ISR+0x82>
 8002516:	4b6e      	ldr	r3, [pc, #440]	; (80026d0 <motor_ISR+0x228>)
 8002518:	edd3 7a02 	vldr	s15, [r3, #8]
 800251c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 80026d8 <motor_ISR+0x230>
 8002520:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002524:	eef1 7a67 	vneg.f32	s15, s15
 8002528:	e004      	b.n	8002534 <motor_ISR+0x8c>
 800252a:	4b69      	ldr	r3, [pc, #420]	; (80026d0 <motor_ISR+0x228>)
 800252c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002530:	eef1 7a67 	vneg.f32	s15, s15
 8002534:	4b66      	ldr	r3, [pc, #408]	; (80026d0 <motor_ISR+0x228>)
 8002536:	edc3 7a02 	vstr	s15, [r3, #8]

	//기어비 틱당 거리
	motor.hw_distance = motor.encoder_value * PULSE_TO_V;
 800253a:	4b65      	ldr	r3, [pc, #404]	; (80026d0 <motor_ISR+0x228>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4618      	mov	r0, r3
 8002540:	f7fe f924 	bl	800078c <__aeabi_f2d>
 8002544:	a35e      	add	r3, pc, #376	; (adr r3, 80026c0 <motor_ISR+0x218>)
 8002546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254a:	f7fd fe91 	bl	8000270 <__aeabi_dmul>
 800254e:	4602      	mov	r2, r0
 8002550:	460b      	mov	r3, r1
 8002552:	4610      	mov	r0, r2
 8002554:	4619      	mov	r1, r3
 8002556:	f7fe f991 	bl	800087c <__aeabi_d2f>
 800255a:	4603      	mov	r3, r0
 800255c:	4a5c      	ldr	r2, [pc, #368]	; (80026d0 <motor_ISR+0x228>)
 800255e:	6153      	str	r3, [r2, #20]

	//this part is for PID control
	motor.hw_distance_sum += motor.hw_distance;
 8002560:	4b5b      	ldr	r3, [pc, #364]	; (80026d0 <motor_ISR+0x228>)
 8002562:	ed93 7a05 	vldr	s14, [r3, #20]
 8002566:	4b5a      	ldr	r3, [pc, #360]	; (80026d0 <motor_ISR+0x228>)
 8002568:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800256c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002570:	4b57      	ldr	r3, [pc, #348]	; (80026d0 <motor_ISR+0x228>)
 8002572:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	motor.error_distance = motor.target_distance - motor.hw_distance_sum;
 8002576:	4b56      	ldr	r3, [pc, #344]	; (80026d0 <motor_ISR+0x228>)
 8002578:	ed93 7a04 	vldr	s14, [r3, #16]
 800257c:	4b54      	ldr	r3, [pc, #336]	; (80026d0 <motor_ISR+0x228>)
 800257e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002586:	4b52      	ldr	r3, [pc, #328]	; (80026d0 <motor_ISR+0x228>)
 8002588:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	//check the distance that the car is driven
	motor.hw_check_dist += motor.hw_distance;
 800258c:	4b50      	ldr	r3, [pc, #320]	; (80026d0 <motor_ISR+0x228>)
 800258e:	ed93 7a05 	vldr	s14, [r3, #20]
 8002592:	4b4f      	ldr	r3, [pc, #316]	; (80026d0 <motor_ISR+0x228>)
 8002594:	edd3 7a08 	vldr	s15, [r3, #32]
 8002598:	ee77 7a27 	vadd.f32	s15, s14, s15
 800259c:	4b4c      	ldr	r3, [pc, #304]	; (80026d0 <motor_ISR+0x228>)
 800259e:	edc3 7a08 	vstr	s15, [r3, #32]

	motor.hw_gone_dist += motor.hw_distance;
 80025a2:	4b4b      	ldr	r3, [pc, #300]	; (80026d0 <motor_ISR+0x228>)
 80025a4:	ed93 7a05 	vldr	s14, [r3, #20]
 80025a8:	4b49      	ldr	r3, [pc, #292]	; (80026d0 <motor_ISR+0x228>)
 80025aa:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80025ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025b2:	4b47      	ldr	r3, [pc, #284]	; (80026d0 <motor_ISR+0x228>)
 80025b4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	//속도 compute
	motor.sw_target_vel[3] = motor.sw_target_vel[2];						//[3] <- [2]
 80025b8:	4b45      	ldr	r3, [pc, #276]	; (80026d0 <motor_ISR+0x228>)
 80025ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025bc:	4a44      	ldr	r2, [pc, #272]	; (80026d0 <motor_ISR+0x228>)
 80025be:	6613      	str	r3, [r2, #96]	; 0x60
	motor.sw_target_vel[2] = motor.sw_target_vel[1];						//[2] <- [1]
 80025c0:	4b43      	ldr	r3, [pc, #268]	; (80026d0 <motor_ISR+0x228>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	4a42      	ldr	r2, [pc, #264]	; (80026d0 <motor_ISR+0x228>)
 80025c6:	65d3      	str	r3, [r2, #92]	; 0x5c
	motor.sw_target_vel[1] = motor.sw_target_vel[0];						//[1] <- [0]
 80025c8:	4b41      	ldr	r3, [pc, #260]	; (80026d0 <motor_ISR+0x228>)
 80025ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025cc:	4a40      	ldr	r2, [pc, #256]	; (80026d0 <motor_ISR+0x228>)
 80025ce:	6593      	str	r3, [r2, #88]	; 0x58
	motor.sw_target_vel[0] = motor.encoder_value *  PULSE_TO_V;					//[0] <- Encoder
 80025d0:	4b3f      	ldr	r3, [pc, #252]	; (80026d0 <motor_ISR+0x228>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f8d9 	bl	800078c <__aeabi_f2d>
 80025da:	a339      	add	r3, pc, #228	; (adr r3, 80026c0 <motor_ISR+0x218>)
 80025dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e0:	f7fd fe46 	bl	8000270 <__aeabi_dmul>
 80025e4:	4602      	mov	r2, r0
 80025e6:	460b      	mov	r3, r1
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	f7fe f946 	bl	800087c <__aeabi_d2f>
 80025f0:	4603      	mov	r3, r0
 80025f2:	4a37      	ldr	r2, [pc, #220]	; (80026d0 <motor_ISR+0x228>)
 80025f4:	6553      	str	r3, [r2, #84]	; 0x54
		
	motor.hw_current_vel_avg = (motor.sw_target_vel[3] + motor.sw_target_vel[2] +
 80025f6:	4b36      	ldr	r3, [pc, #216]	; (80026d0 <motor_ISR+0x228>)
 80025f8:	ed93 7a18 	vldr	s14, [r3, #96]	; 0x60
 80025fc:	4b34      	ldr	r3, [pc, #208]	; (80026d0 <motor_ISR+0x228>)
 80025fe:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002602:	ee37 7a27 	vadd.f32	s14, s14, s15
									motor.sw_target_vel[1] + motor.sw_target_vel[0]) * 0.25;
 8002606:	4b32      	ldr	r3, [pc, #200]	; (80026d0 <motor_ISR+0x228>)
 8002608:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
	motor.hw_current_vel_avg = (motor.sw_target_vel[3] + motor.sw_target_vel[2] +
 800260c:	ee37 7a27 	vadd.f32	s14, s14, s15
									motor.sw_target_vel[1] + motor.sw_target_vel[0]) * 0.25;
 8002610:	4b2f      	ldr	r3, [pc, #188]	; (80026d0 <motor_ISR+0x228>)
 8002612:	edd3 7a15 	vldr	s15, [r3, #84]	; 0x54
 8002616:	ee77 7a27 	vadd.f32	s15, s14, s15
	motor.hw_current_vel_avg = (motor.sw_target_vel[3] + motor.sw_target_vel[2] +
 800261a:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800261e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002622:	4b2b      	ldr	r3, [pc, #172]	; (80026d0 <motor_ISR+0x228>)
 8002624:	edc3 7a19 	vstr	s15, [r3, #100]	; 0x64

	if( motor.decel_flag )
 8002628:	4b29      	ldr	r3, [pc, #164]	; (80026d0 <motor_ISR+0x228>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d015      	beq.n	8002662 <motor_ISR+0x1ba>
		{
			if( motor.int32deccel_dist >= (float) fabs( (double) motor.error_distance) )
 8002636:	4b26      	ldr	r3, [pc, #152]	; (80026d0 <motor_ISR+0x228>)
 8002638:	ed93 7a07 	vldr	s14, [r3, #28]
 800263c:	4b24      	ldr	r3, [pc, #144]	; (80026d0 <motor_ISR+0x228>)
 800263e:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002642:	eef0 7ae7 	vabs.f32	s15, s15
 8002646:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800264a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264e:	db08      	blt.n	8002662 <motor_ISR+0x1ba>
			{
				motor.target_vel = motor.decel_vel;
 8002650:	4b1f      	ldr	r3, [pc, #124]	; (80026d0 <motor_ISR+0x228>)
 8002652:	68db      	ldr	r3, [r3, #12]
 8002654:	4a1e      	ldr	r2, [pc, #120]	; (80026d0 <motor_ISR+0x228>)
 8002656:	6453      	str	r3, [r2, #68]	; 0x44

				motor.decel_flag = OFF;
 8002658:	4a1d      	ldr	r2, [pc, #116]	; (80026d0 <motor_ISR+0x228>)
 800265a:	7813      	ldrb	r3, [r2, #0]
 800265c:	f36f 0300 	bfc	r3, #0, #1
 8002660:	7013      	strb	r3, [r2, #0]

				//g_err.over_dist = 0;
			}
		}

	if( motor.target_vel > motor.sw_new_vel )
 8002662:	4b1b      	ldr	r3, [pc, #108]	; (80026d0 <motor_ISR+0x228>)
 8002664:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8002668:	4b19      	ldr	r3, [pc, #100]	; (80026d0 <motor_ISR+0x228>)
 800266a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800266e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002676:	dd31      	ble.n	80026dc <motor_ISR+0x234>
		{
			//처음에는 이쪽으로 들어옴.
			motor.sw_new_vel += ((float) fabs( (double) motor.accel)) * ( (float) SAMPLE_FRQ);	//acceleration * 0.5ms
 8002678:	4b15      	ldr	r3, [pc, #84]	; (80026d0 <motor_ISR+0x228>)
 800267a:	edd3 7a06 	vldr	s15, [r3, #24]
 800267e:	eef0 7ae7 	vabs.f32	s15, s15
 8002682:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002686:	ee27 7a87 	vmul.f32	s14, s15, s14
 800268a:	4b11      	ldr	r3, [pc, #68]	; (80026d0 <motor_ISR+0x228>)
 800268c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002690:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002694:	4b0e      	ldr	r3, [pc, #56]	; (80026d0 <motor_ISR+0x228>)
 8002696:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
																//v = v0 + at
			if( motor.target_vel < motor.sw_new_vel )
 800269a:	4b0d      	ldr	r3, [pc, #52]	; (80026d0 <motor_ISR+0x228>)
 800269c:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80026a0:	4b0b      	ldr	r3, [pc, #44]	; (80026d0 <motor_ISR+0x228>)
 80026a2:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ae:	d540      	bpl.n	8002732 <motor_ISR+0x28a>
				motor.sw_new_vel = motor.target_vel;
 80026b0:	4b07      	ldr	r3, [pc, #28]	; (80026d0 <motor_ISR+0x228>)
 80026b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b4:	4a06      	ldr	r2, [pc, #24]	; (80026d0 <motor_ISR+0x228>)
 80026b6:	6413      	str	r3, [r2, #64]	; 0x40
 80026b8:	e03b      	b.n	8002732 <motor_ISR+0x28a>
 80026ba:	bf00      	nop
 80026bc:	f3af 8000 	nop.w
 80026c0:	d1207361 	.word	0xd1207361
 80026c4:	40519b0a 	.word	0x40519b0a
 80026c8:	20001138 	.word	0x20001138
 80026cc:	40021000 	.word	0x40021000
 80026d0:	2000116c 	.word	0x2000116c
 80026d4:	45000000 	.word	0x45000000
 80026d8:	45800800 	.word	0x45800800
		}
		else if( motor.target_vel < motor.sw_new_vel )
 80026dc:	4b8c      	ldr	r3, [pc, #560]	; (8002910 <motor_ISR+0x468>)
 80026de:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80026e2:	4b8b      	ldr	r3, [pc, #556]	; (8002910 <motor_ISR+0x468>)
 80026e4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80026e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026f0:	d51f      	bpl.n	8002732 <motor_ISR+0x28a>
		{
			//감속 구간	새로운 속도 (500us 마다 속도가 벼함. 이에 따라 함수가 끝나기 전에 새로운 속도값을 넣음)
			//			가 기존에 있었던 속도보다 큰 경우
			motor.sw_new_vel -= ((float) fabs( (double) motor.accel)) * ( (float) SAMPLE_FRQ);		//속도가 감소함.
 80026f2:	4b87      	ldr	r3, [pc, #540]	; (8002910 <motor_ISR+0x468>)
 80026f4:	edd3 7a06 	vldr	s15, [r3, #24]
 80026f8:	eef0 7ae7 	vabs.f32	s15, s15
 80026fc:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8002700:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002704:	4b82      	ldr	r3, [pc, #520]	; (8002910 <motor_ISR+0x468>)
 8002706:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 800270a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800270e:	4b80      	ldr	r3, [pc, #512]	; (8002910 <motor_ISR+0x468>)
 8002710:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
																	//v = v0 - at
			if( motor.target_vel > motor.sw_new_vel )
 8002714:	4b7e      	ldr	r3, [pc, #504]	; (8002910 <motor_ISR+0x468>)
 8002716:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800271a:	4b7d      	ldr	r3, [pc, #500]	; (8002910 <motor_ISR+0x468>)
 800271c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8002720:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002728:	dd03      	ble.n	8002732 <motor_ISR+0x28a>
				motor.sw_new_vel = motor.target_vel;
 800272a:	4b79      	ldr	r3, [pc, #484]	; (8002910 <motor_ISR+0x468>)
 800272c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800272e:	4a78      	ldr	r2, [pc, #480]	; (8002910 <motor_ISR+0x468>)
 8002730:	6413      	str	r3, [r2, #64]	; 0x40
		}
		else;

	//PID 제어
	motor.err_vel_sum -= motor.err_vel[ 3 ];		//2ms 이후에 값을 빼줌.
 8002732:	4b77      	ldr	r3, [pc, #476]	; (8002910 <motor_ISR+0x468>)
 8002734:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 8002738:	4b75      	ldr	r3, [pc, #468]	; (8002910 <motor_ISR+0x468>)
 800273a:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 800273e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002742:	4b73      	ldr	r3, [pc, #460]	; (8002910 <motor_ISR+0x468>)
 8002744:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	motor.err_vel[ 3 ] = motor.err_vel[ 2 ];		//1.5ms
 8002748:	4b71      	ldr	r3, [pc, #452]	; (8002910 <motor_ISR+0x468>)
 800274a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274c:	4a70      	ldr	r2, [pc, #448]	; (8002910 <motor_ISR+0x468>)
 800274e:	63d3      	str	r3, [r2, #60]	; 0x3c
	motor.err_vel[ 2 ] = motor.err_vel[ 1 ];		//1ms
 8002750:	4b6f      	ldr	r3, [pc, #444]	; (8002910 <motor_ISR+0x468>)
 8002752:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002754:	4a6e      	ldr	r2, [pc, #440]	; (8002910 <motor_ISR+0x468>)
 8002756:	6393      	str	r3, [r2, #56]	; 0x38
	motor.err_vel[ 1 ] = motor.err_vel[ 0 ];		//handle 값은 -1.13 ~ 1.13
 8002758:	4b6d      	ldr	r3, [pc, #436]	; (8002910 <motor_ISR+0x468>)
 800275a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800275c:	4a6c      	ldr	r2, [pc, #432]	; (8002910 <motor_ISR+0x468>)
 800275e:	6353      	str	r3, [r2, #52]	; 0x34
	motor.err_vel[ 0 ] = motor.sw_new_vel - motor.hw_current_vel_avg;
 8002760:	4b6b      	ldr	r3, [pc, #428]	; (8002910 <motor_ISR+0x468>)
 8002762:	ed93 7a10 	vldr	s14, [r3, #64]	; 0x40
 8002766:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <motor_ISR+0x468>)
 8002768:	edd3 7a19 	vldr	s15, [r3, #100]	; 0x64
 800276c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002770:	4b67      	ldr	r3, [pc, #412]	; (8002910 <motor_ISR+0x468>)
 8002772:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
	motor.err_vel_sum += motor.err_vel[ 0 ];		//한 요소가 2ms 동안 영향을 줌.
 8002776:	4b66      	ldr	r3, [pc, #408]	; (8002910 <motor_ISR+0x468>)
 8002778:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 800277c:	4b64      	ldr	r3, [pc, #400]	; (8002910 <motor_ISR+0x468>)
 800277e:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8002782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002786:	4b62      	ldr	r3, [pc, #392]	; (8002910 <motor_ISR+0x468>)
 8002788:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	motor.proportion_val = motor.kp * motor.err_vel[ 0 ];	//Kp * 현재 속도.
 800278c:	4b60      	ldr	r3, [pc, #384]	; (8002910 <motor_ISR+0x468>)
 800278e:	ed93 7a1a 	vldr	s14, [r3, #104]	; 0x68
 8002792:	4b5f      	ldr	r3, [pc, #380]	; (8002910 <motor_ISR+0x468>)
 8002794:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8002798:	ee67 7a27 	vmul.f32	s15, s14, s15
 800279c:	4b5c      	ldr	r3, [pc, #368]	; (8002910 <motor_ISR+0x468>)
 800279e:	edc3 7a1d 	vstr	s15, [r3, #116]	; 0x74
	motor.integral_val = motor.ki * motor.err_vel_sum;	//적분이니까 2ms 동안의 값을 이용함.
 80027a2:	4b5b      	ldr	r3, [pc, #364]	; (8002910 <motor_ISR+0x468>)
 80027a4:	ed93 7a1b 	vldr	s14, [r3, #108]	; 0x6c
 80027a8:	4b59      	ldr	r3, [pc, #356]	; (8002910 <motor_ISR+0x468>)
 80027aa:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80027ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027b2:	4b57      	ldr	r3, [pc, #348]	; (8002910 <motor_ISR+0x468>)
 80027b4:	edc3 7a1e 	vstr	s15, [r3, #120]	; 0x78
	motor.differential_val = motor.kd * ( (motor.err_vel[ 0 ] - motor.err_vel[ 3 ])
 80027b8:	4b55      	ldr	r3, [pc, #340]	; (8002910 <motor_ISR+0x468>)
 80027ba:	ed93 7a1c 	vldr	s14, [r3, #112]	; 0x70
 80027be:	4b54      	ldr	r3, [pc, #336]	; (8002910 <motor_ISR+0x468>)
 80027c0:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 80027c4:	4b52      	ldr	r3, [pc, #328]	; (8002910 <motor_ISR+0x468>)
 80027c6:	edd3 7a0f 	vldr	s15, [r3, #60]	; 0x3c
 80027ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
									+ ((float) 3.0 * (motor.err_vel[ 1 ] - motor.err_vel[ 2 ]) ));
 80027ce:	4b50      	ldr	r3, [pc, #320]	; (8002910 <motor_ISR+0x468>)
 80027d0:	ed93 6a0d 	vldr	s12, [r3, #52]	; 0x34
 80027d4:	4b4e      	ldr	r3, [pc, #312]	; (8002910 <motor_ISR+0x468>)
 80027d6:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80027da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80027de:	eeb0 6a08 	vmov.f32	s12, #8	; 0x40400000  3.0
 80027e2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80027e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
	motor.differential_val = motor.kd * ( (motor.err_vel[ 0 ] - motor.err_vel[ 3 ])
 80027ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ee:	4b48      	ldr	r3, [pc, #288]	; (8002910 <motor_ISR+0x468>)
 80027f0:	edc3 7a1f 	vstr	s15, [r3, #124]	; 0x7c
									//미분
	motor.pid_output += motor.proportion_val + motor.integral_val + motor.differential_val;
 80027f4:	4b46      	ldr	r3, [pc, #280]	; (8002910 <motor_ISR+0x468>)
 80027f6:	ed93 7a1d 	vldr	s14, [r3, #116]	; 0x74
 80027fa:	4b45      	ldr	r3, [pc, #276]	; (8002910 <motor_ISR+0x468>)
 80027fc:	edd3 7a1e 	vldr	s15, [r3, #120]	; 0x78
 8002800:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002804:	4b42      	ldr	r3, [pc, #264]	; (8002910 <motor_ISR+0x468>)
 8002806:	edd3 7a1f 	vldr	s15, [r3, #124]	; 0x7c
 800280a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800280e:	4b40      	ldr	r3, [pc, #256]	; (8002910 <motor_ISR+0x468>)
 8002810:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002814:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002818:	4b3d      	ldr	r3, [pc, #244]	; (8002910 <motor_ISR+0x468>)
 800281a:	edc3 7a20 	vstr	s15, [r3, #128]	; 0x80

	//최단거리 알고리즘


#if 1
	if(g_flag.move_state)
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <motor_ISR+0x46c>)
 8002820:	881b      	ldrh	r3, [r3, #0]
 8002822:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002826:	b2db      	uxtb	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d060      	beq.n	80028ee <motor_ISR+0x446>
	{
		if(motor.pid_output > 0)	//전진
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <motor_ISR+0x468>)
 800282e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002832:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800283a:	dd28      	ble.n	800288e <motor_ISR+0x3e6>
		{
			if( motor.pid_output > MAX_PID_OUT )		motor.pid_output = MAX_PID_OUT;
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <motor_ISR+0x468>)
 800283e:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002842:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002918 <motor_ISR+0x470>
 8002846:	eef4 7ac7 	vcmpe.f32	s15, s14
 800284a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800284e:	dd03      	ble.n	8002858 <motor_ISR+0x3b0>
 8002850:	4b2f      	ldr	r3, [pc, #188]	; (8002910 <motor_ISR+0x468>)
 8002852:	4a32      	ldr	r2, [pc, #200]	; (800291c <motor_ISR+0x474>)
 8002854:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

			GPIOC->ODR |= GPIO_PIN_8;
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <motor_ISR+0x478>)
 800285a:	695b      	ldr	r3, [r3, #20]
 800285c:	4a30      	ldr	r2, [pc, #192]	; (8002920 <motor_ISR+0x478>)
 800285e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002862:	6153      	str	r3, [r2, #20]

			TIM1->CCR1 = (uint32_t) (motor.pid_output * PWM_CONVERT);
 8002864:	4b2a      	ldr	r3, [pc, #168]	; (8002910 <motor_ISR+0x468>)
 8002866:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800286a:	4618      	mov	r0, r3
 800286c:	f7fd ff8e 	bl	800078c <__aeabi_f2d>
 8002870:	a325      	add	r3, pc, #148	; (adr r3, 8002908 <motor_ISR+0x460>)
 8002872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002876:	f7fd fcfb 	bl	8000270 <__aeabi_dmul>
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	4c29      	ldr	r4, [pc, #164]	; (8002924 <motor_ISR+0x47c>)
 8002880:	4610      	mov	r0, r2
 8002882:	4619      	mov	r1, r3
 8002884:	f7fd ffda 	bl	800083c <__aeabi_d2uiz>
 8002888:	4603      	mov	r3, r0
 800288a:	6363      	str	r3, [r4, #52]	; 0x34
	{
		GPIOC->ODR |= GPIO_PIN_8;
		TIM1->CCR1 = 0;
	}
#endif
}
 800288c:	e038      	b.n	8002900 <motor_ISR+0x458>
			if( motor.pid_output < MIN_PID_OUT )		motor.pid_output = MIN_PID_OUT;
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <motor_ISR+0x468>)
 8002890:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 8002894:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8002928 <motor_ISR+0x480>
 8002898:	eef4 7ac7 	vcmpe.f32	s15, s14
 800289c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028a0:	d503      	bpl.n	80028aa <motor_ISR+0x402>
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <motor_ISR+0x468>)
 80028a4:	4a21      	ldr	r2, [pc, #132]	; (800292c <motor_ISR+0x484>)
 80028a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
			GPIOC->ODR &= ~GPIO_PIN_8;
 80028aa:	4b1d      	ldr	r3, [pc, #116]	; (8002920 <motor_ISR+0x478>)
 80028ac:	695b      	ldr	r3, [r3, #20]
 80028ae:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <motor_ISR+0x478>)
 80028b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028b4:	6153      	str	r3, [r2, #20]
			TIM1->CCR1 = (uint32_t) (abs(motor.pid_output) * PWM_CONVERT) ;
 80028b6:	4b16      	ldr	r3, [pc, #88]	; (8002910 <motor_ISR+0x468>)
 80028b8:	edd3 7a20 	vldr	s15, [r3, #128]	; 0x80
 80028bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028c0:	ee17 3a90 	vmov	r3, s15
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	bfb8      	it	lt
 80028c8:	425b      	neglt	r3, r3
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd ff4c 	bl	8000768 <__aeabi_i2d>
 80028d0:	a30d      	add	r3, pc, #52	; (adr r3, 8002908 <motor_ISR+0x460>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd fccb 	bl	8000270 <__aeabi_dmul>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4c11      	ldr	r4, [pc, #68]	; (8002924 <motor_ISR+0x47c>)
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f7fd ffaa 	bl	800083c <__aeabi_d2uiz>
 80028e8:	4603      	mov	r3, r0
 80028ea:	6363      	str	r3, [r4, #52]	; 0x34
}
 80028ec:	e008      	b.n	8002900 <motor_ISR+0x458>
		GPIOC->ODR |= GPIO_PIN_8;
 80028ee:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <motor_ISR+0x478>)
 80028f0:	695b      	ldr	r3, [r3, #20]
 80028f2:	4a0b      	ldr	r2, [pc, #44]	; (8002920 <motor_ISR+0x478>)
 80028f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028f8:	6153      	str	r3, [r2, #20]
		TIM1->CCR1 = 0;
 80028fa:	4b0a      	ldr	r3, [pc, #40]	; (8002924 <motor_ISR+0x47c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002900:	bf00      	nop
 8002902:	bd98      	pop	{r3, r4, r7, pc}
 8002904:	f3af 8000 	nop.w
 8002908:	d70a3d71 	.word	0xd70a3d71
 800290c:	3fcd70a3 	.word	0x3fcd70a3
 8002910:	2000116c 	.word	0x2000116c
 8002914:	20001140 	.word	0x20001140
 8002918:	460bd800 	.word	0x460bd800
 800291c:	460bd800 	.word	0x460bd800
 8002920:	40020800 	.word	0x40020800
 8002924:	40010000 	.word	0x40010000
 8002928:	c60bd800 	.word	0xc60bd800
 800292c:	c60bd800 	.word	0xc60bd800

08002930 <move_to_target>:

void move_to_target ( volatile float dist, volatile float dec_dist, volatile float tar_vel, volatile float dec_vel, volatile float acc )
{
 8002930:	b480      	push	{r7}
 8002932:	b087      	sub	sp, #28
 8002934:	af00      	add	r7, sp, #0
 8002936:	ed87 0a05 	vstr	s0, [r7, #20]
 800293a:	edc7 0a04 	vstr	s1, [r7, #16]
 800293e:	ed87 1a03 	vstr	s2, [r7, #12]
 8002942:	edc7 1a02 	vstr	s3, [r7, #8]
 8002946:	ed87 2a01 	vstr	s4, [r7, #4]
	//disable motorISR

	motor.accel = acc;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a18      	ldr	r2, [pc, #96]	; (80029b0 <move_to_target+0x80>)
 800294e:	6193      	str	r3, [r2, #24]

	motor.int32deccel_dist = dec_dist;
 8002950:	693b      	ldr	r3, [r7, #16]
 8002952:	4a17      	ldr	r2, [pc, #92]	; (80029b0 <move_to_target+0x80>)
 8002954:	61d3      	str	r3, [r2, #28]
	motor.target_distance = dist;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4a15      	ldr	r2, [pc, #84]	; (80029b0 <move_to_target+0x80>)
 800295a:	6113      	str	r3, [r2, #16]

	motor.target_vel = tar_vel;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a14      	ldr	r2, [pc, #80]	; (80029b0 <move_to_target+0x80>)
 8002960:	6453      	str	r3, [r2, #68]	; 0x44

	motor.error_distance = motor.target_distance - motor.hw_distance_sum;
 8002962:	4b13      	ldr	r3, [pc, #76]	; (80029b0 <move_to_target+0x80>)
 8002964:	ed93 7a04 	vldr	s14, [r3, #16]
 8002968:	4b11      	ldr	r3, [pc, #68]	; (80029b0 <move_to_target+0x80>)
 800296a:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 800296e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002972:	4b0f      	ldr	r3, [pc, #60]	; (80029b0 <move_to_target+0x80>)
 8002974:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

	motor.int32deccel_vel = dec_vel;
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	4a0d      	ldr	r2, [pc, #52]	; (80029b0 <move_to_target+0x80>)
 800297c:	6053      	str	r3, [r2, #4]

	motor.decel_flag = dec_vel;
 800297e:	edd7 7a02 	vldr	s15, [r7, #8]
 8002982:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002986:	edc7 7a00 	vstr	s15, [r7]
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2d9      	uxtb	r1, r3
 800298e:	4a08      	ldr	r2, [pc, #32]	; (80029b0 <move_to_target+0x80>)
 8002990:	7813      	ldrb	r3, [r2, #0]
 8002992:	f361 0300 	bfi	r3, r1, #0, #1
 8002996:	7013      	strb	r3, [r2, #0]
	g_flag.move_state = ON;
 8002998:	4a06      	ldr	r2, [pc, #24]	; (80029b4 <move_to_target+0x84>)
 800299a:	7813      	ldrb	r3, [r2, #0]
 800299c:	f043 0310 	orr.w	r3, r3, #16
 80029a0:	7013      	strb	r3, [r2, #0]

	//enable motorISR
}
 80029a2:	bf00      	nop
 80029a4:	371c      	adds	r7, #28
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	2000116c 	.word	0x2000116c
 80029b4:	20001140 	.word	0x20001140

080029b8 <sensor_ISR>:
	memset( ( void * ) ir, 0x00, sizeof(ir_str) * ADC_NUM);
}

//activates every 20us
void sensor_ISR(void)
{
 80029b8:	b598      	push	{r3, r4, r7, lr}
 80029ba:	af00      	add	r7, sp, #0

#endif

#ifdef sharp_2Y0A21_ENABLED

	  HAL_ADC_Start(&hadc1);
 80029bc:	4819      	ldr	r0, [pc, #100]	; (8002a24 <sensor_ISR+0x6c>)
 80029be:	f000 fc7d 	bl	80032bc <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 80029c2:	2164      	movs	r1, #100	; 0x64
 80029c4:	4817      	ldr	r0, [pc, #92]	; (8002a24 <sensor_ISR+0x6c>)
 80029c6:	f000 fd4b 	bl	8003460 <HAL_ADC_PollForConversion>
	  ir[ g_int32adc_cnt ].u32result = HAL_ADC_GetValue(&hadc1);
 80029ca:	4b17      	ldr	r3, [pc, #92]	; (8002a28 <sensor_ISR+0x70>)
 80029cc:	681c      	ldr	r4, [r3, #0]
 80029ce:	4815      	ldr	r0, [pc, #84]	; (8002a24 <sensor_ISR+0x6c>)
 80029d0:	f000 ff12 	bl	80037f8 <HAL_ADC_GetValue>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a15      	ldr	r2, [pc, #84]	; (8002a2c <sensor_ISR+0x74>)
 80029d8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]

#endif

#if 1
if (ir[g_int32adc_cnt].u32result > 3500)
 80029dc:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <sensor_ISR+0x70>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a12      	ldr	r2, [pc, #72]	; (8002a2c <sensor_ISR+0x74>)
 80029e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e6:	f640 52ac 	movw	r2, #3500	; 0xdac
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d90b      	bls.n	8002a06 <sensor_ISR+0x4e>
{
	if(!g_flag.break_motor)
 80029ee:	4b10      	ldr	r3, [pc, #64]	; (8002a30 <sensor_ISR+0x78>)
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <sensor_ISR+0x4e>
	{
		g_flag.break_motor = ON;
 80029fc:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <sensor_ISR+0x78>)
 80029fe:	7813      	ldrb	r3, [r2, #0]
 8002a00:	f043 0302 	orr.w	r3, r3, #2
 8002a04:	7013      	strb	r3, [r2, #0]
	}
}
#endif


g_int32adc_cnt ++;
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <sensor_ISR+0x70>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	4a06      	ldr	r2, [pc, #24]	; (8002a28 <sensor_ISR+0x70>)
 8002a0e:	6013      	str	r3, [r2, #0]

if(g_int32adc_cnt == 3)
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <sensor_ISR+0x70>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	2b03      	cmp	r3, #3
 8002a16:	d102      	bne.n	8002a1e <sensor_ISR+0x66>
{
	g_int32adc_cnt = 0;
 8002a18:	4b03      	ldr	r3, [pc, #12]	; (8002a28 <sensor_ISR+0x70>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
}


#endif

}
 8002a1e:	bf00      	nop
 8002a20:	bd98      	pop	{r3, r4, r7, pc}
 8002a22:	bf00      	nop
 8002a24:	20001318 	.word	0x20001318
 8002a28:	20000128 	.word	0x20000128
 8002a2c:	2000114c 	.word	0x2000114c
 8002a30:	20001140 	.word	0x20001140

08002a34 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b083      	sub	sp, #12
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	607b      	str	r3, [r7, #4]
 8002a3e:	4b10      	ldr	r3, [pc, #64]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a42:	4a0f      	ldr	r2, [pc, #60]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a48:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4a:	4b0d      	ldr	r3, [pc, #52]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a52:	607b      	str	r3, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a56:	2300      	movs	r3, #0
 8002a58:	603b      	str	r3, [r7, #0]
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	4a08      	ldr	r2, [pc, #32]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a64:	6413      	str	r3, [r2, #64]	; 0x40
 8002a66:	4b06      	ldr	r3, [pc, #24]	; (8002a80 <HAL_MspInit+0x4c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a6e:	603b      	str	r3, [r7, #0]
 8002a70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a72:	bf00      	nop
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800

08002a84 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a8c:	f107 0314 	add.w	r3, r7, #20
 8002a90:	2200      	movs	r2, #0
 8002a92:	601a      	str	r2, [r3, #0]
 8002a94:	605a      	str	r2, [r3, #4]
 8002a96:	609a      	str	r2, [r3, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	; (8002b10 <HAL_ADC_MspInit+0x8c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d12f      	bne.n	8002b06 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	613b      	str	r3, [r7, #16]
 8002aaa:	4b1a      	ldr	r3, [pc, #104]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aae:	4a19      	ldr	r2, [pc, #100]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ab6:	4b17      	ldr	r3, [pc, #92]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002abe:	613b      	str	r3, [r7, #16]
 8002ac0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	4b13      	ldr	r3, [pc, #76]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aca:	4a12      	ldr	r2, [pc, #72]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002acc:	f043 0301 	orr.w	r3, r3, #1
 8002ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ad2:	4b10      	ldr	r3, [pc, #64]	; (8002b14 <HAL_ADC_MspInit+0x90>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA2     ------> ADC1_IN2
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4|GPIO_PIN_5;
 8002ade:	2334      	movs	r3, #52	; 0x34
 8002ae0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aea:	f107 0314 	add.w	r3, r7, #20
 8002aee:	4619      	mov	r1, r3
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <HAL_ADC_MspInit+0x94>)
 8002af2:	f001 f9e7 	bl	8003ec4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	2012      	movs	r0, #18
 8002afc:	f001 f9ab 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002b00:	2012      	movs	r0, #18
 8002b02:	f001 f9c4 	bl	8003e8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b06:	bf00      	nop
 8002b08:	3728      	adds	r7, #40	; 0x28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}
 8002b0e:	bf00      	nop
 8002b10:	40012000 	.word	0x40012000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000

08002b1c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b085      	sub	sp, #20
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	; (8002b58 <HAL_TIM_PWM_MspInit+0x3c>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d10d      	bne.n	8002b4a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b2e:	2300      	movs	r3, #0
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	4a09      	ldr	r2, [pc, #36]	; (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b38:	f043 0301 	orr.w	r3, r3, #1
 8002b3c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b3e:	4b07      	ldr	r3, [pc, #28]	; (8002b5c <HAL_TIM_PWM_MspInit+0x40>)
 8002b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	60fb      	str	r3, [r7, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002b4a:	bf00      	nop
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40023800 	.word	0x40023800

08002b60 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b08a      	sub	sp, #40	; 0x28
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b68:	f107 0314 	add.w	r3, r7, #20
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	601a      	str	r2, [r3, #0]
 8002b70:	605a      	str	r2, [r3, #4]
 8002b72:	609a      	str	r2, [r3, #8]
 8002b74:	60da      	str	r2, [r3, #12]
 8002b76:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM2)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b80:	d14b      	bne.n	8002c1a <HAL_TIM_IC_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b27      	ldr	r3, [pc, #156]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8a:	4a26      	ldr	r2, [pc, #152]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002b8c:	f043 0301 	orr.w	r3, r3, #1
 8002b90:	6413      	str	r3, [r2, #64]	; 0x40
 8002b92:	4b24      	ldr	r3, [pc, #144]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0301 	and.w	r3, r3, #1
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b20      	ldr	r3, [pc, #128]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a1f      	ldr	r2, [pc, #124]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b1d      	ldr	r3, [pc, #116]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b19      	ldr	r3, [pc, #100]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	4a18      	ldr	r2, [pc, #96]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002bc4:	f043 0302 	orr.w	r3, r3, #2
 8002bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002bca:	4b16      	ldr	r3, [pc, #88]	; (8002c24 <HAL_TIM_IC_MspInit+0xc4>)
 8002bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|ENCODER1_Pin;
 8002bd6:	f248 0308 	movw	r3, #32776	; 0x8008
 8002bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bdc:	2302      	movs	r3, #2
 8002bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002be4:	2300      	movs	r3, #0
 8002be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002be8:	2301      	movs	r3, #1
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bec:	f107 0314 	add.w	r3, r7, #20
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	480d      	ldr	r0, [pc, #52]	; (8002c28 <HAL_TIM_IC_MspInit+0xc8>)
 8002bf4:	f001 f966 	bl	8003ec4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|ENCODER2_Pin;
 8002bf8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8002bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfe:	2302      	movs	r3, #2
 8002c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c06:	2300      	movs	r3, #0
 8002c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c0e:	f107 0314 	add.w	r3, r7, #20
 8002c12:	4619      	mov	r1, r3
 8002c14:	4805      	ldr	r0, [pc, #20]	; (8002c2c <HAL_TIM_IC_MspInit+0xcc>)
 8002c16:	f001 f955 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002c1a:	bf00      	nop
 8002c1c:	3728      	adds	r7, #40	; 0x28
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	40023800 	.word	0x40023800
 8002c28:	40020000 	.word	0x40020000
 8002c2c:	40020400 	.word	0x40020400

08002c30 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b088      	sub	sp, #32
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a3a      	ldr	r2, [pc, #232]	; (8002d28 <HAL_TIM_Base_MspInit+0xf8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c42:	2300      	movs	r3, #0
 8002c44:	61fb      	str	r3, [r7, #28]
 8002c46:	4b39      	ldr	r3, [pc, #228]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a38      	ldr	r2, [pc, #224]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c4c:	f043 0302 	orr.w	r3, r3, #2
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b36      	ldr	r3, [pc, #216]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 0302 	and.w	r3, r3, #2
 8002c5a:	61fb      	str	r3, [r7, #28]
 8002c5c:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8002c5e:	e05e      	b.n	8002d1e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM6)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a32      	ldr	r2, [pc, #200]	; (8002d30 <HAL_TIM_Base_MspInit+0x100>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d116      	bne.n	8002c98 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	61bb      	str	r3, [r7, #24]
 8002c6e:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c72:	4a2e      	ldr	r2, [pc, #184]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c74:	f043 0310 	orr.w	r3, r3, #16
 8002c78:	6413      	str	r3, [r2, #64]	; 0x40
 8002c7a:	4b2c      	ldr	r3, [pc, #176]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7e:	f003 0310 	and.w	r3, r3, #16
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 2, 0);
 8002c86:	2200      	movs	r2, #0
 8002c88:	2102      	movs	r1, #2
 8002c8a:	2036      	movs	r0, #54	; 0x36
 8002c8c:	f001 f8e3 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002c90:	2036      	movs	r0, #54	; 0x36
 8002c92:	f001 f8fc 	bl	8003e8e <HAL_NVIC_EnableIRQ>
}
 8002c96:	e042      	b.n	8002d1e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM7)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a25      	ldr	r2, [pc, #148]	; (8002d34 <HAL_TIM_Base_MspInit+0x104>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d116      	bne.n	8002cd0 <HAL_TIM_Base_MspInit+0xa0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	617b      	str	r3, [r7, #20]
 8002ca6:	4b21      	ldr	r3, [pc, #132]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002caa:	4a20      	ldr	r2, [pc, #128]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002cac:	f043 0320 	orr.w	r3, r3, #32
 8002cb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002cb2:	4b1e      	ldr	r3, [pc, #120]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	f003 0320 	and.w	r3, r3, #32
 8002cba:	617b      	str	r3, [r7, #20]
 8002cbc:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 3, 0);
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	2103      	movs	r1, #3
 8002cc2:	2037      	movs	r0, #55	; 0x37
 8002cc4:	f001 f8c7 	bl	8003e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8002cc8:	2037      	movs	r0, #55	; 0x37
 8002cca:	f001 f8e0 	bl	8003e8e <HAL_NVIC_EnableIRQ>
}
 8002cce:	e026      	b.n	8002d1e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM8)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_TIM_Base_MspInit+0x108>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d10e      	bne.n	8002cf8 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cda:	2300      	movs	r3, #0
 8002cdc:	613b      	str	r3, [r7, #16]
 8002cde:	4b13      	ldr	r3, [pc, #76]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ce2:	4a12      	ldr	r2, [pc, #72]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002ce4:	f043 0302 	orr.w	r3, r3, #2
 8002ce8:	6453      	str	r3, [r2, #68]	; 0x44
 8002cea:	4b10      	ldr	r3, [pc, #64]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cee:	f003 0302 	and.w	r3, r3, #2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]
}
 8002cf6:	e012      	b.n	8002d1e <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM10)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a0f      	ldr	r2, [pc, #60]	; (8002d3c <HAL_TIM_Base_MspInit+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d10d      	bne.n	8002d1e <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8002d02:	2300      	movs	r3, #0
 8002d04:	60fb      	str	r3, [r7, #12]
 8002d06:	4b09      	ldr	r3, [pc, #36]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d0a:	4a08      	ldr	r2, [pc, #32]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002d0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d10:	6453      	str	r3, [r2, #68]	; 0x44
 8002d12:	4b06      	ldr	r3, [pc, #24]	; (8002d2c <HAL_TIM_Base_MspInit+0xfc>)
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
}
 8002d1e:	bf00      	nop
 8002d20:	3720      	adds	r7, #32
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	40000400 	.word	0x40000400
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	40001000 	.word	0x40001000
 8002d34:	40001400 	.word	0x40001400
 8002d38:	40010400 	.word	0x40010400
 8002d3c:	40014400 	.word	0x40014400

08002d40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d48:	f107 0314 	add.w	r3, r7, #20
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	601a      	str	r2, [r3, #0]
 8002d50:	605a      	str	r2, [r3, #4]
 8002d52:	609a      	str	r2, [r3, #8]
 8002d54:	60da      	str	r2, [r3, #12]
 8002d56:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a37      	ldr	r2, [pc, #220]	; (8002e3c <HAL_TIM_MspPostInit+0xfc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d11f      	bne.n	8002da2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	4b36      	ldr	r3, [pc, #216]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d6a:	4a35      	ldr	r2, [pc, #212]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002d6c:	f043 0301 	orr.w	r3, r3, #1
 8002d70:	6313      	str	r3, [r2, #48]	; 0x30
 8002d72:	4b33      	ldr	r3, [pc, #204]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	613b      	str	r3, [r7, #16]
 8002d7c:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = MOTOR_PWM_TIM1_Pin;
 8002d7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d84:	2302      	movs	r3, #2
 8002d86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d88:	2300      	movs	r3, #0
 8002d8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002d90:	2301      	movs	r3, #1
 8002d92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(MOTOR_PWM_TIM1_GPIO_Port, &GPIO_InitStruct);
 8002d94:	f107 0314 	add.w	r3, r7, #20
 8002d98:	4619      	mov	r1, r3
 8002d9a:	482a      	ldr	r0, [pc, #168]	; (8002e44 <HAL_TIM_MspPostInit+0x104>)
 8002d9c:	f001 f892 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8002da0:	e047      	b.n	8002e32 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a28      	ldr	r2, [pc, #160]	; (8002e48 <HAL_TIM_MspPostInit+0x108>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d11e      	bne.n	8002dea <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dac:	2300      	movs	r3, #0
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	4b23      	ldr	r3, [pc, #140]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	4a22      	ldr	r2, [pc, #136]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002db6:	f043 0304 	orr.w	r3, r3, #4
 8002dba:	6313      	str	r3, [r2, #48]	; 0x30
 8002dbc:	4b20      	ldr	r3, [pc, #128]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002dc8:	2340      	movs	r3, #64	; 0x40
 8002dca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002dcc:	2302      	movs	r3, #2
 8002dce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002dd8:	2303      	movs	r3, #3
 8002dda:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ddc:	f107 0314 	add.w	r3, r7, #20
 8002de0:	4619      	mov	r1, r3
 8002de2:	481a      	ldr	r0, [pc, #104]	; (8002e4c <HAL_TIM_MspPostInit+0x10c>)
 8002de4:	f001 f86e 	bl	8003ec4 <HAL_GPIO_Init>
}
 8002de8:	e023      	b.n	8002e32 <HAL_TIM_MspPostInit+0xf2>
  else if(htim->Instance==TIM10)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a18      	ldr	r2, [pc, #96]	; (8002e50 <HAL_TIM_MspPostInit+0x110>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d11e      	bne.n	8002e32 <HAL_TIM_MspPostInit+0xf2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002df4:	2300      	movs	r3, #0
 8002df6:	60bb      	str	r3, [r7, #8]
 8002df8:	4b11      	ldr	r3, [pc, #68]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002dfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfc:	4a10      	ldr	r2, [pc, #64]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002dfe:	f043 0302 	orr.w	r3, r3, #2
 8002e02:	6313      	str	r3, [r2, #48]	; 0x30
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_TIM_MspPostInit+0x100>)
 8002e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	60bb      	str	r3, [r7, #8]
 8002e0e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Servo_Pin;
 8002e10:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e16:	2302      	movs	r3, #2
 8002e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002e22:	2303      	movs	r3, #3
 8002e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4809      	ldr	r0, [pc, #36]	; (8002e54 <HAL_TIM_MspPostInit+0x114>)
 8002e2e:	f001 f849 	bl	8003ec4 <HAL_GPIO_Init>
}
 8002e32:	bf00      	nop
 8002e34:	3728      	adds	r7, #40	; 0x28
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	40010000 	.word	0x40010000
 8002e40:	40023800 	.word	0x40023800
 8002e44:	40020000 	.word	0x40020000
 8002e48:	40010400 	.word	0x40010400
 8002e4c:	40020800 	.word	0x40020800
 8002e50:	40014400 	.word	0x40014400
 8002e54:	40020400 	.word	0x40020400

08002e58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002e58:	b580      	push	{r7, lr}
 8002e5a:	b08c      	sub	sp, #48	; 0x30
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	2200      	movs	r2, #0
 8002e66:	601a      	str	r2, [r3, #0]
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	609a      	str	r2, [r3, #8]
 8002e6c:	60da      	str	r2, [r3, #12]
 8002e6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a41      	ldr	r2, [pc, #260]	; (8002f7c <HAL_UART_MspInit+0x124>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d12c      	bne.n	8002ed4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	61bb      	str	r3, [r7, #24]
 8002e7e:	4b40      	ldr	r3, [pc, #256]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e82:	4a3f      	ldr	r2, [pc, #252]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002e88:	6413      	str	r3, [r2, #64]	; 0x40
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e92:	61bb      	str	r3, [r7, #24]
 8002e94:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e96:	2300      	movs	r3, #0
 8002e98:	617b      	str	r3, [r7, #20]
 8002e9a:	4b39      	ldr	r3, [pc, #228]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9e:	4a38      	ldr	r2, [pc, #224]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002ea0:	f043 0301 	orr.w	r3, r3, #1
 8002ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8002ea6:	4b36      	ldr	r3, [pc, #216]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	617b      	str	r3, [r7, #20]
 8002eb0:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002eb2:	2303      	movs	r3, #3
 8002eb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002eb6:	2302      	movs	r3, #2
 8002eb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002ec2:	2308      	movs	r3, #8
 8002ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ec6:	f107 031c 	add.w	r3, r7, #28
 8002eca:	4619      	mov	r1, r3
 8002ecc:	482d      	ldr	r0, [pc, #180]	; (8002f84 <HAL_UART_MspInit+0x12c>)
 8002ece:	f000 fff9 	bl	8003ec4 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8002ed2:	e04f      	b.n	8002f74 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==UART5)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a2b      	ldr	r2, [pc, #172]	; (8002f88 <HAL_UART_MspInit+0x130>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d14a      	bne.n	8002f74 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b27      	ldr	r3, [pc, #156]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	4a26      	ldr	r2, [pc, #152]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002ee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002eec:	6413      	str	r3, [r2, #64]	; 0x40
 8002eee:	4b24      	ldr	r3, [pc, #144]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b20      	ldr	r3, [pc, #128]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f04:	f043 0304 	orr.w	r3, r3, #4
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0304 	and.w	r3, r3, #4
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	4b19      	ldr	r3, [pc, #100]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f1e:	4a18      	ldr	r2, [pc, #96]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f20:	f043 0308 	orr.w	r3, r3, #8
 8002f24:	6313      	str	r3, [r2, #48]	; 0x30
 8002f26:	4b16      	ldr	r3, [pc, #88]	; (8002f80 <HAL_UART_MspInit+0x128>)
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	f003 0308 	and.w	r3, r3, #8
 8002f2e:	60bb      	str	r3, [r7, #8]
 8002f30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002f32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f38:	2302      	movs	r3, #2
 8002f3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f40:	2303      	movs	r3, #3
 8002f42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f44:	2308      	movs	r3, #8
 8002f46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f48:	f107 031c 	add.w	r3, r7, #28
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	480f      	ldr	r0, [pc, #60]	; (8002f8c <HAL_UART_MspInit+0x134>)
 8002f50:	f000 ffb8 	bl	8003ec4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002f54:	2304      	movs	r3, #4
 8002f56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f58:	2302      	movs	r3, #2
 8002f5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f60:	2303      	movs	r3, #3
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002f64:	2308      	movs	r3, #8
 8002f66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f68:	f107 031c 	add.w	r3, r7, #28
 8002f6c:	4619      	mov	r1, r3
 8002f6e:	4808      	ldr	r0, [pc, #32]	; (8002f90 <HAL_UART_MspInit+0x138>)
 8002f70:	f000 ffa8 	bl	8003ec4 <HAL_GPIO_Init>
}
 8002f74:	bf00      	nop
 8002f76:	3730      	adds	r7, #48	; 0x30
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40004c00 	.word	0x40004c00
 8002f80:	40023800 	.word	0x40023800
 8002f84:	40020000 	.word	0x40020000
 8002f88:	40005000 	.word	0x40005000
 8002f8c:	40020800 	.word	0x40020800
 8002f90:	40020c00 	.word	0x40020c00

08002f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f94:	b480      	push	{r7}
 8002f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f98:	e7fe      	b.n	8002f98 <NMI_Handler+0x4>

08002f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f9e:	e7fe      	b.n	8002f9e <HardFault_Handler+0x4>

08002fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <MemManage_Handler+0x4>

08002fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002fa6:	b480      	push	{r7}
 8002fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002faa:	e7fe      	b.n	8002faa <BusFault_Handler+0x4>

08002fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002fac:	b480      	push	{r7}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002fb0:	e7fe      	b.n	8002fb0 <UsageFault_Handler+0x4>

08002fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002fb2:	b480      	push	{r7}
 8002fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002fb6:	bf00      	nop
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002fc4:	bf00      	nop
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr

08002fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fe0:	f000 f8e4 	bl	80031ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fe4:	bf00      	nop
 8002fe6:	bd80      	pop	{r7, pc}

08002fe8 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002fec:	4802      	ldr	r0, [pc, #8]	; (8002ff8 <ADC_IRQHandler+0x10>)
 8002fee:	f000 fac2 	bl	8003576 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002ff2:	bf00      	nop
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	20001318 	.word	0x20001318

08002ffc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003000:	4802      	ldr	r0, [pc, #8]	; (800300c <TIM6_DAC_IRQHandler+0x10>)
 8003002:	f002 f8ee 	bl	80051e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003006:	bf00      	nop
 8003008:	bd80      	pop	{r7, pc}
 800300a:	bf00      	nop
 800300c:	20001360 	.word	0x20001360

08003010 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003014:	4802      	ldr	r0, [pc, #8]	; (8003020 <TIM7_IRQHandler+0x10>)
 8003016:	f002 f8e4 	bl	80051e2 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800301a:	bf00      	nop
 800301c:	bd80      	pop	{r7, pc}
 800301e:	bf00      	nop
 8003020:	2000147c 	.word	0x2000147c

08003024 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b086      	sub	sp, #24
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800302c:	4a14      	ldr	r2, [pc, #80]	; (8003080 <_sbrk+0x5c>)
 800302e:	4b15      	ldr	r3, [pc, #84]	; (8003084 <_sbrk+0x60>)
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003038:	4b13      	ldr	r3, [pc, #76]	; (8003088 <_sbrk+0x64>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d102      	bne.n	8003046 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003040:	4b11      	ldr	r3, [pc, #68]	; (8003088 <_sbrk+0x64>)
 8003042:	4a12      	ldr	r2, [pc, #72]	; (800308c <_sbrk+0x68>)
 8003044:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003046:	4b10      	ldr	r3, [pc, #64]	; (8003088 <_sbrk+0x64>)
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4413      	add	r3, r2
 800304e:	693a      	ldr	r2, [r7, #16]
 8003050:	429a      	cmp	r2, r3
 8003052:	d207      	bcs.n	8003064 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003054:	f003 fb4e 	bl	80066f4 <__errno>
 8003058:	4603      	mov	r3, r0
 800305a:	220c      	movs	r2, #12
 800305c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800305e:	f04f 33ff 	mov.w	r3, #4294967295
 8003062:	e009      	b.n	8003078 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003064:	4b08      	ldr	r3, [pc, #32]	; (8003088 <_sbrk+0x64>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800306a:	4b07      	ldr	r3, [pc, #28]	; (8003088 <_sbrk+0x64>)
 800306c:	681a      	ldr	r2, [r3, #0]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4413      	add	r3, r2
 8003072:	4a05      	ldr	r2, [pc, #20]	; (8003088 <_sbrk+0x64>)
 8003074:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003076:	68fb      	ldr	r3, [r7, #12]
                                                                                                                                                  }
 8003078:	4618      	mov	r0, r3
 800307a:	3718      	adds	r7, #24
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}
 8003080:	20020000 	.word	0x20020000
 8003084:	00000400 	.word	0x00000400
 8003088:	2000012c 	.word	0x2000012c
 800308c:	200014d8 	.word	0x200014d8

08003090 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003094:	4b06      	ldr	r3, [pc, #24]	; (80030b0 <SystemInit+0x20>)
 8003096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309a:	4a05      	ldr	r2, [pc, #20]	; (80030b0 <SystemInit+0x20>)
 800309c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80030a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80030a4:	bf00      	nop
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	e000ed00 	.word	0xe000ed00

080030b4 <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack     /* set stack pointer */
 80030b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80030ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80030b8:	480d      	ldr	r0, [pc, #52]	; (80030f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80030ba:	490e      	ldr	r1, [pc, #56]	; (80030f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80030bc:	4a0e      	ldr	r2, [pc, #56]	; (80030f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80030be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80030c0:	e002      	b.n	80030c8 <LoopCopyDataInit>

080030c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80030c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80030c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80030c6:	3304      	adds	r3, #4

080030c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80030c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80030ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80030cc:	d3f9      	bcc.n	80030c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80030ce:	4a0b      	ldr	r2, [pc, #44]	; (80030fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80030d0:	4c0b      	ldr	r4, [pc, #44]	; (8003100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80030d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80030d4:	e001      	b.n	80030da <LoopFillZerobss>

080030d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80030d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80030d8:	3204      	adds	r2, #4

080030da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80030da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80030dc:	d3fb      	bcc.n	80030d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80030de:	f7ff ffd7 	bl	8003090 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80030e2:	f003 fb0d 	bl	8006700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80030e6:	f7fd ff45 	bl	8000f74 <main>
  bx  lr    
 80030ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80030ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80030f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80030f4:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80030f8:	08007440 	.word	0x08007440
  ldr r2, =_sbss
 80030fc:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003100:	200014d8 	.word	0x200014d8

08003104 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003104:	e7fe      	b.n	8003104 <CAN1_RX0_IRQHandler>
	...

08003108 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800310c:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <HAL_Init+0x40>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_Init+0x40>)
 8003112:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003116:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003118:	4b0b      	ldr	r3, [pc, #44]	; (8003148 <HAL_Init+0x40>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a0a      	ldr	r2, [pc, #40]	; (8003148 <HAL_Init+0x40>)
 800311e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003122:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003124:	4b08      	ldr	r3, [pc, #32]	; (8003148 <HAL_Init+0x40>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a07      	ldr	r2, [pc, #28]	; (8003148 <HAL_Init+0x40>)
 800312a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800312e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003130:	2003      	movs	r0, #3
 8003132:	f000 fe85 	bl	8003e40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003136:	200f      	movs	r0, #15
 8003138:	f000 f808 	bl	800314c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800313c:	f7ff fc7a 	bl	8002a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003140:	2300      	movs	r3, #0
}
 8003142:	4618      	mov	r0, r3
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	40023c00 	.word	0x40023c00

0800314c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003154:	4b12      	ldr	r3, [pc, #72]	; (80031a0 <HAL_InitTick+0x54>)
 8003156:	681a      	ldr	r2, [r3, #0]
 8003158:	4b12      	ldr	r3, [pc, #72]	; (80031a4 <HAL_InitTick+0x58>)
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	4619      	mov	r1, r3
 800315e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003162:	fbb3 f3f1 	udiv	r3, r3, r1
 8003166:	fbb2 f3f3 	udiv	r3, r2, r3
 800316a:	4618      	mov	r0, r3
 800316c:	f000 fe9d 	bl	8003eaa <HAL_SYSTICK_Config>
 8003170:	4603      	mov	r3, r0
 8003172:	2b00      	cmp	r3, #0
 8003174:	d001      	beq.n	800317a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003176:	2301      	movs	r3, #1
 8003178:	e00e      	b.n	8003198 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b0f      	cmp	r3, #15
 800317e:	d80a      	bhi.n	8003196 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003180:	2200      	movs	r2, #0
 8003182:	6879      	ldr	r1, [r7, #4]
 8003184:	f04f 30ff 	mov.w	r0, #4294967295
 8003188:	f000 fe65 	bl	8003e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800318c:	4a06      	ldr	r2, [pc, #24]	; (80031a8 <HAL_InitTick+0x5c>)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	e000      	b.n	8003198 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
}
 8003198:	4618      	mov	r0, r3
 800319a:	3708      	adds	r7, #8
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	20000008 	.word	0x20000008
 80031a4:	20000010 	.word	0x20000010
 80031a8:	2000000c 	.word	0x2000000c

080031ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80031b0:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_IncTick+0x20>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	461a      	mov	r2, r3
 80031b6:	4b06      	ldr	r3, [pc, #24]	; (80031d0 <HAL_IncTick+0x24>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4413      	add	r3, r2
 80031bc:	4a04      	ldr	r2, [pc, #16]	; (80031d0 <HAL_IncTick+0x24>)
 80031be:	6013      	str	r3, [r2, #0]
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr
 80031ca:	bf00      	nop
 80031cc:	20000010 	.word	0x20000010
 80031d0:	200014c4 	.word	0x200014c4

080031d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return uwTick;
 80031d8:	4b03      	ldr	r3, [pc, #12]	; (80031e8 <HAL_GetTick+0x14>)
 80031da:	681b      	ldr	r3, [r3, #0]
}
 80031dc:	4618      	mov	r0, r3
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	200014c4 	.word	0x200014c4

080031ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b084      	sub	sp, #16
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031f4:	f7ff ffee 	bl	80031d4 <HAL_GetTick>
 80031f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003204:	d005      	beq.n	8003212 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003206:	4b0a      	ldr	r3, [pc, #40]	; (8003230 <HAL_Delay+0x44>)
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003212:	bf00      	nop
 8003214:	f7ff ffde 	bl	80031d4 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	429a      	cmp	r2, r3
 8003222:	d8f7      	bhi.n	8003214 <HAL_Delay+0x28>
  {
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3710      	adds	r7, #16
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	20000010 	.word	0x20000010

08003234 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800323c:	2300      	movs	r3, #0
 800323e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e033      	b.n	80032b2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324e:	2b00      	cmp	r3, #0
 8003250:	d109      	bne.n	8003266 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003252:	6878      	ldr	r0, [r7, #4]
 8003254:	f7ff fc16 	bl	8002a84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2200      	movs	r2, #0
 800325c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2200      	movs	r2, #0
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b00      	cmp	r3, #0
 8003270:	d118      	bne.n	80032a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800327a:	f023 0302 	bic.w	r3, r3, #2
 800327e:	f043 0202 	orr.w	r2, r3, #2
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 fc04 	bl	8003a94 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003296:	f023 0303 	bic.w	r3, r3, #3
 800329a:	f043 0201 	orr.w	r2, r3, #1
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	641a      	str	r2, [r3, #64]	; 0x40
 80032a2:	e001      	b.n	80032a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2200      	movs	r2, #0
 80032ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d101      	bne.n	80032d6 <HAL_ADC_Start+0x1a>
 80032d2:	2302      	movs	r3, #2
 80032d4:	e0b2      	b.n	800343c <HAL_ADC_Start+0x180>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2201      	movs	r2, #1
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f003 0301 	and.w	r3, r3, #1
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d018      	beq.n	800331e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f042 0201 	orr.w	r2, r2, #1
 80032fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032fc:	4b52      	ldr	r3, [pc, #328]	; (8003448 <HAL_ADC_Start+0x18c>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a52      	ldr	r2, [pc, #328]	; (800344c <HAL_ADC_Start+0x190>)
 8003302:	fba2 2303 	umull	r2, r3, r2, r3
 8003306:	0c9a      	lsrs	r2, r3, #18
 8003308:	4613      	mov	r3, r2
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	4413      	add	r3, r2
 800330e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003310:	e002      	b.n	8003318 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	3b01      	subs	r3, #1
 8003316:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d1f9      	bne.n	8003312 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b01      	cmp	r3, #1
 800332a:	d17a      	bne.n	8003422 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003334:	f023 0301 	bic.w	r3, r3, #1
 8003338:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800334a:	2b00      	cmp	r3, #0
 800334c:	d007      	beq.n	800335e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003352:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003356:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d106      	bne.n	800337a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003370:	f023 0206 	bic.w	r2, r3, #6
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	645a      	str	r2, [r3, #68]	; 0x44
 8003378:	e002      	b.n	8003380 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003388:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_ADC_Start+0x194>)
 800338a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003394:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	f003 031f 	and.w	r3, r3, #31
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d12a      	bne.n	80033f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a2b      	ldr	r2, [pc, #172]	; (8003454 <HAL_ADC_Start+0x198>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d015      	beq.n	80033d8 <HAL_ADC_Start+0x11c>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a29      	ldr	r2, [pc, #164]	; (8003458 <HAL_ADC_Start+0x19c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d105      	bne.n	80033c2 <HAL_ADC_Start+0x106>
 80033b6:	4b26      	ldr	r3, [pc, #152]	; (8003450 <HAL_ADC_Start+0x194>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d00a      	beq.n	80033d8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a25      	ldr	r2, [pc, #148]	; (800345c <HAL_ADC_Start+0x1a0>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d136      	bne.n	800343a <HAL_ADC_Start+0x17e>
 80033cc:	4b20      	ldr	r3, [pc, #128]	; (8003450 <HAL_ADC_Start+0x194>)
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f003 0310 	and.w	r3, r3, #16
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d130      	bne.n	800343a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d129      	bne.n	800343a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	e020      	b.n	800343a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a15      	ldr	r2, [pc, #84]	; (8003454 <HAL_ADC_Start+0x198>)
 80033fe:	4293      	cmp	r3, r2
 8003400:	d11b      	bne.n	800343a <HAL_ADC_Start+0x17e>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800340c:	2b00      	cmp	r3, #0
 800340e:	d114      	bne.n	800343a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689a      	ldr	r2, [r3, #8]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800341e:	609a      	str	r2, [r3, #8]
 8003420:	e00b      	b.n	800343a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003426:	f043 0210 	orr.w	r2, r3, #16
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003432:	f043 0201 	orr.w	r2, r3, #1
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800343a:	2300      	movs	r3, #0
}
 800343c:	4618      	mov	r0, r3
 800343e:	3714      	adds	r7, #20
 8003440:	46bd      	mov	sp, r7
 8003442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003446:	4770      	bx	lr
 8003448:	20000008 	.word	0x20000008
 800344c:	431bde83 	.word	0x431bde83
 8003450:	40012300 	.word	0x40012300
 8003454:	40012000 	.word	0x40012000
 8003458:	40012100 	.word	0x40012100
 800345c:	40012200 	.word	0x40012200

08003460 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800346a:	2300      	movs	r3, #0
 800346c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d113      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800348c:	d10b      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f043 0220 	orr.w	r2, r3, #32
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e063      	b.n	800356e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80034a6:	f7ff fe95 	bl	80031d4 <HAL_GetTick>
 80034aa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034ac:	e021      	b.n	80034f2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b4:	d01d      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_ADC_PollForConversion+0x6c>
 80034bc:	f7ff fe8a 	bl	80031d4 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	683a      	ldr	r2, [r7, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d212      	bcs.n	80034f2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f003 0302 	and.w	r3, r3, #2
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d00b      	beq.n	80034f2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e03d      	b.n	800356e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b02      	cmp	r3, #2
 80034fe:	d1d6      	bne.n	80034ae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0212 	mvn.w	r2, #18
 8003508:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003520:	2b00      	cmp	r3, #0
 8003522:	d123      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003528:	2b00      	cmp	r3, #0
 800352a:	d11f      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003536:	2b00      	cmp	r3, #0
 8003538:	d006      	beq.n	8003548 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003544:	2b00      	cmp	r3, #0
 8003546:	d111      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800355c:	2b00      	cmp	r3, #0
 800355e:	d105      	bne.n	800356c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003564:	f043 0201 	orr.w	r2, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8003576:	b580      	push	{r7, lr}
 8003578:	b084      	sub	sp, #16
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	2300      	movs	r3, #0
 8003584:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0302 	and.w	r3, r3, #2
 8003590:	2b02      	cmp	r3, #2
 8003592:	bf0c      	ite	eq
 8003594:	2301      	moveq	r3, #1
 8003596:	2300      	movne	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	f003 0320 	and.w	r3, r3, #32
 80035a6:	2b20      	cmp	r3, #32
 80035a8:	bf0c      	ite	eq
 80035aa:	2301      	moveq	r3, #1
 80035ac:	2300      	movne	r3, #0
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d049      	beq.n	800364c <HAL_ADC_IRQHandler+0xd6>
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d046      	beq.n	800364c <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c2:	f003 0310 	and.w	r3, r3, #16
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ce:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d12b      	bne.n	800363c <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d127      	bne.n	800363c <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d006      	beq.n	8003608 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003604:	2b00      	cmp	r3, #0
 8003606:	d119      	bne.n	800363c <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	685a      	ldr	r2, [r3, #4]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0220 	bic.w	r2, r2, #32
 8003616:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d105      	bne.n	800363c <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003634:	f043 0201 	orr.w	r2, r3, #1
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f8e8 	bl	8003812 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f06f 0212 	mvn.w	r2, #18
 800364a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f003 0304 	and.w	r3, r3, #4
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf0c      	ite	eq
 800365a:	2301      	moveq	r3, #1
 800365c:	2300      	movne	r3, #0
 800365e:	b2db      	uxtb	r3, r3
 8003660:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	685b      	ldr	r3, [r3, #4]
 8003668:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800366c:	2b80      	cmp	r3, #128	; 0x80
 800366e:	bf0c      	ite	eq
 8003670:	2301      	moveq	r3, #1
 8003672:	2300      	movne	r3, #0
 8003674:	b2db      	uxtb	r3, r3
 8003676:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d057      	beq.n	800372e <HAL_ADC_IRQHandler+0x1b8>
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d054      	beq.n	800372e <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003688:	f003 0310 	and.w	r3, r3, #16
 800368c:	2b00      	cmp	r3, #0
 800368e:	d105      	bne.n	800369c <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d139      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036b0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d12b      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d124      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689b      	ldr	r3, [r3, #8]
 80036da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d11d      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d119      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	685a      	ldr	r2, [r3, #4]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800370e:	2b00      	cmp	r3, #0
 8003710:	d105      	bne.n	800371e <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 fab4 	bl	8003c8c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f06f 020c 	mvn.w	r2, #12
 800372c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	bf0c      	ite	eq
 800373c:	2301      	moveq	r3, #1
 800373e:	2300      	movne	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800374e:	2b40      	cmp	r3, #64	; 0x40
 8003750:	bf0c      	ite	eq
 8003752:	2301      	moveq	r3, #1
 8003754:	2300      	movne	r3, #0
 8003756:	b2db      	uxtb	r3, r3
 8003758:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d017      	beq.n	8003790 <HAL_ADC_IRQHandler+0x21a>
 8003760:	68bb      	ldr	r3, [r7, #8]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d014      	beq.n	8003790 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b01      	cmp	r3, #1
 8003772:	d10d      	bne.n	8003790 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f850 	bl	8003826 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f06f 0201 	mvn.w	r2, #1
 800378e:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0320 	and.w	r3, r3, #32
 800379a:	2b20      	cmp	r3, #32
 800379c:	bf0c      	ite	eq
 800379e:	2301      	moveq	r3, #1
 80037a0:	2300      	movne	r3, #0
 80037a2:	b2db      	uxtb	r3, r3
 80037a4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037b4:	bf0c      	ite	eq
 80037b6:	2301      	moveq	r3, #1
 80037b8:	2300      	movne	r3, #0
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d015      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x27a>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d012      	beq.n	80037f0 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037ce:	f043 0202 	orr.w	r2, r3, #2
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f06f 0220 	mvn.w	r2, #32
 80037de:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 f82a 	bl	800383a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f06f 0220 	mvn.w	r2, #32
 80037ee:	601a      	str	r2, [r3, #0]
  }
}
 80037f0:	bf00      	nop
 80037f2:	3710      	adds	r7, #16
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003806:	4618      	mov	r0, r3
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800385a:	2300      	movs	r3, #0
 800385c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003864:	2b01      	cmp	r3, #1
 8003866:	d101      	bne.n	800386c <HAL_ADC_ConfigChannel+0x1c>
 8003868:	2302      	movs	r3, #2
 800386a:	e105      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x228>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2201      	movs	r2, #1
 8003870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2b09      	cmp	r3, #9
 800387a:	d925      	bls.n	80038c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68d9      	ldr	r1, [r3, #12]
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	b29b      	uxth	r3, r3
 8003888:	461a      	mov	r2, r3
 800388a:	4613      	mov	r3, r2
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	4413      	add	r3, r2
 8003890:	3b1e      	subs	r3, #30
 8003892:	2207      	movs	r2, #7
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43da      	mvns	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	400a      	ands	r2, r1
 80038a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68d9      	ldr	r1, [r3, #12]
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	4618      	mov	r0, r3
 80038b4:	4603      	mov	r3, r0
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	4403      	add	r3, r0
 80038ba:	3b1e      	subs	r3, #30
 80038bc:	409a      	lsls	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	60da      	str	r2, [r3, #12]
 80038c6:	e022      	b.n	800390e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6919      	ldr	r1, [r3, #16]
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	461a      	mov	r2, r3
 80038d6:	4613      	mov	r3, r2
 80038d8:	005b      	lsls	r3, r3, #1
 80038da:	4413      	add	r3, r2
 80038dc:	2207      	movs	r2, #7
 80038de:	fa02 f303 	lsl.w	r3, r2, r3
 80038e2:	43da      	mvns	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	400a      	ands	r2, r1
 80038ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6919      	ldr	r1, [r3, #16]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	689a      	ldr	r2, [r3, #8]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	b29b      	uxth	r3, r3
 80038fc:	4618      	mov	r0, r3
 80038fe:	4603      	mov	r3, r0
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	4403      	add	r3, r0
 8003904:	409a      	lsls	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	430a      	orrs	r2, r1
 800390c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	2b06      	cmp	r3, #6
 8003914:	d824      	bhi.n	8003960 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	4613      	mov	r3, r2
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	4413      	add	r3, r2
 8003926:	3b05      	subs	r3, #5
 8003928:	221f      	movs	r2, #31
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	43da      	mvns	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	400a      	ands	r2, r1
 8003936:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	b29b      	uxth	r3, r3
 8003944:	4618      	mov	r0, r3
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685a      	ldr	r2, [r3, #4]
 800394a:	4613      	mov	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	4413      	add	r3, r2
 8003950:	3b05      	subs	r3, #5
 8003952:	fa00 f203 	lsl.w	r2, r0, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	635a      	str	r2, [r3, #52]	; 0x34
 800395e:	e04c      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685b      	ldr	r3, [r3, #4]
 8003964:	2b0c      	cmp	r3, #12
 8003966:	d824      	bhi.n	80039b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	3b23      	subs	r3, #35	; 0x23
 800397a:	221f      	movs	r2, #31
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43da      	mvns	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	400a      	ands	r2, r1
 8003988:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	b29b      	uxth	r3, r3
 8003996:	4618      	mov	r0, r3
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	685a      	ldr	r2, [r3, #4]
 800399c:	4613      	mov	r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	4413      	add	r3, r2
 80039a2:	3b23      	subs	r3, #35	; 0x23
 80039a4:	fa00 f203 	lsl.w	r2, r0, r3
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	430a      	orrs	r2, r1
 80039ae:	631a      	str	r2, [r3, #48]	; 0x30
 80039b0:	e023      	b.n	80039fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685a      	ldr	r2, [r3, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	009b      	lsls	r3, r3, #2
 80039c0:	4413      	add	r3, r2
 80039c2:	3b41      	subs	r3, #65	; 0x41
 80039c4:	221f      	movs	r2, #31
 80039c6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ca:	43da      	mvns	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	400a      	ands	r2, r1
 80039d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	b29b      	uxth	r3, r3
 80039e0:	4618      	mov	r0, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	3b41      	subs	r3, #65	; 0x41
 80039ee:	fa00 f203 	lsl.w	r2, r0, r3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	430a      	orrs	r2, r1
 80039f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039fa:	4b22      	ldr	r3, [pc, #136]	; (8003a84 <HAL_ADC_ConfigChannel+0x234>)
 80039fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a21      	ldr	r2, [pc, #132]	; (8003a88 <HAL_ADC_ConfigChannel+0x238>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d109      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x1cc>
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	2b12      	cmp	r3, #18
 8003a0e:	d105      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a19      	ldr	r2, [pc, #100]	; (8003a88 <HAL_ADC_ConfigChannel+0x238>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d123      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x21e>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	2b10      	cmp	r3, #16
 8003a2c:	d003      	beq.n	8003a36 <HAL_ADC_ConfigChannel+0x1e6>
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	2b11      	cmp	r3, #17
 8003a34:	d11b      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d111      	bne.n	8003a6e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a4a:	4b10      	ldr	r3, [pc, #64]	; (8003a8c <HAL_ADC_ConfigChannel+0x23c>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a10      	ldr	r2, [pc, #64]	; (8003a90 <HAL_ADC_ConfigChannel+0x240>)
 8003a50:	fba2 2303 	umull	r2, r3, r2, r3
 8003a54:	0c9a      	lsrs	r2, r3, #18
 8003a56:	4613      	mov	r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4413      	add	r3, r2
 8003a5c:	005b      	lsls	r3, r3, #1
 8003a5e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a60:	e002      	b.n	8003a68 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	3b01      	subs	r3, #1
 8003a66:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f9      	bne.n	8003a62 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a76:	2300      	movs	r3, #0
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	3714      	adds	r7, #20
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr
 8003a84:	40012300 	.word	0x40012300
 8003a88:	40012000 	.word	0x40012000
 8003a8c:	20000008 	.word	0x20000008
 8003a90:	431bde83 	.word	0x431bde83

08003a94 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003a9c:	4b79      	ldr	r3, [pc, #484]	; (8003c84 <ADC_Init+0x1f0>)
 8003a9e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	431a      	orrs	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685a      	ldr	r2, [r3, #4]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ac8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	6859      	ldr	r1, [r3, #4]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	021a      	lsls	r2, r3, #8
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003aec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	6859      	ldr	r1, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b0e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	6899      	ldr	r1, [r3, #8]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	68da      	ldr	r2, [r3, #12]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b26:	4a58      	ldr	r2, [pc, #352]	; (8003c88 <ADC_Init+0x1f4>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d022      	beq.n	8003b72 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b3a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6899      	ldr	r1, [r3, #8]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	430a      	orrs	r2, r1
 8003b4c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b5c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	6899      	ldr	r1, [r3, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	e00f      	b.n	8003b92 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	689a      	ldr	r2, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b80:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	689a      	ldr	r2, [r3, #8]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b90:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0202 	bic.w	r2, r2, #2
 8003ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	6899      	ldr	r1, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	7e1b      	ldrb	r3, [r3, #24]
 8003bac:	005a      	lsls	r2, r3, #1
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d01b      	beq.n	8003bf8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	685a      	ldr	r2, [r3, #4]
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685a      	ldr	r2, [r3, #4]
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bde:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	6859      	ldr	r1, [r3, #4]
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	3b01      	subs	r3, #1
 8003bec:	035a      	lsls	r2, r3, #13
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	430a      	orrs	r2, r1
 8003bf4:	605a      	str	r2, [r3, #4]
 8003bf6:	e007      	b.n	8003c08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685a      	ldr	r2, [r3, #4]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	69db      	ldr	r3, [r3, #28]
 8003c22:	3b01      	subs	r3, #1
 8003c24:	051a      	lsls	r2, r3, #20
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	430a      	orrs	r2, r1
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689a      	ldr	r2, [r3, #8]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6899      	ldr	r1, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c4a:	025a      	lsls	r2, r3, #9
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	430a      	orrs	r2, r1
 8003c52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6899      	ldr	r1, [r3, #8]
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	029a      	lsls	r2, r3, #10
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	430a      	orrs	r2, r1
 8003c76:	609a      	str	r2, [r3, #8]
}
 8003c78:	bf00      	nop
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr
 8003c84:	40012300 	.word	0x40012300
 8003c88:	0f000001 	.word	0x0f000001

08003c8c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b083      	sub	sp, #12
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003c94:	bf00      	nop
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cb0:	4b0c      	ldr	r3, [pc, #48]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cc4:	68bb      	ldr	r3, [r7, #8]
 8003cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cd2:	4a04      	ldr	r2, [pc, #16]	; (8003ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	60d3      	str	r3, [r2, #12]
}
 8003cd8:	bf00      	nop
 8003cda:	3714      	adds	r7, #20
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr
 8003ce4:	e000ed00 	.word	0xe000ed00

08003ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cec:	4b04      	ldr	r3, [pc, #16]	; (8003d00 <__NVIC_GetPriorityGrouping+0x18>)
 8003cee:	68db      	ldr	r3, [r3, #12]
 8003cf0:	0a1b      	lsrs	r3, r3, #8
 8003cf2:	f003 0307 	and.w	r3, r3, #7
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	e000ed00 	.word	0xe000ed00

08003d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	db0b      	blt.n	8003d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	f003 021f 	and.w	r2, r3, #31
 8003d1c:	4907      	ldr	r1, [pc, #28]	; (8003d3c <__NVIC_EnableIRQ+0x38>)
 8003d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d22:	095b      	lsrs	r3, r3, #5
 8003d24:	2001      	movs	r0, #1
 8003d26:	fa00 f202 	lsl.w	r2, r0, r2
 8003d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr
 8003d3a:	bf00      	nop
 8003d3c:	e000e100 	.word	0xe000e100

08003d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b083      	sub	sp, #12
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	4603      	mov	r3, r0
 8003d48:	6039      	str	r1, [r7, #0]
 8003d4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	db0a      	blt.n	8003d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	b2da      	uxtb	r2, r3
 8003d58:	490c      	ldr	r1, [pc, #48]	; (8003d8c <__NVIC_SetPriority+0x4c>)
 8003d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d5e:	0112      	lsls	r2, r2, #4
 8003d60:	b2d2      	uxtb	r2, r2
 8003d62:	440b      	add	r3, r1
 8003d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d68:	e00a      	b.n	8003d80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	4908      	ldr	r1, [pc, #32]	; (8003d90 <__NVIC_SetPriority+0x50>)
 8003d70:	79fb      	ldrb	r3, [r7, #7]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	3b04      	subs	r3, #4
 8003d78:	0112      	lsls	r2, r2, #4
 8003d7a:	b2d2      	uxtb	r2, r2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	761a      	strb	r2, [r3, #24]
}
 8003d80:	bf00      	nop
 8003d82:	370c      	adds	r7, #12
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr
 8003d8c:	e000e100 	.word	0xe000e100
 8003d90:	e000ed00 	.word	0xe000ed00

08003d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b089      	sub	sp, #36	; 0x24
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	f1c3 0307 	rsb	r3, r3, #7
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	bf28      	it	cs
 8003db2:	2304      	movcs	r3, #4
 8003db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003db6:	69fb      	ldr	r3, [r7, #28]
 8003db8:	3304      	adds	r3, #4
 8003dba:	2b06      	cmp	r3, #6
 8003dbc:	d902      	bls.n	8003dc4 <NVIC_EncodePriority+0x30>
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	3b03      	subs	r3, #3
 8003dc2:	e000      	b.n	8003dc6 <NVIC_EncodePriority+0x32>
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43da      	mvns	r2, r3
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	401a      	ands	r2, r3
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	fa01 f303 	lsl.w	r3, r1, r3
 8003de6:	43d9      	mvns	r1, r3
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dec:	4313      	orrs	r3, r2
         );
}
 8003dee:	4618      	mov	r0, r3
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b082      	sub	sp, #8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	3b01      	subs	r3, #1
 8003e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e0c:	d301      	bcc.n	8003e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e00f      	b.n	8003e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e12:	4a0a      	ldr	r2, [pc, #40]	; (8003e3c <SysTick_Config+0x40>)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e1a:	210f      	movs	r1, #15
 8003e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e20:	f7ff ff8e 	bl	8003d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <SysTick_Config+0x40>)
 8003e26:	2200      	movs	r2, #0
 8003e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e2a:	4b04      	ldr	r3, [pc, #16]	; (8003e3c <SysTick_Config+0x40>)
 8003e2c:	2207      	movs	r2, #7
 8003e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e30:	2300      	movs	r3, #0
}
 8003e32:	4618      	mov	r0, r3
 8003e34:	3708      	adds	r7, #8
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bd80      	pop	{r7, pc}
 8003e3a:	bf00      	nop
 8003e3c:	e000e010 	.word	0xe000e010

08003e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003e48:	6878      	ldr	r0, [r7, #4]
 8003e4a:	f7ff ff29 	bl	8003ca0 <__NVIC_SetPriorityGrouping>
}
 8003e4e:	bf00      	nop
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}

08003e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003e56:	b580      	push	{r7, lr}
 8003e58:	b086      	sub	sp, #24
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	4603      	mov	r3, r0
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
 8003e62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e68:	f7ff ff3e 	bl	8003ce8 <__NVIC_GetPriorityGrouping>
 8003e6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	68b9      	ldr	r1, [r7, #8]
 8003e72:	6978      	ldr	r0, [r7, #20]
 8003e74:	f7ff ff8e 	bl	8003d94 <NVIC_EncodePriority>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e7e:	4611      	mov	r1, r2
 8003e80:	4618      	mov	r0, r3
 8003e82:	f7ff ff5d 	bl	8003d40 <__NVIC_SetPriority>
}
 8003e86:	bf00      	nop
 8003e88:	3718      	adds	r7, #24
 8003e8a:	46bd      	mov	sp, r7
 8003e8c:	bd80      	pop	{r7, pc}

08003e8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e8e:	b580      	push	{r7, lr}
 8003e90:	b082      	sub	sp, #8
 8003e92:	af00      	add	r7, sp, #0
 8003e94:	4603      	mov	r3, r0
 8003e96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7ff ff31 	bl	8003d04 <__NVIC_EnableIRQ>
}
 8003ea2:	bf00      	nop
 8003ea4:	3708      	adds	r7, #8
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	b082      	sub	sp, #8
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffa2 	bl	8003dfc <SysTick_Config>
 8003eb8:	4603      	mov	r3, r0
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3708      	adds	r7, #8
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}
	...

08003ec4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b089      	sub	sp, #36	; 0x24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	61fb      	str	r3, [r7, #28]
 8003ede:	e16b      	b.n	80041b8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ee0:	2201      	movs	r2, #1
 8003ee2:	69fb      	ldr	r3, [r7, #28]
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	4013      	ands	r3, r2
 8003ef2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ef4:	693a      	ldr	r2, [r7, #16]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	f040 815a 	bne.w	80041b2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f003 0303 	and.w	r3, r3, #3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d005      	beq.n	8003f16 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d130      	bne.n	8003f78 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689b      	ldr	r3, [r3, #8]
 8003f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	2203      	movs	r2, #3
 8003f22:	fa02 f303 	lsl.w	r3, r2, r3
 8003f26:	43db      	mvns	r3, r3
 8003f28:	69ba      	ldr	r2, [r7, #24]
 8003f2a:	4013      	ands	r3, r2
 8003f2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68da      	ldr	r2, [r3, #12]
 8003f32:	69fb      	ldr	r3, [r7, #28]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3a:	69ba      	ldr	r2, [r7, #24]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69ba      	ldr	r2, [r7, #24]
 8003f44:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	fa02 f303 	lsl.w	r3, r2, r3
 8003f54:	43db      	mvns	r3, r3
 8003f56:	69ba      	ldr	r2, [r7, #24]
 8003f58:	4013      	ands	r3, r2
 8003f5a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	685b      	ldr	r3, [r3, #4]
 8003f60:	091b      	lsrs	r3, r3, #4
 8003f62:	f003 0201 	and.w	r2, r3, #1
 8003f66:	69fb      	ldr	r3, [r7, #28]
 8003f68:	fa02 f303 	lsl.w	r3, r2, r3
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	69ba      	ldr	r2, [r7, #24]
 8003f76:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	685b      	ldr	r3, [r3, #4]
 8003f7c:	f003 0303 	and.w	r3, r3, #3
 8003f80:	2b03      	cmp	r3, #3
 8003f82:	d017      	beq.n	8003fb4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003f8a:	69fb      	ldr	r3, [r7, #28]
 8003f8c:	005b      	lsls	r3, r3, #1
 8003f8e:	2203      	movs	r2, #3
 8003f90:	fa02 f303 	lsl.w	r3, r2, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	4013      	ands	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	689a      	ldr	r2, [r3, #8]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa8:	69ba      	ldr	r2, [r7, #24]
 8003faa:	4313      	orrs	r3, r2
 8003fac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f003 0303 	and.w	r3, r3, #3
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d123      	bne.n	8004008 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	08da      	lsrs	r2, r3, #3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	3208      	adds	r2, #8
 8003fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	f003 0307 	and.w	r3, r3, #7
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	220f      	movs	r2, #15
 8003fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8003fdc:	43db      	mvns	r3, r3
 8003fde:	69ba      	ldr	r2, [r7, #24]
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	691a      	ldr	r2, [r3, #16]
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f003 0307 	and.w	r3, r3, #7
 8003fee:	009b      	lsls	r3, r3, #2
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	69ba      	ldr	r2, [r7, #24]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	08da      	lsrs	r2, r3, #3
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3208      	adds	r2, #8
 8004002:	69b9      	ldr	r1, [r7, #24]
 8004004:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800400e:	69fb      	ldr	r3, [r7, #28]
 8004010:	005b      	lsls	r3, r3, #1
 8004012:	2203      	movs	r2, #3
 8004014:	fa02 f303 	lsl.w	r3, r2, r3
 8004018:	43db      	mvns	r3, r3
 800401a:	69ba      	ldr	r2, [r7, #24]
 800401c:	4013      	ands	r3, r2
 800401e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	f003 0203 	and.w	r2, r3, #3
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	005b      	lsls	r3, r3, #1
 800402c:	fa02 f303 	lsl.w	r3, r2, r3
 8004030:	69ba      	ldr	r2, [r7, #24]
 8004032:	4313      	orrs	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	69ba      	ldr	r2, [r7, #24]
 800403a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004044:	2b00      	cmp	r3, #0
 8004046:	f000 80b4 	beq.w	80041b2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800404a:	2300      	movs	r3, #0
 800404c:	60fb      	str	r3, [r7, #12]
 800404e:	4b60      	ldr	r3, [pc, #384]	; (80041d0 <HAL_GPIO_Init+0x30c>)
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	4a5f      	ldr	r2, [pc, #380]	; (80041d0 <HAL_GPIO_Init+0x30c>)
 8004054:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004058:	6453      	str	r3, [r2, #68]	; 0x44
 800405a:	4b5d      	ldr	r3, [pc, #372]	; (80041d0 <HAL_GPIO_Init+0x30c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004062:	60fb      	str	r3, [r7, #12]
 8004064:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004066:	4a5b      	ldr	r2, [pc, #364]	; (80041d4 <HAL_GPIO_Init+0x310>)
 8004068:	69fb      	ldr	r3, [r7, #28]
 800406a:	089b      	lsrs	r3, r3, #2
 800406c:	3302      	adds	r3, #2
 800406e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004072:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	f003 0303 	and.w	r3, r3, #3
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	220f      	movs	r2, #15
 800407e:	fa02 f303 	lsl.w	r3, r2, r3
 8004082:	43db      	mvns	r3, r3
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	4013      	ands	r3, r2
 8004088:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a52      	ldr	r2, [pc, #328]	; (80041d8 <HAL_GPIO_Init+0x314>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d02b      	beq.n	80040ea <HAL_GPIO_Init+0x226>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a51      	ldr	r2, [pc, #324]	; (80041dc <HAL_GPIO_Init+0x318>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d025      	beq.n	80040e6 <HAL_GPIO_Init+0x222>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a50      	ldr	r2, [pc, #320]	; (80041e0 <HAL_GPIO_Init+0x31c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01f      	beq.n	80040e2 <HAL_GPIO_Init+0x21e>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a4f      	ldr	r2, [pc, #316]	; (80041e4 <HAL_GPIO_Init+0x320>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d019      	beq.n	80040de <HAL_GPIO_Init+0x21a>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a4e      	ldr	r2, [pc, #312]	; (80041e8 <HAL_GPIO_Init+0x324>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d013      	beq.n	80040da <HAL_GPIO_Init+0x216>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a4d      	ldr	r2, [pc, #308]	; (80041ec <HAL_GPIO_Init+0x328>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00d      	beq.n	80040d6 <HAL_GPIO_Init+0x212>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a4c      	ldr	r2, [pc, #304]	; (80041f0 <HAL_GPIO_Init+0x32c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <HAL_GPIO_Init+0x20e>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a4b      	ldr	r2, [pc, #300]	; (80041f4 <HAL_GPIO_Init+0x330>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d101      	bne.n	80040ce <HAL_GPIO_Init+0x20a>
 80040ca:	2307      	movs	r3, #7
 80040cc:	e00e      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040ce:	2308      	movs	r3, #8
 80040d0:	e00c      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040d2:	2306      	movs	r3, #6
 80040d4:	e00a      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040d6:	2305      	movs	r3, #5
 80040d8:	e008      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040da:	2304      	movs	r3, #4
 80040dc:	e006      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040de:	2303      	movs	r3, #3
 80040e0:	e004      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e002      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040e6:	2301      	movs	r3, #1
 80040e8:	e000      	b.n	80040ec <HAL_GPIO_Init+0x228>
 80040ea:	2300      	movs	r3, #0
 80040ec:	69fa      	ldr	r2, [r7, #28]
 80040ee:	f002 0203 	and.w	r2, r2, #3
 80040f2:	0092      	lsls	r2, r2, #2
 80040f4:	4093      	lsls	r3, r2
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80040fc:	4935      	ldr	r1, [pc, #212]	; (80041d4 <HAL_GPIO_Init+0x310>)
 80040fe:	69fb      	ldr	r3, [r7, #28]
 8004100:	089b      	lsrs	r3, r3, #2
 8004102:	3302      	adds	r3, #2
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800410a:	4b3b      	ldr	r3, [pc, #236]	; (80041f8 <HAL_GPIO_Init+0x334>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	43db      	mvns	r3, r3
 8004114:	69ba      	ldr	r2, [r7, #24]
 8004116:	4013      	ands	r3, r2
 8004118:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800411a:	683b      	ldr	r3, [r7, #0]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d003      	beq.n	800412e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004126:	69ba      	ldr	r2, [r7, #24]
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	4313      	orrs	r3, r2
 800412c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800412e:	4a32      	ldr	r2, [pc, #200]	; (80041f8 <HAL_GPIO_Init+0x334>)
 8004130:	69bb      	ldr	r3, [r7, #24]
 8004132:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004134:	4b30      	ldr	r3, [pc, #192]	; (80041f8 <HAL_GPIO_Init+0x334>)
 8004136:	685b      	ldr	r3, [r3, #4]
 8004138:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	43db      	mvns	r3, r3
 800413e:	69ba      	ldr	r2, [r7, #24]
 8004140:	4013      	ands	r3, r2
 8004142:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d003      	beq.n	8004158 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004150:	69ba      	ldr	r2, [r7, #24]
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004158:	4a27      	ldr	r2, [pc, #156]	; (80041f8 <HAL_GPIO_Init+0x334>)
 800415a:	69bb      	ldr	r3, [r7, #24]
 800415c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800415e:	4b26      	ldr	r3, [pc, #152]	; (80041f8 <HAL_GPIO_Init+0x334>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	43db      	mvns	r3, r3
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	4013      	ands	r3, r2
 800416c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004176:	2b00      	cmp	r3, #0
 8004178:	d003      	beq.n	8004182 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004182:	4a1d      	ldr	r2, [pc, #116]	; (80041f8 <HAL_GPIO_Init+0x334>)
 8004184:	69bb      	ldr	r3, [r7, #24]
 8004186:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004188:	4b1b      	ldr	r3, [pc, #108]	; (80041f8 <HAL_GPIO_Init+0x334>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	43db      	mvns	r3, r3
 8004192:	69ba      	ldr	r2, [r7, #24]
 8004194:	4013      	ands	r3, r2
 8004196:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d003      	beq.n	80041ac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80041a4:	69ba      	ldr	r2, [r7, #24]
 80041a6:	693b      	ldr	r3, [r7, #16]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80041ac:	4a12      	ldr	r2, [pc, #72]	; (80041f8 <HAL_GPIO_Init+0x334>)
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	2b0f      	cmp	r3, #15
 80041bc:	f67f ae90 	bls.w	8003ee0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3724      	adds	r7, #36	; 0x24
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800
 80041d4:	40013800 	.word	0x40013800
 80041d8:	40020000 	.word	0x40020000
 80041dc:	40020400 	.word	0x40020400
 80041e0:	40020800 	.word	0x40020800
 80041e4:	40020c00 	.word	0x40020c00
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40021400 	.word	0x40021400
 80041f0:	40021800 	.word	0x40021800
 80041f4:	40021c00 	.word	0x40021c00
 80041f8:	40013c00 	.word	0x40013c00

080041fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	807b      	strh	r3, [r7, #2]
 8004208:	4613      	mov	r3, r2
 800420a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800420c:	787b      	ldrb	r3, [r7, #1]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d003      	beq.n	800421a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004212:	887a      	ldrh	r2, [r7, #2]
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004218:	e003      	b.n	8004222 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	041a      	lsls	r2, r3, #16
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	619a      	str	r2, [r3, #24]
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
	...

08004230 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e264      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0301 	and.w	r3, r3, #1
 800424a:	2b00      	cmp	r3, #0
 800424c:	d075      	beq.n	800433a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800424e:	4ba3      	ldr	r3, [pc, #652]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004250:	689b      	ldr	r3, [r3, #8]
 8004252:	f003 030c 	and.w	r3, r3, #12
 8004256:	2b04      	cmp	r3, #4
 8004258:	d00c      	beq.n	8004274 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800425a:	4ba0      	ldr	r3, [pc, #640]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004262:	2b08      	cmp	r3, #8
 8004264:	d112      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004266:	4b9d      	ldr	r3, [pc, #628]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004268:	685b      	ldr	r3, [r3, #4]
 800426a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800426e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004272:	d10b      	bne.n	800428c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004274:	4b99      	ldr	r3, [pc, #612]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <HAL_RCC_OscConfig+0x108>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d157      	bne.n	8004338 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e23f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004294:	d106      	bne.n	80042a4 <HAL_RCC_OscConfig+0x74>
 8004296:	4b91      	ldr	r3, [pc, #580]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a90      	ldr	r2, [pc, #576]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800429c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a0:	6013      	str	r3, [r2, #0]
 80042a2:	e01d      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ac:	d10c      	bne.n	80042c8 <HAL_RCC_OscConfig+0x98>
 80042ae:	4b8b      	ldr	r3, [pc, #556]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a8a      	ldr	r2, [pc, #552]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	4b88      	ldr	r3, [pc, #544]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	4a87      	ldr	r2, [pc, #540]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042c4:	6013      	str	r3, [r2, #0]
 80042c6:	e00b      	b.n	80042e0 <HAL_RCC_OscConfig+0xb0>
 80042c8:	4b84      	ldr	r3, [pc, #528]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a83      	ldr	r2, [pc, #524]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80042d2:	6013      	str	r3, [r2, #0]
 80042d4:	4b81      	ldr	r3, [pc, #516]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a80      	ldr	r2, [pc, #512]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80042da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80042de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d013      	beq.n	8004310 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042e8:	f7fe ff74 	bl	80031d4 <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042f0:	f7fe ff70 	bl	80031d4 <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b64      	cmp	r3, #100	; 0x64
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e204      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004302:	4b76      	ldr	r3, [pc, #472]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0xc0>
 800430e:	e014      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004310:	f7fe ff60 	bl	80031d4 <HAL_GetTick>
 8004314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004316:	e008      	b.n	800432a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004318:	f7fe ff5c 	bl	80031d4 <HAL_GetTick>
 800431c:	4602      	mov	r2, r0
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	1ad3      	subs	r3, r2, r3
 8004322:	2b64      	cmp	r3, #100	; 0x64
 8004324:	d901      	bls.n	800432a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e1f0      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800432a:	4b6c      	ldr	r3, [pc, #432]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d1f0      	bne.n	8004318 <HAL_RCC_OscConfig+0xe8>
 8004336:	e000      	b.n	800433a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004338:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0302 	and.w	r3, r3, #2
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004346:	4b65      	ldr	r3, [pc, #404]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	f003 030c 	and.w	r3, r3, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	d00b      	beq.n	800436a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004352:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800435a:	2b08      	cmp	r3, #8
 800435c:	d11c      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800435e:	4b5f      	ldr	r3, [pc, #380]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004366:	2b00      	cmp	r3, #0
 8004368:	d116      	bne.n	8004398 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800436a:	4b5c      	ldr	r3, [pc, #368]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f003 0302 	and.w	r3, r3, #2
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	68db      	ldr	r3, [r3, #12]
 800437a:	2b01      	cmp	r3, #1
 800437c:	d001      	beq.n	8004382 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1c4      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004382:	4b56      	ldr	r3, [pc, #344]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	00db      	lsls	r3, r3, #3
 8004390:	4952      	ldr	r1, [pc, #328]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004392:	4313      	orrs	r3, r2
 8004394:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004396:	e03a      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d020      	beq.n	80043e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043a0:	4b4f      	ldr	r3, [pc, #316]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043a2:	2201      	movs	r2, #1
 80043a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a6:	f7fe ff15 	bl	80031d4 <HAL_GetTick>
 80043aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ac:	e008      	b.n	80043c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ae:	f7fe ff11 	bl	80031d4 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d901      	bls.n	80043c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80043bc:	2303      	movs	r3, #3
 80043be:	e1a5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c0:	4b46      	ldr	r3, [pc, #280]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f003 0302 	and.w	r3, r3, #2
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d0f0      	beq.n	80043ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043cc:	4b43      	ldr	r3, [pc, #268]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	691b      	ldr	r3, [r3, #16]
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4940      	ldr	r1, [pc, #256]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80043dc:	4313      	orrs	r3, r2
 80043de:	600b      	str	r3, [r1, #0]
 80043e0:	e015      	b.n	800440e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80043e2:	4b3f      	ldr	r3, [pc, #252]	; (80044e0 <HAL_RCC_OscConfig+0x2b0>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043e8:	f7fe fef4 	bl	80031d4 <HAL_GetTick>
 80043ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043ee:	e008      	b.n	8004402 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043f0:	f7fe fef0 	bl	80031d4 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	693b      	ldr	r3, [r7, #16]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d901      	bls.n	8004402 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	e184      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004402:	4b36      	ldr	r3, [pc, #216]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f003 0302 	and.w	r3, r3, #2
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f0      	bne.n	80043f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d030      	beq.n	800447c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	695b      	ldr	r3, [r3, #20]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d016      	beq.n	8004450 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004422:	4b30      	ldr	r3, [pc, #192]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004424:	2201      	movs	r2, #1
 8004426:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004428:	f7fe fed4 	bl	80031d4 <HAL_GetTick>
 800442c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800442e:	e008      	b.n	8004442 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004430:	f7fe fed0 	bl	80031d4 <HAL_GetTick>
 8004434:	4602      	mov	r2, r0
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	1ad3      	subs	r3, r2, r3
 800443a:	2b02      	cmp	r3, #2
 800443c:	d901      	bls.n	8004442 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800443e:	2303      	movs	r3, #3
 8004440:	e164      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004442:	4b26      	ldr	r3, [pc, #152]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004446:	f003 0302 	and.w	r3, r3, #2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0f0      	beq.n	8004430 <HAL_RCC_OscConfig+0x200>
 800444e:	e015      	b.n	800447c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004450:	4b24      	ldr	r3, [pc, #144]	; (80044e4 <HAL_RCC_OscConfig+0x2b4>)
 8004452:	2200      	movs	r2, #0
 8004454:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004456:	f7fe febd 	bl	80031d4 <HAL_GetTick>
 800445a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800445c:	e008      	b.n	8004470 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800445e:	f7fe feb9 	bl	80031d4 <HAL_GetTick>
 8004462:	4602      	mov	r2, r0
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	1ad3      	subs	r3, r2, r3
 8004468:	2b02      	cmp	r3, #2
 800446a:	d901      	bls.n	8004470 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800446c:	2303      	movs	r3, #3
 800446e:	e14d      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004470:	4b1a      	ldr	r3, [pc, #104]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004474:	f003 0302 	and.w	r3, r3, #2
 8004478:	2b00      	cmp	r3, #0
 800447a:	d1f0      	bne.n	800445e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 0304 	and.w	r3, r3, #4
 8004484:	2b00      	cmp	r3, #0
 8004486:	f000 80a0 	beq.w	80045ca <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800448a:	2300      	movs	r3, #0
 800448c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800448e:	4b13      	ldr	r3, [pc, #76]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 8004490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d10f      	bne.n	80044ba <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800449a:	2300      	movs	r3, #0
 800449c:	60bb      	str	r3, [r7, #8]
 800449e:	4b0f      	ldr	r3, [pc, #60]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	4a0e      	ldr	r2, [pc, #56]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044a8:	6413      	str	r3, [r2, #64]	; 0x40
 80044aa:	4b0c      	ldr	r3, [pc, #48]	; (80044dc <HAL_RCC_OscConfig+0x2ac>)
 80044ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044b2:	60bb      	str	r3, [r7, #8]
 80044b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044b6:	2301      	movs	r3, #1
 80044b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ba:	4b0b      	ldr	r3, [pc, #44]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d121      	bne.n	800450a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044c6:	4b08      	ldr	r3, [pc, #32]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a07      	ldr	r2, [pc, #28]	; (80044e8 <HAL_RCC_OscConfig+0x2b8>)
 80044cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044d2:	f7fe fe7f 	bl	80031d4 <HAL_GetTick>
 80044d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044d8:	e011      	b.n	80044fe <HAL_RCC_OscConfig+0x2ce>
 80044da:	bf00      	nop
 80044dc:	40023800 	.word	0x40023800
 80044e0:	42470000 	.word	0x42470000
 80044e4:	42470e80 	.word	0x42470e80
 80044e8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fe fe72 	bl	80031d4 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b02      	cmp	r3, #2
 80044f8:	d901      	bls.n	80044fe <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e106      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b85      	ldr	r3, [pc, #532]	; (8004714 <HAL_RCC_OscConfig+0x4e4>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d106      	bne.n	8004520 <HAL_RCC_OscConfig+0x2f0>
 8004512:	4b81      	ldr	r3, [pc, #516]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004516:	4a80      	ldr	r2, [pc, #512]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004518:	f043 0301 	orr.w	r3, r3, #1
 800451c:	6713      	str	r3, [r2, #112]	; 0x70
 800451e:	e01c      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d10c      	bne.n	8004542 <HAL_RCC_OscConfig+0x312>
 8004528:	4b7b      	ldr	r3, [pc, #492]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800452c:	4a7a      	ldr	r2, [pc, #488]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800452e:	f043 0304 	orr.w	r3, r3, #4
 8004532:	6713      	str	r3, [r2, #112]	; 0x70
 8004534:	4b78      	ldr	r3, [pc, #480]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004538:	4a77      	ldr	r2, [pc, #476]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	f043 0301 	orr.w	r3, r3, #1
 800453e:	6713      	str	r3, [r2, #112]	; 0x70
 8004540:	e00b      	b.n	800455a <HAL_RCC_OscConfig+0x32a>
 8004542:	4b75      	ldr	r3, [pc, #468]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004546:	4a74      	ldr	r2, [pc, #464]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004548:	f023 0301 	bic.w	r3, r3, #1
 800454c:	6713      	str	r3, [r2, #112]	; 0x70
 800454e:	4b72      	ldr	r3, [pc, #456]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004552:	4a71      	ldr	r2, [pc, #452]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	f023 0304 	bic.w	r3, r3, #4
 8004558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d015      	beq.n	800458e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004562:	f7fe fe37 	bl	80031d4 <HAL_GetTick>
 8004566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004568:	e00a      	b.n	8004580 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800456a:	f7fe fe33 	bl	80031d4 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	f241 3288 	movw	r2, #5000	; 0x1388
 8004578:	4293      	cmp	r3, r2
 800457a:	d901      	bls.n	8004580 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800457c:	2303      	movs	r3, #3
 800457e:	e0c5      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004580:	4b65      	ldr	r3, [pc, #404]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004584:	f003 0302 	and.w	r3, r3, #2
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ee      	beq.n	800456a <HAL_RCC_OscConfig+0x33a>
 800458c:	e014      	b.n	80045b8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800458e:	f7fe fe21 	bl	80031d4 <HAL_GetTick>
 8004592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004594:	e00a      	b.n	80045ac <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004596:	f7fe fe1d 	bl	80031d4 <HAL_GetTick>
 800459a:	4602      	mov	r2, r0
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	1ad3      	subs	r3, r2, r3
 80045a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d901      	bls.n	80045ac <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80045a8:	2303      	movs	r3, #3
 80045aa:	e0af      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80045ac:	4b5a      	ldr	r3, [pc, #360]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d1ee      	bne.n	8004596 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80045b8:	7dfb      	ldrb	r3, [r7, #23]
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d105      	bne.n	80045ca <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80045be:	4b56      	ldr	r3, [pc, #344]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c2:	4a55      	ldr	r2, [pc, #340]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80045c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	f000 809b 	beq.w	800470a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80045d4:	4b50      	ldr	r3, [pc, #320]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	f003 030c 	and.w	r3, r3, #12
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d05c      	beq.n	800469a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d141      	bne.n	800466c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045e8:	4b4c      	ldr	r3, [pc, #304]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 80045ea:	2200      	movs	r2, #0
 80045ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ee:	f7fe fdf1 	bl	80031d4 <HAL_GetTick>
 80045f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045f4:	e008      	b.n	8004608 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045f6:	f7fe fded 	bl	80031d4 <HAL_GetTick>
 80045fa:	4602      	mov	r2, r0
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	1ad3      	subs	r3, r2, r3
 8004600:	2b02      	cmp	r3, #2
 8004602:	d901      	bls.n	8004608 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004604:	2303      	movs	r3, #3
 8004606:	e081      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004608:	4b43      	ldr	r3, [pc, #268]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f0      	bne.n	80045f6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	69da      	ldr	r2, [r3, #28]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6a1b      	ldr	r3, [r3, #32]
 800461c:	431a      	orrs	r2, r3
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	019b      	lsls	r3, r3, #6
 8004624:	431a      	orrs	r2, r3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462a:	085b      	lsrs	r3, r3, #1
 800462c:	3b01      	subs	r3, #1
 800462e:	041b      	lsls	r3, r3, #16
 8004630:	431a      	orrs	r2, r3
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004636:	061b      	lsls	r3, r3, #24
 8004638:	4937      	ldr	r1, [pc, #220]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800463a:	4313      	orrs	r3, r2
 800463c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800463e:	4b37      	ldr	r3, [pc, #220]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004644:	f7fe fdc6 	bl	80031d4 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800464c:	f7fe fdc2 	bl	80031d4 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e056      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x41c>
 800466a:	e04e      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800466c:	4b2b      	ldr	r3, [pc, #172]	; (800471c <HAL_RCC_OscConfig+0x4ec>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004672:	f7fe fdaf 	bl	80031d4 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004678:	e008      	b.n	800468c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800467a:	f7fe fdab 	bl	80031d4 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d901      	bls.n	800468c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e03f      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800468c:	4b22      	ldr	r3, [pc, #136]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004694:	2b00      	cmp	r3, #0
 8004696:	d1f0      	bne.n	800467a <HAL_RCC_OscConfig+0x44a>
 8004698:	e037      	b.n	800470a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d101      	bne.n	80046a6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e032      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80046a6:	4b1c      	ldr	r3, [pc, #112]	; (8004718 <HAL_RCC_OscConfig+0x4e8>)
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d028      	beq.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80046be:	429a      	cmp	r2, r3
 80046c0:	d121      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d11a      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046d0:	68fa      	ldr	r2, [r7, #12]
 80046d2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80046d6:	4013      	ands	r3, r2
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046dc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046de:	4293      	cmp	r3, r2
 80046e0:	d111      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ec:	085b      	lsrs	r3, r3, #1
 80046ee:	3b01      	subs	r3, #1
 80046f0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d107      	bne.n	8004706 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004702:	429a      	cmp	r2, r3
 8004704:	d001      	beq.n	800470a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e000      	b.n	800470c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800470a:	2300      	movs	r3, #0
}
 800470c:	4618      	mov	r0, r3
 800470e:	3718      	adds	r7, #24
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	40007000 	.word	0x40007000
 8004718:	40023800 	.word	0x40023800
 800471c:	42470060 	.word	0x42470060

08004720 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b084      	sub	sp, #16
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
 8004728:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d101      	bne.n	8004734 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e0cc      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004734:	4b68      	ldr	r3, [pc, #416]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f003 0307 	and.w	r3, r3, #7
 800473c:	683a      	ldr	r2, [r7, #0]
 800473e:	429a      	cmp	r2, r3
 8004740:	d90c      	bls.n	800475c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004742:	4b65      	ldr	r3, [pc, #404]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004744:	683a      	ldr	r2, [r7, #0]
 8004746:	b2d2      	uxtb	r2, r2
 8004748:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	683a      	ldr	r2, [r7, #0]
 8004754:	429a      	cmp	r2, r3
 8004756:	d001      	beq.n	800475c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004758:	2301      	movs	r3, #1
 800475a:	e0b8      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d020      	beq.n	80047aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d005      	beq.n	8004780 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004774:	4b59      	ldr	r3, [pc, #356]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	4a58      	ldr	r2, [pc, #352]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800477a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800477e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0308 	and.w	r3, r3, #8
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800478c:	4b53      	ldr	r3, [pc, #332]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	4a52      	ldr	r2, [pc, #328]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004792:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004796:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004798:	4b50      	ldr	r3, [pc, #320]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	494d      	ldr	r1, [pc, #308]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047a6:	4313      	orrs	r3, r2
 80047a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d044      	beq.n	8004840 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d107      	bne.n	80047ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047be:	4b47      	ldr	r3, [pc, #284]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d119      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e07f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d003      	beq.n	80047de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80047da:	2b03      	cmp	r3, #3
 80047dc:	d107      	bne.n	80047ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047de:	4b3f      	ldr	r3, [pc, #252]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d109      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ee:	4b3b      	ldr	r3, [pc, #236]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f003 0302 	and.w	r3, r3, #2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d101      	bne.n	80047fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e067      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047fe:	4b37      	ldr	r3, [pc, #220]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004800:	689b      	ldr	r3, [r3, #8]
 8004802:	f023 0203 	bic.w	r2, r3, #3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	4934      	ldr	r1, [pc, #208]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 800480c:	4313      	orrs	r3, r2
 800480e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004810:	f7fe fce0 	bl	80031d4 <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004816:	e00a      	b.n	800482e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004818:	f7fe fcdc 	bl	80031d4 <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	f241 3288 	movw	r2, #5000	; 0x1388
 8004826:	4293      	cmp	r3, r2
 8004828:	d901      	bls.n	800482e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e04f      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800482e:	4b2b      	ldr	r3, [pc, #172]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f003 020c 	and.w	r2, r3, #12
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	429a      	cmp	r2, r3
 800483e:	d1eb      	bne.n	8004818 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004840:	4b25      	ldr	r3, [pc, #148]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0307 	and.w	r3, r3, #7
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d20c      	bcs.n	8004868 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800484e:	4b22      	ldr	r3, [pc, #136]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004850:	683a      	ldr	r2, [r7, #0]
 8004852:	b2d2      	uxtb	r2, r2
 8004854:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004856:	4b20      	ldr	r3, [pc, #128]	; (80048d8 <HAL_RCC_ClockConfig+0x1b8>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	683a      	ldr	r2, [r7, #0]
 8004860:	429a      	cmp	r2, r3
 8004862:	d001      	beq.n	8004868 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e032      	b.n	80048ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b00      	cmp	r3, #0
 8004872:	d008      	beq.n	8004886 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004874:	4b19      	ldr	r3, [pc, #100]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004876:	689b      	ldr	r3, [r3, #8]
 8004878:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	4916      	ldr	r1, [pc, #88]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 0308 	and.w	r3, r3, #8
 800488e:	2b00      	cmp	r3, #0
 8004890:	d009      	beq.n	80048a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004892:	4b12      	ldr	r3, [pc, #72]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	00db      	lsls	r3, r3, #3
 80048a0:	490e      	ldr	r1, [pc, #56]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80048a6:	f000 f821 	bl	80048ec <HAL_RCC_GetSysClockFreq>
 80048aa:	4602      	mov	r2, r0
 80048ac:	4b0b      	ldr	r3, [pc, #44]	; (80048dc <HAL_RCC_ClockConfig+0x1bc>)
 80048ae:	689b      	ldr	r3, [r3, #8]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 030f 	and.w	r3, r3, #15
 80048b6:	490a      	ldr	r1, [pc, #40]	; (80048e0 <HAL_RCC_ClockConfig+0x1c0>)
 80048b8:	5ccb      	ldrb	r3, [r1, r3]
 80048ba:	fa22 f303 	lsr.w	r3, r2, r3
 80048be:	4a09      	ldr	r2, [pc, #36]	; (80048e4 <HAL_RCC_ClockConfig+0x1c4>)
 80048c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80048c2:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <HAL_RCC_ClockConfig+0x1c8>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7fe fc40 	bl	800314c <HAL_InitTick>

  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3710      	adds	r7, #16
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	40023c00 	.word	0x40023c00
 80048dc:	40023800 	.word	0x40023800
 80048e0:	080073e4 	.word	0x080073e4
 80048e4:	20000008 	.word	0x20000008
 80048e8:	2000000c 	.word	0x2000000c

080048ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048ec:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048f4:	2300      	movs	r3, #0
 80048f6:	607b      	str	r3, [r7, #4]
 80048f8:	2300      	movs	r3, #0
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	2300      	movs	r3, #0
 80048fe:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004900:	2300      	movs	r3, #0
 8004902:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004904:	4b67      	ldr	r3, [pc, #412]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f003 030c 	and.w	r3, r3, #12
 800490c:	2b08      	cmp	r3, #8
 800490e:	d00d      	beq.n	800492c <HAL_RCC_GetSysClockFreq+0x40>
 8004910:	2b08      	cmp	r3, #8
 8004912:	f200 80bd 	bhi.w	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_RCC_GetSysClockFreq+0x34>
 800491a:	2b04      	cmp	r3, #4
 800491c:	d003      	beq.n	8004926 <HAL_RCC_GetSysClockFreq+0x3a>
 800491e:	e0b7      	b.n	8004a90 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004920:	4b61      	ldr	r3, [pc, #388]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004922:	60bb      	str	r3, [r7, #8]
       break;
 8004924:	e0b7      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004926:	4b61      	ldr	r3, [pc, #388]	; (8004aac <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004928:	60bb      	str	r3, [r7, #8]
      break;
 800492a:	e0b4      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800492c:	4b5d      	ldr	r3, [pc, #372]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800492e:	685b      	ldr	r3, [r3, #4]
 8004930:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004934:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004936:	4b5b      	ldr	r3, [pc, #364]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d04d      	beq.n	80049de <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004942:	4b58      	ldr	r3, [pc, #352]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	099b      	lsrs	r3, r3, #6
 8004948:	461a      	mov	r2, r3
 800494a:	f04f 0300 	mov.w	r3, #0
 800494e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004952:	f04f 0100 	mov.w	r1, #0
 8004956:	ea02 0800 	and.w	r8, r2, r0
 800495a:	ea03 0901 	and.w	r9, r3, r1
 800495e:	4640      	mov	r0, r8
 8004960:	4649      	mov	r1, r9
 8004962:	f04f 0200 	mov.w	r2, #0
 8004966:	f04f 0300 	mov.w	r3, #0
 800496a:	014b      	lsls	r3, r1, #5
 800496c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004970:	0142      	lsls	r2, r0, #5
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	ebb0 0008 	subs.w	r0, r0, r8
 800497a:	eb61 0109 	sbc.w	r1, r1, r9
 800497e:	f04f 0200 	mov.w	r2, #0
 8004982:	f04f 0300 	mov.w	r3, #0
 8004986:	018b      	lsls	r3, r1, #6
 8004988:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800498c:	0182      	lsls	r2, r0, #6
 800498e:	1a12      	subs	r2, r2, r0
 8004990:	eb63 0301 	sbc.w	r3, r3, r1
 8004994:	f04f 0000 	mov.w	r0, #0
 8004998:	f04f 0100 	mov.w	r1, #0
 800499c:	00d9      	lsls	r1, r3, #3
 800499e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80049a2:	00d0      	lsls	r0, r2, #3
 80049a4:	4602      	mov	r2, r0
 80049a6:	460b      	mov	r3, r1
 80049a8:	eb12 0208 	adds.w	r2, r2, r8
 80049ac:	eb43 0309 	adc.w	r3, r3, r9
 80049b0:	f04f 0000 	mov.w	r0, #0
 80049b4:	f04f 0100 	mov.w	r1, #0
 80049b8:	0259      	lsls	r1, r3, #9
 80049ba:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80049be:	0250      	lsls	r0, r2, #9
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4610      	mov	r0, r2
 80049c6:	4619      	mov	r1, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	461a      	mov	r2, r3
 80049cc:	f04f 0300 	mov.w	r3, #0
 80049d0:	f7fb ffa4 	bl	800091c <__aeabi_uldivmod>
 80049d4:	4602      	mov	r2, r0
 80049d6:	460b      	mov	r3, r1
 80049d8:	4613      	mov	r3, r2
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e04a      	b.n	8004a74 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049de:	4b31      	ldr	r3, [pc, #196]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	099b      	lsrs	r3, r3, #6
 80049e4:	461a      	mov	r2, r3
 80049e6:	f04f 0300 	mov.w	r3, #0
 80049ea:	f240 10ff 	movw	r0, #511	; 0x1ff
 80049ee:	f04f 0100 	mov.w	r1, #0
 80049f2:	ea02 0400 	and.w	r4, r2, r0
 80049f6:	ea03 0501 	and.w	r5, r3, r1
 80049fa:	4620      	mov	r0, r4
 80049fc:	4629      	mov	r1, r5
 80049fe:	f04f 0200 	mov.w	r2, #0
 8004a02:	f04f 0300 	mov.w	r3, #0
 8004a06:	014b      	lsls	r3, r1, #5
 8004a08:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004a0c:	0142      	lsls	r2, r0, #5
 8004a0e:	4610      	mov	r0, r2
 8004a10:	4619      	mov	r1, r3
 8004a12:	1b00      	subs	r0, r0, r4
 8004a14:	eb61 0105 	sbc.w	r1, r1, r5
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	018b      	lsls	r3, r1, #6
 8004a22:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004a26:	0182      	lsls	r2, r0, #6
 8004a28:	1a12      	subs	r2, r2, r0
 8004a2a:	eb63 0301 	sbc.w	r3, r3, r1
 8004a2e:	f04f 0000 	mov.w	r0, #0
 8004a32:	f04f 0100 	mov.w	r1, #0
 8004a36:	00d9      	lsls	r1, r3, #3
 8004a38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a3c:	00d0      	lsls	r0, r2, #3
 8004a3e:	4602      	mov	r2, r0
 8004a40:	460b      	mov	r3, r1
 8004a42:	1912      	adds	r2, r2, r4
 8004a44:	eb45 0303 	adc.w	r3, r5, r3
 8004a48:	f04f 0000 	mov.w	r0, #0
 8004a4c:	f04f 0100 	mov.w	r1, #0
 8004a50:	0299      	lsls	r1, r3, #10
 8004a52:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004a56:	0290      	lsls	r0, r2, #10
 8004a58:	4602      	mov	r2, r0
 8004a5a:	460b      	mov	r3, r1
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	461a      	mov	r2, r3
 8004a64:	f04f 0300 	mov.w	r3, #0
 8004a68:	f7fb ff58 	bl	800091c <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4613      	mov	r3, r2
 8004a72:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a74:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	0c1b      	lsrs	r3, r3, #16
 8004a7a:	f003 0303 	and.w	r3, r3, #3
 8004a7e:	3301      	adds	r3, #1
 8004a80:	005b      	lsls	r3, r3, #1
 8004a82:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	60bb      	str	r3, [r7, #8]
      break;
 8004a8e:	e002      	b.n	8004a96 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a90:	4b05      	ldr	r3, [pc, #20]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a92:	60bb      	str	r3, [r7, #8]
      break;
 8004a94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a96:	68bb      	ldr	r3, [r7, #8]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004aa2:	bf00      	nop
 8004aa4:	40023800 	.word	0x40023800
 8004aa8:	00f42400 	.word	0x00f42400
 8004aac:	007a1200 	.word	0x007a1200

08004ab0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab0:	b480      	push	{r7}
 8004ab2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab4:	4b03      	ldr	r3, [pc, #12]	; (8004ac4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	4618      	mov	r0, r3
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	20000008 	.word	0x20000008

08004ac8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004acc:	f7ff fff0 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004ad0:	4602      	mov	r2, r0
 8004ad2:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	0a9b      	lsrs	r3, r3, #10
 8004ad8:	f003 0307 	and.w	r3, r3, #7
 8004adc:	4903      	ldr	r1, [pc, #12]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ade:	5ccb      	ldrb	r3, [r1, r3]
 8004ae0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	bd80      	pop	{r7, pc}
 8004ae8:	40023800 	.word	0x40023800
 8004aec:	080073f4 	.word	0x080073f4

08004af0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004af4:	f7ff ffdc 	bl	8004ab0 <HAL_RCC_GetHCLKFreq>
 8004af8:	4602      	mov	r2, r0
 8004afa:	4b05      	ldr	r3, [pc, #20]	; (8004b10 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	0b5b      	lsrs	r3, r3, #13
 8004b00:	f003 0307 	and.w	r3, r3, #7
 8004b04:	4903      	ldr	r1, [pc, #12]	; (8004b14 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004b06:	5ccb      	ldrb	r3, [r1, r3]
 8004b08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	40023800 	.word	0x40023800
 8004b14:	080073f4 	.word	0x080073f4

08004b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d101      	bne.n	8004b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e041      	b.n	8004bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b30:	b2db      	uxtb	r3, r3
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d106      	bne.n	8004b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004b3e:	6878      	ldr	r0, [r7, #4]
 8004b40:	f7fe f876 	bl	8002c30 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2202      	movs	r2, #2
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	3304      	adds	r3, #4
 8004b54:	4619      	mov	r1, r3
 8004b56:	4610      	mov	r0, r2
 8004b58:	f000 fe9a 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2201      	movs	r2, #1
 8004b70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2201      	movs	r2, #1
 8004b78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2201      	movs	r2, #1
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2201      	movs	r2, #1
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2201      	movs	r2, #1
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004bac:	2300      	movs	r3, #0
}
 8004bae:	4618      	mov	r0, r3
 8004bb0:	3708      	adds	r7, #8
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	bd80      	pop	{r7, pc}
	...

08004bb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bc6:	b2db      	uxtb	r3, r3
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d001      	beq.n	8004bd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e04e      	b.n	8004c6e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68da      	ldr	r2, [r3, #12]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a23      	ldr	r2, [pc, #140]	; (8004c7c <HAL_TIM_Base_Start_IT+0xc4>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d022      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004bfa:	d01d      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a1f      	ldr	r2, [pc, #124]	; (8004c80 <HAL_TIM_Base_Start_IT+0xc8>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d018      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1e      	ldr	r2, [pc, #120]	; (8004c84 <HAL_TIM_Base_Start_IT+0xcc>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d013      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a1c      	ldr	r2, [pc, #112]	; (8004c88 <HAL_TIM_Base_Start_IT+0xd0>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d00e      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a1b      	ldr	r2, [pc, #108]	; (8004c8c <HAL_TIM_Base_Start_IT+0xd4>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d009      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <HAL_TIM_Base_Start_IT+0xd8>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d004      	beq.n	8004c38 <HAL_TIM_Base_Start_IT+0x80>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a18      	ldr	r2, [pc, #96]	; (8004c94 <HAL_TIM_Base_Start_IT+0xdc>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d111      	bne.n	8004c5c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 0307 	and.w	r3, r3, #7
 8004c42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2b06      	cmp	r3, #6
 8004c48:	d010      	beq.n	8004c6c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	681a      	ldr	r2, [r3, #0]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f042 0201 	orr.w	r2, r2, #1
 8004c58:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c5a:	e007      	b.n	8004c6c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f042 0201 	orr.w	r2, r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004c6c:	2300      	movs	r3, #0
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	3714      	adds	r7, #20
 8004c72:	46bd      	mov	sp, r7
 8004c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c78:	4770      	bx	lr
 8004c7a:	bf00      	nop
 8004c7c:	40010000 	.word	0x40010000
 8004c80:	40000400 	.word	0x40000400
 8004c84:	40000800 	.word	0x40000800
 8004c88:	40000c00 	.word	0x40000c00
 8004c8c:	40010400 	.word	0x40010400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	40001800 	.word	0x40001800

08004c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e041      	b.n	8004d2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d106      	bne.n	8004cc4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7fd ff2c 	bl	8002b1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2202      	movs	r2, #2
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681a      	ldr	r2, [r3, #0]
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	4610      	mov	r0, r2
 8004cd8:	f000 fdda 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2201      	movs	r2, #1
 8004cf0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2201      	movs	r2, #1
 8004d08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2201      	movs	r2, #1
 8004d10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2201      	movs	r2, #1
 8004d20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2201      	movs	r2, #1
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3708      	adds	r7, #8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
	...

08004d38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b084      	sub	sp, #16
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
 8004d40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d109      	bne.n	8004d5c <HAL_TIM_PWM_Start+0x24>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	bf14      	ite	ne
 8004d54:	2301      	movne	r3, #1
 8004d56:	2300      	moveq	r3, #0
 8004d58:	b2db      	uxtb	r3, r3
 8004d5a:	e022      	b.n	8004da2 <HAL_TIM_PWM_Start+0x6a>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	2b04      	cmp	r3, #4
 8004d60:	d109      	bne.n	8004d76 <HAL_TIM_PWM_Start+0x3e>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	bf14      	ite	ne
 8004d6e:	2301      	movne	r3, #1
 8004d70:	2300      	moveq	r3, #0
 8004d72:	b2db      	uxtb	r3, r3
 8004d74:	e015      	b.n	8004da2 <HAL_TIM_PWM_Start+0x6a>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d109      	bne.n	8004d90 <HAL_TIM_PWM_Start+0x58>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004d82:	b2db      	uxtb	r3, r3
 8004d84:	2b01      	cmp	r3, #1
 8004d86:	bf14      	ite	ne
 8004d88:	2301      	movne	r3, #1
 8004d8a:	2300      	moveq	r3, #0
 8004d8c:	b2db      	uxtb	r3, r3
 8004d8e:	e008      	b.n	8004da2 <HAL_TIM_PWM_Start+0x6a>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	bf14      	ite	ne
 8004d9c:	2301      	movne	r3, #1
 8004d9e:	2300      	moveq	r3, #0
 8004da0:	b2db      	uxtb	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d001      	beq.n	8004daa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07c      	b.n	8004ea4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d104      	bne.n	8004dba <HAL_TIM_PWM_Start+0x82>
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004db8:	e013      	b.n	8004de2 <HAL_TIM_PWM_Start+0xaa>
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	2b04      	cmp	r3, #4
 8004dbe:	d104      	bne.n	8004dca <HAL_TIM_PWM_Start+0x92>
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2202      	movs	r2, #2
 8004dc4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dc8:	e00b      	b.n	8004de2 <HAL_TIM_PWM_Start+0xaa>
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	2b08      	cmp	r3, #8
 8004dce:	d104      	bne.n	8004dda <HAL_TIM_PWM_Start+0xa2>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd8:	e003      	b.n	8004de2 <HAL_TIM_PWM_Start+0xaa>
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2202      	movs	r2, #2
 8004dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2201      	movs	r2, #1
 8004de8:	6839      	ldr	r1, [r7, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f001 f964 	bl	80060b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a2d      	ldr	r2, [pc, #180]	; (8004eac <HAL_TIM_PWM_Start+0x174>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d004      	beq.n	8004e04 <HAL_TIM_PWM_Start+0xcc>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a2c      	ldr	r2, [pc, #176]	; (8004eb0 <HAL_TIM_PWM_Start+0x178>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d101      	bne.n	8004e08 <HAL_TIM_PWM_Start+0xd0>
 8004e04:	2301      	movs	r3, #1
 8004e06:	e000      	b.n	8004e0a <HAL_TIM_PWM_Start+0xd2>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d007      	beq.n	8004e1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a22      	ldr	r2, [pc, #136]	; (8004eac <HAL_TIM_PWM_Start+0x174>)
 8004e24:	4293      	cmp	r3, r2
 8004e26:	d022      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e30:	d01d      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4a1f      	ldr	r2, [pc, #124]	; (8004eb4 <HAL_TIM_PWM_Start+0x17c>)
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d018      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_TIM_PWM_Start+0x180>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d013      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a1c      	ldr	r2, [pc, #112]	; (8004ebc <HAL_TIM_PWM_Start+0x184>)
 8004e4c:	4293      	cmp	r3, r2
 8004e4e:	d00e      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a16      	ldr	r2, [pc, #88]	; (8004eb0 <HAL_TIM_PWM_Start+0x178>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d009      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	4a18      	ldr	r2, [pc, #96]	; (8004ec0 <HAL_TIM_PWM_Start+0x188>)
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d004      	beq.n	8004e6e <HAL_TIM_PWM_Start+0x136>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	4a16      	ldr	r2, [pc, #88]	; (8004ec4 <HAL_TIM_PWM_Start+0x18c>)
 8004e6a:	4293      	cmp	r3, r2
 8004e6c:	d111      	bne.n	8004e92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	689b      	ldr	r3, [r3, #8]
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2b06      	cmp	r3, #6
 8004e7e:	d010      	beq.n	8004ea2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0201 	orr.w	r2, r2, #1
 8004e8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e90:	e007      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f042 0201 	orr.w	r2, r2, #1
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ea2:	2300      	movs	r3, #0
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3710      	adds	r7, #16
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40010400 	.word	0x40010400
 8004eb4:	40000400 	.word	0x40000400
 8004eb8:	40000800 	.word	0x40000800
 8004ebc:	40000c00 	.word	0x40000c00
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40001800 	.word	0x40001800

08004ec8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d101      	bne.n	8004eda <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e041      	b.n	8004f5e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004eee:	6878      	ldr	r0, [r7, #4]
 8004ef0:	f7fd fe36 	bl	8002b60 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2202      	movs	r2, #2
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	3304      	adds	r3, #4
 8004f04:	4619      	mov	r1, r3
 8004f06:	4610      	mov	r0, r2
 8004f08:	f000 fcc2 	bl	8005890 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2201      	movs	r2, #1
 8004f20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2201      	movs	r2, #1
 8004f28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2201      	movs	r2, #1
 8004f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2201      	movs	r2, #1
 8004f38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2201      	movs	r2, #1
 8004f48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2201      	movs	r2, #1
 8004f50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2201      	movs	r2, #1
 8004f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f66:	b580      	push	{r7, lr}
 8004f68:	b086      	sub	sp, #24
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
 8004f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e097      	b.n	80050aa <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f88f 	bl	80050b2 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	6812      	ldr	r2, [r2, #0]
 8004fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004faa:	f023 0307 	bic.w	r3, r3, #7
 8004fae:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 fc68 	bl	8005890 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6a1b      	ldr	r3, [r3, #32]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	697a      	ldr	r2, [r7, #20]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004fe2:	693b      	ldr	r3, [r7, #16]
 8004fe4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe8:	f023 0303 	bic.w	r3, r3, #3
 8004fec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	689a      	ldr	r2, [r3, #8]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	699b      	ldr	r3, [r3, #24]
 8004ff6:	021b      	lsls	r3, r3, #8
 8004ff8:	4313      	orrs	r3, r2
 8004ffa:	693a      	ldr	r2, [r7, #16]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005006:	f023 030c 	bic.w	r3, r3, #12
 800500a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68da      	ldr	r2, [r3, #12]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	69db      	ldr	r3, [r3, #28]
 8005020:	021b      	lsls	r3, r3, #8
 8005022:	4313      	orrs	r3, r2
 8005024:	693a      	ldr	r2, [r7, #16]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	691b      	ldr	r3, [r3, #16]
 800502e:	011a      	lsls	r2, r3, #4
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	031b      	lsls	r3, r3, #12
 8005036:	4313      	orrs	r3, r2
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005044:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800504c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	685a      	ldr	r2, [r3, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	011b      	lsls	r3, r3, #4
 8005058:	4313      	orrs	r3, r2
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2201      	movs	r2, #1
 8005084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2201      	movs	r2, #1
 800508c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050a8:	2300      	movs	r3, #0
}
 80050aa:	4618      	mov	r0, r3
 80050ac:	3718      	adds	r7, #24
 80050ae:	46bd      	mov	sp, r7
 80050b0:	bd80      	pop	{r7, pc}

080050b2 <HAL_TIM_Encoder_MspInit>:
  * @brief  Initializes the TIM Encoder Interface MSP.
  * @param  htim TIM Encoder Interface handle
  * @retval None
  */
__weak void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef *htim)
{
 80050b2:	b480      	push	{r7}
 80050b4:	b083      	sub	sp, #12
 80050b6:	af00      	add	r7, sp, #0
 80050b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Encoder_MspInit could be implemented in the user file
   */
}
 80050ba:	bf00      	nop
 80050bc:	370c      	adds	r7, #12
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr

080050c6 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b084      	sub	sp, #16
 80050ca:	af00      	add	r7, sp, #0
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050d6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80050de:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050e6:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80050ee:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d110      	bne.n	8005118 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050f6:	7bfb      	ldrb	r3, [r7, #15]
 80050f8:	2b01      	cmp	r3, #1
 80050fa:	d102      	bne.n	8005102 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050fc:	7b7b      	ldrb	r3, [r7, #13]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d001      	beq.n	8005106 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005102:	2301      	movs	r3, #1
 8005104:	e069      	b.n	80051da <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2202      	movs	r2, #2
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2202      	movs	r2, #2
 8005112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005116:	e031      	b.n	800517c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	2b04      	cmp	r3, #4
 800511c:	d110      	bne.n	8005140 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800511e:	7bbb      	ldrb	r3, [r7, #14]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d102      	bne.n	800512a <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005124:	7b3b      	ldrb	r3, [r7, #12]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d001      	beq.n	800512e <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e055      	b.n	80051da <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	2202      	movs	r2, #2
 8005132:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2202      	movs	r2, #2
 800513a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800513e:	e01d      	b.n	800517c <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005140:	7bfb      	ldrb	r3, [r7, #15]
 8005142:	2b01      	cmp	r3, #1
 8005144:	d108      	bne.n	8005158 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005146:	7bbb      	ldrb	r3, [r7, #14]
 8005148:	2b01      	cmp	r3, #1
 800514a:	d105      	bne.n	8005158 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800514c:	7b7b      	ldrb	r3, [r7, #13]
 800514e:	2b01      	cmp	r3, #1
 8005150:	d102      	bne.n	8005158 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005152:	7b3b      	ldrb	r3, [r7, #12]
 8005154:	2b01      	cmp	r3, #1
 8005156:	d001      	beq.n	800515c <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e03e      	b.n	80051da <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2202      	movs	r2, #2
 8005168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2202      	movs	r2, #2
 8005178:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d003      	beq.n	800518a <HAL_TIM_Encoder_Start+0xc4>
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b04      	cmp	r3, #4
 8005186:	d008      	beq.n	800519a <HAL_TIM_Encoder_Start+0xd4>
 8005188:	e00f      	b.n	80051aa <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	2201      	movs	r2, #1
 8005190:	2100      	movs	r1, #0
 8005192:	4618      	mov	r0, r3
 8005194:	f000 ff90 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 8005198:	e016      	b.n	80051c8 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2201      	movs	r2, #1
 80051a0:	2104      	movs	r1, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f000 ff88 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 80051a8:	e00e      	b.n	80051c8 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	2201      	movs	r2, #1
 80051b0:	2100      	movs	r1, #0
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 ff80 	bl	80060b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	2201      	movs	r2, #1
 80051be:	2104      	movs	r1, #4
 80051c0:	4618      	mov	r0, r3
 80051c2:	f000 ff79 	bl	80060b8 <TIM_CCxChannelCmd>
      break;
 80051c6:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3710      	adds	r7, #16
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}

080051e2 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e2:	b580      	push	{r7, lr}
 80051e4:	b082      	sub	sp, #8
 80051e6:	af00      	add	r7, sp, #0
 80051e8:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	f003 0302 	and.w	r3, r3, #2
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d122      	bne.n	800523e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	f003 0302 	and.w	r3, r3, #2
 8005202:	2b02      	cmp	r3, #2
 8005204:	d11b      	bne.n	800523e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f06f 0202 	mvn.w	r2, #2
 800520e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	699b      	ldr	r3, [r3, #24]
 800521c:	f003 0303 	and.w	r3, r3, #3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d003      	beq.n	800522c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 fb14 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 800522a:	e005      	b.n	8005238 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fb06 	bl	800583e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005232:	6878      	ldr	r0, [r7, #4]
 8005234:	f000 fb17 	bl	8005866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f003 0304 	and.w	r3, r3, #4
 8005248:	2b04      	cmp	r3, #4
 800524a:	d122      	bne.n	8005292 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68db      	ldr	r3, [r3, #12]
 8005252:	f003 0304 	and.w	r3, r3, #4
 8005256:	2b04      	cmp	r3, #4
 8005258:	d11b      	bne.n	8005292 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f06f 0204 	mvn.w	r2, #4
 8005262:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2202      	movs	r2, #2
 8005268:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	699b      	ldr	r3, [r3, #24]
 8005270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005274:	2b00      	cmp	r3, #0
 8005276:	d003      	beq.n	8005280 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 faea 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 800527e:	e005      	b.n	800528c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f000 fadc 	bl	800583e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 faed 	bl	8005866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2200      	movs	r2, #0
 8005290:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f003 0308 	and.w	r3, r3, #8
 800529c:	2b08      	cmp	r3, #8
 800529e:	d122      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68db      	ldr	r3, [r3, #12]
 80052a6:	f003 0308 	and.w	r3, r3, #8
 80052aa:	2b08      	cmp	r3, #8
 80052ac:	d11b      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f06f 0208 	mvn.w	r2, #8
 80052b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2204      	movs	r2, #4
 80052bc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	69db      	ldr	r3, [r3, #28]
 80052c4:	f003 0303 	and.w	r3, r3, #3
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d003      	beq.n	80052d4 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052cc:	6878      	ldr	r0, [r7, #4]
 80052ce:	f000 fac0 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 80052d2:	e005      	b.n	80052e0 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fab2 	bl	800583e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f000 fac3 	bl	8005866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0310 	and.w	r3, r3, #16
 80052f0:	2b10      	cmp	r3, #16
 80052f2:	d122      	bne.n	800533a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0310 	and.w	r3, r3, #16
 80052fe:	2b10      	cmp	r3, #16
 8005300:	d11b      	bne.n	800533a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0210 	mvn.w	r2, #16
 800530a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2208      	movs	r2, #8
 8005310:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	69db      	ldr	r3, [r3, #28]
 8005318:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531c:	2b00      	cmp	r3, #0
 800531e:	d003      	beq.n	8005328 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fa96 	bl	8005852 <HAL_TIM_IC_CaptureCallback>
 8005326:	e005      	b.n	8005334 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f000 fa88 	bl	800583e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	f000 fa99 	bl	8005866 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	691b      	ldr	r3, [r3, #16]
 8005340:	f003 0301 	and.w	r3, r3, #1
 8005344:	2b01      	cmp	r3, #1
 8005346:	d10e      	bne.n	8005366 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f003 0301 	and.w	r3, r3, #1
 8005352:	2b01      	cmp	r3, #1
 8005354:	d107      	bne.n	8005366 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f06f 0201 	mvn.w	r2, #1
 800535e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005360:	6878      	ldr	r0, [r7, #4]
 8005362:	f7fb fdeb 	bl	8000f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	691b      	ldr	r3, [r3, #16]
 800536c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005370:	2b80      	cmp	r3, #128	; 0x80
 8005372:	d10e      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68db      	ldr	r3, [r3, #12]
 800537a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537e:	2b80      	cmp	r3, #128	; 0x80
 8005380:	d107      	bne.n	8005392 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800538a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 ff91 	bl	80062b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	691b      	ldr	r3, [r3, #16]
 8005398:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539c:	2b40      	cmp	r3, #64	; 0x40
 800539e:	d10e      	bne.n	80053be <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053aa:	2b40      	cmp	r3, #64	; 0x40
 80053ac:	d107      	bne.n	80053be <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b8:	6878      	ldr	r0, [r7, #4]
 80053ba:	f000 fa5e 	bl	800587a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	691b      	ldr	r3, [r3, #16]
 80053c4:	f003 0320 	and.w	r3, r3, #32
 80053c8:	2b20      	cmp	r3, #32
 80053ca:	d10e      	bne.n	80053ea <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b20      	cmp	r3, #32
 80053d8:	d107      	bne.n	80053ea <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f06f 0220 	mvn.w	r2, #32
 80053e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 ff5b 	bl	80062a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053ea:	bf00      	nop
 80053ec:	3708      	adds	r7, #8
 80053ee:	46bd      	mov	sp, r7
 80053f0:	bd80      	pop	{r7, pc}

080053f2 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053f2:	b580      	push	{r7, lr}
 80053f4:	b086      	sub	sp, #24
 80053f6:	af00      	add	r7, sp, #0
 80053f8:	60f8      	str	r0, [r7, #12]
 80053fa:	60b9      	str	r1, [r7, #8]
 80053fc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fe:	2300      	movs	r3, #0
 8005400:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005408:	2b01      	cmp	r3, #1
 800540a:	d101      	bne.n	8005410 <HAL_TIM_IC_ConfigChannel+0x1e>
 800540c:	2302      	movs	r3, #2
 800540e:	e088      	b.n	8005522 <HAL_TIM_IC_ConfigChannel+0x130>
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	2201      	movs	r2, #1
 8005414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d11b      	bne.n	8005456 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6818      	ldr	r0, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	6819      	ldr	r1, [r3, #0]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	68db      	ldr	r3, [r3, #12]
 800542e:	f000 fc7f 	bl	8005d30 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	699a      	ldr	r2, [r3, #24]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 020c 	bic.w	r2, r2, #12
 8005440:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	6999      	ldr	r1, [r3, #24]
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	689a      	ldr	r2, [r3, #8]
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	430a      	orrs	r2, r1
 8005452:	619a      	str	r2, [r3, #24]
 8005454:	e060      	b.n	8005518 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	2b04      	cmp	r3, #4
 800545a:	d11c      	bne.n	8005496 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6818      	ldr	r0, [r3, #0]
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	6819      	ldr	r1, [r3, #0]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685a      	ldr	r2, [r3, #4]
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	68db      	ldr	r3, [r3, #12]
 800546c:	f000 fd03 	bl	8005e76 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800547e:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	6999      	ldr	r1, [r3, #24]
 8005486:	68bb      	ldr	r3, [r7, #8]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	021a      	lsls	r2, r3, #8
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	430a      	orrs	r2, r1
 8005492:	619a      	str	r2, [r3, #24]
 8005494:	e040      	b.n	8005518 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b08      	cmp	r3, #8
 800549a:	d11b      	bne.n	80054d4 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	6819      	ldr	r1, [r3, #0]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	685a      	ldr	r2, [r3, #4]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	f000 fd50 	bl	8005f50 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69da      	ldr	r2, [r3, #28]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 020c 	bic.w	r2, r2, #12
 80054be:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	69d9      	ldr	r1, [r3, #28]
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	689a      	ldr	r2, [r3, #8]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	61da      	str	r2, [r3, #28]
 80054d2:	e021      	b.n	8005518 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2b0c      	cmp	r3, #12
 80054d8:	d11c      	bne.n	8005514 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	6818      	ldr	r0, [r3, #0]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	6819      	ldr	r1, [r3, #0]
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	f000 fd6d 	bl	8005fc8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	69da      	ldr	r2, [r3, #28]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054fc:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69d9      	ldr	r1, [r3, #28]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	689b      	ldr	r3, [r3, #8]
 8005508:	021a      	lsls	r2, r3, #8
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	430a      	orrs	r2, r1
 8005510:	61da      	str	r2, [r3, #28]
 8005512:	e001      	b.n	8005518 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2200      	movs	r2, #0
 800551c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005520:	7dfb      	ldrb	r3, [r7, #23]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3718      	adds	r7, #24
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
	...

0800552c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005538:	2300      	movs	r3, #0
 800553a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005546:	2302      	movs	r3, #2
 8005548:	e0ae      	b.n	80056a8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b0c      	cmp	r3, #12
 8005556:	f200 809f 	bhi.w	8005698 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800555a:	a201      	add	r2, pc, #4	; (adr r2, 8005560 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800555c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005560:	08005595 	.word	0x08005595
 8005564:	08005699 	.word	0x08005699
 8005568:	08005699 	.word	0x08005699
 800556c:	08005699 	.word	0x08005699
 8005570:	080055d5 	.word	0x080055d5
 8005574:	08005699 	.word	0x08005699
 8005578:	08005699 	.word	0x08005699
 800557c:	08005699 	.word	0x08005699
 8005580:	08005617 	.word	0x08005617
 8005584:	08005699 	.word	0x08005699
 8005588:	08005699 	.word	0x08005699
 800558c:	08005699 	.word	0x08005699
 8005590:	08005657 	.word	0x08005657
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4618      	mov	r0, r3
 800559c:	f000 fa18 	bl	80059d0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	699a      	ldr	r2, [r3, #24]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f042 0208 	orr.w	r2, r2, #8
 80055ae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f022 0204 	bic.w	r2, r2, #4
 80055be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	6999      	ldr	r1, [r3, #24]
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	691a      	ldr	r2, [r3, #16]
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	430a      	orrs	r2, r1
 80055d0:	619a      	str	r2, [r3, #24]
      break;
 80055d2:	e064      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	4618      	mov	r0, r3
 80055dc:	f000 fa68 	bl	8005ab0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	699a      	ldr	r2, [r3, #24]
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	699a      	ldr	r2, [r3, #24]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	6999      	ldr	r1, [r3, #24]
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	021a      	lsls	r2, r3, #8
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
      break;
 8005614:	e043      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68b9      	ldr	r1, [r7, #8]
 800561c:	4618      	mov	r0, r3
 800561e:	f000 fabd 	bl	8005b9c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	69da      	ldr	r2, [r3, #28]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f042 0208 	orr.w	r2, r2, #8
 8005630:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	69da      	ldr	r2, [r3, #28]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0204 	bic.w	r2, r2, #4
 8005640:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	69d9      	ldr	r1, [r3, #28]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	691a      	ldr	r2, [r3, #16]
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	430a      	orrs	r2, r1
 8005652:	61da      	str	r2, [r3, #28]
      break;
 8005654:	e023      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	4618      	mov	r0, r3
 800565e:	f000 fb11 	bl	8005c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	69da      	ldr	r2, [r3, #28]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69da      	ldr	r2, [r3, #28]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	69d9      	ldr	r1, [r3, #28]
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	691b      	ldr	r3, [r3, #16]
 800568c:	021a      	lsls	r2, r3, #8
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	430a      	orrs	r2, r1
 8005694:	61da      	str	r2, [r3, #28]
      break;
 8005696:	e002      	b.n	800569e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005698:	2301      	movs	r3, #1
 800569a:	75fb      	strb	r3, [r7, #23]
      break;
 800569c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3718      	adds	r7, #24
 80056ac:	46bd      	mov	sp, r7
 80056ae:	bd80      	pop	{r7, pc}

080056b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056b0:	b580      	push	{r7, lr}
 80056b2:	b084      	sub	sp, #16
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056ba:	2300      	movs	r3, #0
 80056bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIM_ConfigClockSource+0x1c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e0b4      	b.n	8005836 <HAL_TIM_ConfigClockSource+0x186>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2202      	movs	r2, #2
 80056d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005704:	d03e      	beq.n	8005784 <HAL_TIM_ConfigClockSource+0xd4>
 8005706:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800570a:	f200 8087 	bhi.w	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800570e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005712:	f000 8086 	beq.w	8005822 <HAL_TIM_ConfigClockSource+0x172>
 8005716:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800571a:	d87f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d01a      	beq.n	8005756 <HAL_TIM_ConfigClockSource+0xa6>
 8005720:	2b70      	cmp	r3, #112	; 0x70
 8005722:	d87b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d050      	beq.n	80057ca <HAL_TIM_ConfigClockSource+0x11a>
 8005728:	2b60      	cmp	r3, #96	; 0x60
 800572a:	d877      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d03c      	beq.n	80057aa <HAL_TIM_ConfigClockSource+0xfa>
 8005730:	2b50      	cmp	r3, #80	; 0x50
 8005732:	d873      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d058      	beq.n	80057ea <HAL_TIM_ConfigClockSource+0x13a>
 8005738:	2b40      	cmp	r3, #64	; 0x40
 800573a:	d86f      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d064      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005740:	2b30      	cmp	r3, #48	; 0x30
 8005742:	d86b      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d060      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005748:	2b20      	cmp	r3, #32
 800574a:	d867      	bhi.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
 800574c:	2b00      	cmp	r3, #0
 800574e:	d05c      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	2b10      	cmp	r3, #16
 8005752:	d05a      	beq.n	800580a <HAL_TIM_ConfigClockSource+0x15a>
 8005754:	e062      	b.n	800581c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6818      	ldr	r0, [r3, #0]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	6899      	ldr	r1, [r3, #8]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	685a      	ldr	r2, [r3, #4]
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	68db      	ldr	r3, [r3, #12]
 8005766:	f000 fc87 	bl	8006078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005778:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	68ba      	ldr	r2, [r7, #8]
 8005780:	609a      	str	r2, [r3, #8]
      break;
 8005782:	e04f      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6818      	ldr	r0, [r3, #0]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	6899      	ldr	r1, [r3, #8]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	685a      	ldr	r2, [r3, #4]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	68db      	ldr	r3, [r3, #12]
 8005794:	f000 fc70 	bl	8006078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	689a      	ldr	r2, [r3, #8]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a6:	609a      	str	r2, [r3, #8]
      break;
 80057a8:	e03c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6818      	ldr	r0, [r3, #0]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	6859      	ldr	r1, [r3, #4]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	461a      	mov	r2, r3
 80057b8:	f000 fb2e 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2150      	movs	r1, #80	; 0x50
 80057c2:	4618      	mov	r0, r3
 80057c4:	f000 fc3d 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 80057c8:	e02c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6818      	ldr	r0, [r3, #0]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	6859      	ldr	r1, [r3, #4]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f000 fb8a 	bl	8005ef0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2160      	movs	r1, #96	; 0x60
 80057e2:	4618      	mov	r0, r3
 80057e4:	f000 fc2d 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 80057e8:	e01c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6818      	ldr	r0, [r3, #0]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	6859      	ldr	r1, [r3, #4]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	68db      	ldr	r3, [r3, #12]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f000 fb0e 	bl	8005e18 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2140      	movs	r1, #64	; 0x40
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fc1d 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005808:	e00c      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4619      	mov	r1, r3
 8005814:	4610      	mov	r0, r2
 8005816:	f000 fc14 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 800581a:	e003      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800581c:	2301      	movs	r3, #1
 800581e:	73fb      	strb	r3, [r7, #15]
      break;
 8005820:	e000      	b.n	8005824 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005822:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005834:	7bfb      	ldrb	r3, [r7, #15]
}
 8005836:	4618      	mov	r0, r3
 8005838:	3710      	adds	r7, #16
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}

0800583e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800587a:	b480      	push	{r7}
 800587c:	b083      	sub	sp, #12
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005882:	bf00      	nop
 8005884:	370c      	adds	r7, #12
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
	...

08005890 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005890:	b480      	push	{r7}
 8005892:	b085      	sub	sp, #20
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a40      	ldr	r2, [pc, #256]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d013      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ae:	d00f      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	4a3d      	ldr	r2, [pc, #244]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d00b      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a3c      	ldr	r2, [pc, #240]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d007      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a3b      	ldr	r2, [pc, #236]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d003      	beq.n	80058d0 <TIM_Base_SetConfig+0x40>
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	4a3a      	ldr	r2, [pc, #232]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d108      	bne.n	80058e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	68fa      	ldr	r2, [r7, #12]
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2f      	ldr	r2, [pc, #188]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d02b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058f0:	d027      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a2c      	ldr	r2, [pc, #176]	; (80059a8 <TIM_Base_SetConfig+0x118>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d023      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a2b      	ldr	r2, [pc, #172]	; (80059ac <TIM_Base_SetConfig+0x11c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d01f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <TIM_Base_SetConfig+0x120>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d01b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d017      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a28      	ldr	r2, [pc, #160]	; (80059b8 <TIM_Base_SetConfig+0x128>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d013      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a27      	ldr	r2, [pc, #156]	; (80059bc <TIM_Base_SetConfig+0x12c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d00f      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4a26      	ldr	r2, [pc, #152]	; (80059c0 <TIM_Base_SetConfig+0x130>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00b      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a25      	ldr	r2, [pc, #148]	; (80059c4 <TIM_Base_SetConfig+0x134>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d007      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a24      	ldr	r2, [pc, #144]	; (80059c8 <TIM_Base_SetConfig+0x138>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d003      	beq.n	8005942 <TIM_Base_SetConfig+0xb2>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a23      	ldr	r2, [pc, #140]	; (80059cc <TIM_Base_SetConfig+0x13c>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d108      	bne.n	8005954 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4313      	orrs	r3, r2
 8005952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	4313      	orrs	r3, r2
 8005960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68fa      	ldr	r2, [r7, #12]
 8005966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689a      	ldr	r2, [r3, #8]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4a0a      	ldr	r2, [pc, #40]	; (80059a4 <TIM_Base_SetConfig+0x114>)
 800597c:	4293      	cmp	r3, r2
 800597e:	d003      	beq.n	8005988 <TIM_Base_SetConfig+0xf8>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	4a0c      	ldr	r2, [pc, #48]	; (80059b4 <TIM_Base_SetConfig+0x124>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d103      	bne.n	8005990 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691a      	ldr	r2, [r3, #16]
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	615a      	str	r2, [r3, #20]
}
 8005996:	bf00      	nop
 8005998:	3714      	adds	r7, #20
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr
 80059a2:	bf00      	nop
 80059a4:	40010000 	.word	0x40010000
 80059a8:	40000400 	.word	0x40000400
 80059ac:	40000800 	.word	0x40000800
 80059b0:	40000c00 	.word	0x40000c00
 80059b4:	40010400 	.word	0x40010400
 80059b8:	40014000 	.word	0x40014000
 80059bc:	40014400 	.word	0x40014400
 80059c0:	40014800 	.word	0x40014800
 80059c4:	40001800 	.word	0x40001800
 80059c8:	40001c00 	.word	0x40001c00
 80059cc:	40002000 	.word	0x40002000

080059d0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b087      	sub	sp, #28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a1b      	ldr	r3, [r3, #32]
 80059de:	f023 0201 	bic.w	r2, r3, #1
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	699b      	ldr	r3, [r3, #24]
 80059f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f023 0303 	bic.w	r3, r3, #3
 8005a06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	68fa      	ldr	r2, [r7, #12]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f023 0302 	bic.w	r3, r3, #2
 8005a18:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	689b      	ldr	r3, [r3, #8]
 8005a1e:	697a      	ldr	r2, [r7, #20]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a20      	ldr	r2, [pc, #128]	; (8005aa8 <TIM_OC1_SetConfig+0xd8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d003      	beq.n	8005a34 <TIM_OC1_SetConfig+0x64>
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	4a1f      	ldr	r2, [pc, #124]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d10c      	bne.n	8005a4e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f023 0308 	bic.w	r3, r3, #8
 8005a3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	697a      	ldr	r2, [r7, #20]
 8005a42:	4313      	orrs	r3, r2
 8005a44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f023 0304 	bic.w	r3, r3, #4
 8005a4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a15      	ldr	r2, [pc, #84]	; (8005aa8 <TIM_OC1_SetConfig+0xd8>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d003      	beq.n	8005a5e <TIM_OC1_SetConfig+0x8e>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a14      	ldr	r2, [pc, #80]	; (8005aac <TIM_OC1_SetConfig+0xdc>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d111      	bne.n	8005a82 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	695b      	ldr	r3, [r3, #20]
 8005a72:	693a      	ldr	r2, [r7, #16]
 8005a74:	4313      	orrs	r3, r2
 8005a76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	693a      	ldr	r2, [r7, #16]
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	693a      	ldr	r2, [r7, #16]
 8005a86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68fa      	ldr	r2, [r7, #12]
 8005a8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	697a      	ldr	r2, [r7, #20]
 8005a9a:	621a      	str	r2, [r3, #32]
}
 8005a9c:	bf00      	nop
 8005a9e:	371c      	adds	r7, #28
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa6:	4770      	bx	lr
 8005aa8:	40010000 	.word	0x40010000
 8005aac:	40010400 	.word	0x40010400

08005ab0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005ab0:	b480      	push	{r7}
 8005ab2:	b087      	sub	sp, #28
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6a1b      	ldr	r3, [r3, #32]
 8005abe:	f023 0210 	bic.w	r2, r3, #16
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a1b      	ldr	r3, [r3, #32]
 8005aca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ade:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	021b      	lsls	r3, r3, #8
 8005aee:	68fa      	ldr	r2, [r7, #12]
 8005af0:	4313      	orrs	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	f023 0320 	bic.w	r3, r3, #32
 8005afa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	697a      	ldr	r2, [r7, #20]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	4a22      	ldr	r2, [pc, #136]	; (8005b94 <TIM_OC2_SetConfig+0xe4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d003      	beq.n	8005b18 <TIM_OC2_SetConfig+0x68>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	4a21      	ldr	r2, [pc, #132]	; (8005b98 <TIM_OC2_SetConfig+0xe8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d10d      	bne.n	8005b34 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b18:	697b      	ldr	r3, [r7, #20]
 8005b1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	011b      	lsls	r3, r3, #4
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	4313      	orrs	r3, r2
 8005b2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a17      	ldr	r2, [pc, #92]	; (8005b94 <TIM_OC2_SetConfig+0xe4>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d003      	beq.n	8005b44 <TIM_OC2_SetConfig+0x94>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	4a16      	ldr	r2, [pc, #88]	; (8005b98 <TIM_OC2_SetConfig+0xe8>)
 8005b40:	4293      	cmp	r3, r2
 8005b42:	d113      	bne.n	8005b6c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b4a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b52:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	695b      	ldr	r3, [r3, #20]
 8005b58:	009b      	lsls	r3, r3, #2
 8005b5a:	693a      	ldr	r2, [r7, #16]
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	699b      	ldr	r3, [r3, #24]
 8005b64:	009b      	lsls	r3, r3, #2
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	4313      	orrs	r3, r2
 8005b6a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	693a      	ldr	r2, [r7, #16]
 8005b70:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	68fa      	ldr	r2, [r7, #12]
 8005b76:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	697a      	ldr	r2, [r7, #20]
 8005b84:	621a      	str	r2, [r3, #32]
}
 8005b86:	bf00      	nop
 8005b88:	371c      	adds	r7, #28
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr
 8005b92:	bf00      	nop
 8005b94:	40010000 	.word	0x40010000
 8005b98:	40010400 	.word	0x40010400

08005b9c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1b      	ldr	r3, [r3, #32]
 8005baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6a1b      	ldr	r3, [r3, #32]
 8005bb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	69db      	ldr	r3, [r3, #28]
 8005bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	f023 0303 	bic.w	r3, r3, #3
 8005bd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	68fa      	ldr	r2, [r7, #12]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bde:	697b      	ldr	r3, [r7, #20]
 8005be0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005be4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	689b      	ldr	r3, [r3, #8]
 8005bea:	021b      	lsls	r3, r3, #8
 8005bec:	697a      	ldr	r2, [r7, #20]
 8005bee:	4313      	orrs	r3, r2
 8005bf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <TIM_OC3_SetConfig+0xe0>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d003      	beq.n	8005c02 <TIM_OC3_SetConfig+0x66>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	4a20      	ldr	r2, [pc, #128]	; (8005c80 <TIM_OC3_SetConfig+0xe4>)
 8005bfe:	4293      	cmp	r3, r2
 8005c00:	d10d      	bne.n	8005c1e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	021b      	lsls	r3, r3, #8
 8005c10:	697a      	ldr	r2, [r7, #20]
 8005c12:	4313      	orrs	r3, r2
 8005c14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a16      	ldr	r2, [pc, #88]	; (8005c7c <TIM_OC3_SetConfig+0xe0>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d003      	beq.n	8005c2e <TIM_OC3_SetConfig+0x92>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a15      	ldr	r2, [pc, #84]	; (8005c80 <TIM_OC3_SetConfig+0xe4>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d113      	bne.n	8005c56 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	695b      	ldr	r3, [r3, #20]
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	693a      	ldr	r2, [r7, #16]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	699b      	ldr	r3, [r3, #24]
 8005c4e:	011b      	lsls	r3, r3, #4
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	4313      	orrs	r3, r2
 8005c54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	693a      	ldr	r2, [r7, #16]
 8005c5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	68fa      	ldr	r2, [r7, #12]
 8005c60:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	697a      	ldr	r2, [r7, #20]
 8005c6e:	621a      	str	r2, [r3, #32]
}
 8005c70:	bf00      	nop
 8005c72:	371c      	adds	r7, #28
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr
 8005c7c:	40010000 	.word	0x40010000
 8005c80:	40010400 	.word	0x40010400

08005c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c84:	b480      	push	{r7}
 8005c86:	b087      	sub	sp, #28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
 8005c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	685b      	ldr	r3, [r3, #4]
 8005ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	69db      	ldr	r3, [r3, #28]
 8005caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	021b      	lsls	r3, r3, #8
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	031b      	lsls	r3, r3, #12
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	4a12      	ldr	r2, [pc, #72]	; (8005d28 <TIM_OC4_SetConfig+0xa4>)
 8005ce0:	4293      	cmp	r3, r2
 8005ce2:	d003      	beq.n	8005cec <TIM_OC4_SetConfig+0x68>
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	4a11      	ldr	r2, [pc, #68]	; (8005d2c <TIM_OC4_SetConfig+0xa8>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d109      	bne.n	8005d00 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cf2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	695b      	ldr	r3, [r3, #20]
 8005cf8:	019b      	lsls	r3, r3, #6
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	68fa      	ldr	r2, [r7, #12]
 8005d0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	693a      	ldr	r2, [r7, #16]
 8005d18:	621a      	str	r2, [r3, #32]
}
 8005d1a:	bf00      	nop
 8005d1c:	371c      	adds	r7, #28
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr
 8005d26:	bf00      	nop
 8005d28:	40010000 	.word	0x40010000
 8005d2c:	40010400 	.word	0x40010400

08005d30 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005d30:	b480      	push	{r7}
 8005d32:	b087      	sub	sp, #28
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f023 0201 	bic.w	r2, r3, #1
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	699b      	ldr	r3, [r3, #24]
 8005d4e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	6a1b      	ldr	r3, [r3, #32]
 8005d54:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <TIM_TI1_SetConfig+0xcc>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d01b      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d64:	d017      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a25      	ldr	r2, [pc, #148]	; (8005e00 <TIM_TI1_SetConfig+0xd0>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d013      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4a24      	ldr	r2, [pc, #144]	; (8005e04 <TIM_TI1_SetConfig+0xd4>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00f      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	4a23      	ldr	r2, [pc, #140]	; (8005e08 <TIM_TI1_SetConfig+0xd8>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d00b      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4a22      	ldr	r2, [pc, #136]	; (8005e0c <TIM_TI1_SetConfig+0xdc>)
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d007      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4a21      	ldr	r2, [pc, #132]	; (8005e10 <TIM_TI1_SetConfig+0xe0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d003      	beq.n	8005d96 <TIM_TI1_SetConfig+0x66>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	4a20      	ldr	r2, [pc, #128]	; (8005e14 <TIM_TI1_SetConfig+0xe4>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d101      	bne.n	8005d9a <TIM_TI1_SetConfig+0x6a>
 8005d96:	2301      	movs	r3, #1
 8005d98:	e000      	b.n	8005d9c <TIM_TI1_SetConfig+0x6c>
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d008      	beq.n	8005db2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	f023 0303 	bic.w	r3, r3, #3
 8005da6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005da8:	697a      	ldr	r2, [r7, #20]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	4313      	orrs	r3, r2
 8005dae:	617b      	str	r3, [r7, #20]
 8005db0:	e003      	b.n	8005dba <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	f043 0301 	orr.w	r3, r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	011b      	lsls	r3, r3, #4
 8005dc6:	b2db      	uxtb	r3, r3
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005dce:	693b      	ldr	r3, [r7, #16]
 8005dd0:	f023 030a 	bic.w	r3, r3, #10
 8005dd4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	f003 030a 	and.w	r3, r3, #10
 8005ddc:	693a      	ldr	r2, [r7, #16]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	697a      	ldr	r2, [r7, #20]
 8005de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	bf00      	nop
 8005df0:	371c      	adds	r7, #28
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	40010000 	.word	0x40010000
 8005e00:	40000400 	.word	0x40000400
 8005e04:	40000800 	.word	0x40000800
 8005e08:	40000c00 	.word	0x40000c00
 8005e0c:	40010400 	.word	0x40010400
 8005e10:	40014000 	.word	0x40014000
 8005e14:	40001800 	.word	0x40001800

08005e18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b087      	sub	sp, #28
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6a1b      	ldr	r3, [r3, #32]
 8005e28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6a1b      	ldr	r3, [r3, #32]
 8005e2e:	f023 0201 	bic.w	r2, r3, #1
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	011b      	lsls	r3, r3, #4
 8005e48:	693a      	ldr	r2, [r7, #16]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f023 030a 	bic.w	r3, r3, #10
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	693a      	ldr	r2, [r7, #16]
 8005e62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	697a      	ldr	r2, [r7, #20]
 8005e68:	621a      	str	r2, [r3, #32]
}
 8005e6a:	bf00      	nop
 8005e6c:	371c      	adds	r7, #28
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005e76:	b480      	push	{r7}
 8005e78:	b087      	sub	sp, #28
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	607a      	str	r2, [r7, #4]
 8005e82:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6a1b      	ldr	r3, [r3, #32]
 8005e88:	f023 0210 	bic.w	r2, r3, #16
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	699b      	ldr	r3, [r3, #24]
 8005e94:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	021b      	lsls	r3, r3, #8
 8005ea8:	697a      	ldr	r2, [r7, #20]
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005eae:	697b      	ldr	r3, [r7, #20]
 8005eb0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005eb4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	031b      	lsls	r3, r3, #12
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	697a      	ldr	r2, [r7, #20]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005ec8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	011b      	lsls	r3, r3, #4
 8005ece:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005ed2:	693a      	ldr	r2, [r7, #16]
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	621a      	str	r2, [r3, #32]
}
 8005ee4:	bf00      	nop
 8005ee6:	371c      	adds	r7, #28
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr

08005ef0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b087      	sub	sp, #28
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6a1b      	ldr	r3, [r3, #32]
 8005f00:	f023 0210 	bic.w	r2, r3, #16
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	699b      	ldr	r3, [r3, #24]
 8005f0c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a1b      	ldr	r3, [r3, #32]
 8005f12:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f1a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	031b      	lsls	r3, r3, #12
 8005f20:	697a      	ldr	r2, [r7, #20]
 8005f22:	4313      	orrs	r3, r2
 8005f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f26:	693b      	ldr	r3, [r7, #16]
 8005f28:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	693a      	ldr	r2, [r7, #16]
 8005f34:	4313      	orrs	r3, r2
 8005f36:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	697a      	ldr	r2, [r7, #20]
 8005f3c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	621a      	str	r2, [r3, #32]
}
 8005f44:	bf00      	nop
 8005f46:	371c      	adds	r7, #28
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b087      	sub	sp, #28
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
 8005f5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6a1b      	ldr	r3, [r3, #32]
 8005f62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	69db      	ldr	r3, [r3, #28]
 8005f6e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6a1b      	ldr	r3, [r3, #32]
 8005f74:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	f023 0303 	bic.w	r3, r3, #3
 8005f7c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005f86:	697b      	ldr	r3, [r7, #20]
 8005f88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f8c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	011b      	lsls	r3, r3, #4
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	697a      	ldr	r2, [r7, #20]
 8005f96:	4313      	orrs	r3, r2
 8005f98:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005fa0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	021b      	lsls	r3, r3, #8
 8005fa6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005faa:	693a      	ldr	r2, [r7, #16]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	697a      	ldr	r2, [r7, #20]
 8005fb4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	621a      	str	r2, [r3, #32]
}
 8005fbc:	bf00      	nop
 8005fbe:	371c      	adds	r7, #28
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	60b9      	str	r1, [r7, #8]
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	6a1b      	ldr	r3, [r3, #32]
 8005fda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	69db      	ldr	r3, [r3, #28]
 8005fe6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6a1b      	ldr	r3, [r3, #32]
 8005fec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ff4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	021b      	lsls	r3, r3, #8
 8005ffa:	697a      	ldr	r2, [r7, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006000:	697b      	ldr	r3, [r7, #20]
 8006002:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006006:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	031b      	lsls	r3, r3, #12
 800600c:	b29b      	uxth	r3, r3
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	4313      	orrs	r3, r2
 8006012:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800601a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	031b      	lsls	r3, r3, #12
 8006020:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	f043 0307 	orr.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	431a      	orrs	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	60f8      	str	r0, [r7, #12]
 80060c0:	60b9      	str	r1, [r7, #8]
 80060c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f003 031f 	and.w	r3, r3, #31
 80060ca:	2201      	movs	r2, #1
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6a1a      	ldr	r2, [r3, #32]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	43db      	mvns	r3, r3
 80060da:	401a      	ands	r2, r3
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	6a1a      	ldr	r2, [r3, #32]
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	f003 031f 	and.w	r3, r3, #31
 80060ea:	6879      	ldr	r1, [r7, #4]
 80060ec:	fa01 f303 	lsl.w	r3, r1, r3
 80060f0:	431a      	orrs	r2, r3
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	621a      	str	r2, [r3, #32]
}
 80060f6:	bf00      	nop
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006104:	b480      	push	{r7}
 8006106:	b085      	sub	sp, #20
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006114:	2b01      	cmp	r3, #1
 8006116:	d101      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006118:	2302      	movs	r3, #2
 800611a:	e05a      	b.n	80061d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2201      	movs	r2, #1
 8006120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68fa      	ldr	r2, [r7, #12]
 800614a:	4313      	orrs	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	68fa      	ldr	r2, [r7, #12]
 8006154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	4a21      	ldr	r2, [pc, #132]	; (80061e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800615c:	4293      	cmp	r3, r2
 800615e:	d022      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006168:	d01d      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a1d      	ldr	r2, [pc, #116]	; (80061e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d018      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4a1b      	ldr	r2, [pc, #108]	; (80061e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800617a:	4293      	cmp	r3, r2
 800617c:	d013      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	4a1a      	ldr	r2, [pc, #104]	; (80061ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d00e      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a18      	ldr	r2, [pc, #96]	; (80061f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800618e:	4293      	cmp	r3, r2
 8006190:	d009      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a17      	ldr	r2, [pc, #92]	; (80061f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d004      	beq.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4a15      	ldr	r2, [pc, #84]	; (80061f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80061a2:	4293      	cmp	r3, r2
 80061a4:	d10c      	bne.n	80061c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	68ba      	ldr	r2, [r7, #8]
 80061b4:	4313      	orrs	r3, r2
 80061b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2200      	movs	r2, #0
 80061cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061d0:	2300      	movs	r3, #0
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40010400 	.word	0x40010400
 80061f4:	40014000 	.word	0x40014000
 80061f8:	40001800 	.word	0x40001800

080061fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b085      	sub	sp, #20
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006206:	2300      	movs	r3, #0
 8006208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006210:	2b01      	cmp	r3, #1
 8006212:	d101      	bne.n	8006218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006214:	2302      	movs	r3, #2
 8006216:	e03d      	b.n	8006294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	68db      	ldr	r3, [r3, #12]
 800622a:	4313      	orrs	r3, r2
 800622c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	4313      	orrs	r3, r2
 800623a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	685b      	ldr	r3, [r3, #4]
 8006246:	4313      	orrs	r3, r2
 8006248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4313      	orrs	r3, r2
 8006256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	691b      	ldr	r3, [r3, #16]
 8006262:	4313      	orrs	r3, r2
 8006264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	69db      	ldr	r3, [r3, #28]
 800627e:	4313      	orrs	r3, r2
 8006280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	68fa      	ldr	r2, [r7, #12]
 8006288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2200      	movs	r2, #0
 800628e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006292:	2300      	movs	r3, #0
}
 8006294:	4618      	mov	r0, r3
 8006296:	3714      	adds	r7, #20
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b083      	sub	sp, #12
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr

080062b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b083      	sub	sp, #12
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062bc:	bf00      	nop
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b082      	sub	sp, #8
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d101      	bne.n	80062da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e03f      	b.n	800635a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d106      	bne.n	80062f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f7fc fdb2 	bl	8002e58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2224      	movs	r2, #36	; 0x24
 80062f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68da      	ldr	r2, [r3, #12]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800630a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	f000 f829 	bl	8006364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	691a      	ldr	r2, [r3, #16]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	695a      	ldr	r2, [r3, #20]
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	68da      	ldr	r2, [r3, #12]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2220      	movs	r2, #32
 800634c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2220      	movs	r2, #32
 8006354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006368:	b09f      	sub	sp, #124	; 0x7c
 800636a:	af00      	add	r7, sp, #0
 800636c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800636e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	691b      	ldr	r3, [r3, #16]
 8006374:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637a:	68d9      	ldr	r1, [r3, #12]
 800637c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	ea40 0301 	orr.w	r3, r0, r1
 8006384:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006386:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006388:	689a      	ldr	r2, [r3, #8]
 800638a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800638c:	691b      	ldr	r3, [r3, #16]
 800638e:	431a      	orrs	r2, r3
 8006390:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006392:	695b      	ldr	r3, [r3, #20]
 8006394:	431a      	orrs	r2, r3
 8006396:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006398:	69db      	ldr	r3, [r3, #28]
 800639a:	4313      	orrs	r3, r2
 800639c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800639e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68db      	ldr	r3, [r3, #12]
 80063a4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80063a8:	f021 010c 	bic.w	r1, r1, #12
 80063ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80063b2:	430b      	orrs	r3, r1
 80063b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80063b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80063c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c2:	6999      	ldr	r1, [r3, #24]
 80063c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063c6:	681a      	ldr	r2, [r3, #0]
 80063c8:	ea40 0301 	orr.w	r3, r0, r1
 80063cc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	4bc5      	ldr	r3, [pc, #788]	; (80066e8 <UART_SetConfig+0x384>)
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d004      	beq.n	80063e2 <UART_SetConfig+0x7e>
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	681a      	ldr	r2, [r3, #0]
 80063dc:	4bc3      	ldr	r3, [pc, #780]	; (80066ec <UART_SetConfig+0x388>)
 80063de:	429a      	cmp	r2, r3
 80063e0:	d103      	bne.n	80063ea <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80063e2:	f7fe fb85 	bl	8004af0 <HAL_RCC_GetPCLK2Freq>
 80063e6:	6778      	str	r0, [r7, #116]	; 0x74
 80063e8:	e002      	b.n	80063f0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80063ea:	f7fe fb6d 	bl	8004ac8 <HAL_RCC_GetPCLK1Freq>
 80063ee:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	69db      	ldr	r3, [r3, #28]
 80063f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063f8:	f040 80b6 	bne.w	8006568 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80063fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80063fe:	461c      	mov	r4, r3
 8006400:	f04f 0500 	mov.w	r5, #0
 8006404:	4622      	mov	r2, r4
 8006406:	462b      	mov	r3, r5
 8006408:	1891      	adds	r1, r2, r2
 800640a:	6439      	str	r1, [r7, #64]	; 0x40
 800640c:	415b      	adcs	r3, r3
 800640e:	647b      	str	r3, [r7, #68]	; 0x44
 8006410:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006414:	1912      	adds	r2, r2, r4
 8006416:	eb45 0303 	adc.w	r3, r5, r3
 800641a:	f04f 0000 	mov.w	r0, #0
 800641e:	f04f 0100 	mov.w	r1, #0
 8006422:	00d9      	lsls	r1, r3, #3
 8006424:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006428:	00d0      	lsls	r0, r2, #3
 800642a:	4602      	mov	r2, r0
 800642c:	460b      	mov	r3, r1
 800642e:	1911      	adds	r1, r2, r4
 8006430:	6639      	str	r1, [r7, #96]	; 0x60
 8006432:	416b      	adcs	r3, r5
 8006434:	667b      	str	r3, [r7, #100]	; 0x64
 8006436:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	461a      	mov	r2, r3
 800643c:	f04f 0300 	mov.w	r3, #0
 8006440:	1891      	adds	r1, r2, r2
 8006442:	63b9      	str	r1, [r7, #56]	; 0x38
 8006444:	415b      	adcs	r3, r3
 8006446:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006448:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800644c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006450:	f7fa fa64 	bl	800091c <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4ba5      	ldr	r3, [pc, #660]	; (80066f0 <UART_SetConfig+0x38c>)
 800645a:	fba3 2302 	umull	r2, r3, r3, r2
 800645e:	095b      	lsrs	r3, r3, #5
 8006460:	011e      	lsls	r6, r3, #4
 8006462:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006464:	461c      	mov	r4, r3
 8006466:	f04f 0500 	mov.w	r5, #0
 800646a:	4622      	mov	r2, r4
 800646c:	462b      	mov	r3, r5
 800646e:	1891      	adds	r1, r2, r2
 8006470:	6339      	str	r1, [r7, #48]	; 0x30
 8006472:	415b      	adcs	r3, r3
 8006474:	637b      	str	r3, [r7, #52]	; 0x34
 8006476:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800647a:	1912      	adds	r2, r2, r4
 800647c:	eb45 0303 	adc.w	r3, r5, r3
 8006480:	f04f 0000 	mov.w	r0, #0
 8006484:	f04f 0100 	mov.w	r1, #0
 8006488:	00d9      	lsls	r1, r3, #3
 800648a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800648e:	00d0      	lsls	r0, r2, #3
 8006490:	4602      	mov	r2, r0
 8006492:	460b      	mov	r3, r1
 8006494:	1911      	adds	r1, r2, r4
 8006496:	65b9      	str	r1, [r7, #88]	; 0x58
 8006498:	416b      	adcs	r3, r5
 800649a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800649c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	461a      	mov	r2, r3
 80064a2:	f04f 0300 	mov.w	r3, #0
 80064a6:	1891      	adds	r1, r2, r2
 80064a8:	62b9      	str	r1, [r7, #40]	; 0x28
 80064aa:	415b      	adcs	r3, r3
 80064ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80064ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80064b2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80064b6:	f7fa fa31 	bl	800091c <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4b8c      	ldr	r3, [pc, #560]	; (80066f0 <UART_SetConfig+0x38c>)
 80064c0:	fba3 1302 	umull	r1, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	2164      	movs	r1, #100	; 0x64
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	3332      	adds	r3, #50	; 0x32
 80064d2:	4a87      	ldr	r2, [pc, #540]	; (80066f0 <UART_SetConfig+0x38c>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e0:	441e      	add	r6, r3
 80064e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064e4:	4618      	mov	r0, r3
 80064e6:	f04f 0100 	mov.w	r1, #0
 80064ea:	4602      	mov	r2, r0
 80064ec:	460b      	mov	r3, r1
 80064ee:	1894      	adds	r4, r2, r2
 80064f0:	623c      	str	r4, [r7, #32]
 80064f2:	415b      	adcs	r3, r3
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
 80064f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80064fa:	1812      	adds	r2, r2, r0
 80064fc:	eb41 0303 	adc.w	r3, r1, r3
 8006500:	f04f 0400 	mov.w	r4, #0
 8006504:	f04f 0500 	mov.w	r5, #0
 8006508:	00dd      	lsls	r5, r3, #3
 800650a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800650e:	00d4      	lsls	r4, r2, #3
 8006510:	4622      	mov	r2, r4
 8006512:	462b      	mov	r3, r5
 8006514:	1814      	adds	r4, r2, r0
 8006516:	653c      	str	r4, [r7, #80]	; 0x50
 8006518:	414b      	adcs	r3, r1
 800651a:	657b      	str	r3, [r7, #84]	; 0x54
 800651c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800651e:	685b      	ldr	r3, [r3, #4]
 8006520:	461a      	mov	r2, r3
 8006522:	f04f 0300 	mov.w	r3, #0
 8006526:	1891      	adds	r1, r2, r2
 8006528:	61b9      	str	r1, [r7, #24]
 800652a:	415b      	adcs	r3, r3
 800652c:	61fb      	str	r3, [r7, #28]
 800652e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006532:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006536:	f7fa f9f1 	bl	800091c <__aeabi_uldivmod>
 800653a:	4602      	mov	r2, r0
 800653c:	460b      	mov	r3, r1
 800653e:	4b6c      	ldr	r3, [pc, #432]	; (80066f0 <UART_SetConfig+0x38c>)
 8006540:	fba3 1302 	umull	r1, r3, r3, r2
 8006544:	095b      	lsrs	r3, r3, #5
 8006546:	2164      	movs	r1, #100	; 0x64
 8006548:	fb01 f303 	mul.w	r3, r1, r3
 800654c:	1ad3      	subs	r3, r2, r3
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	3332      	adds	r3, #50	; 0x32
 8006552:	4a67      	ldr	r2, [pc, #412]	; (80066f0 <UART_SetConfig+0x38c>)
 8006554:	fba2 2303 	umull	r2, r3, r2, r3
 8006558:	095b      	lsrs	r3, r3, #5
 800655a:	f003 0207 	and.w	r2, r3, #7
 800655e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	4432      	add	r2, r6
 8006564:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006566:	e0b9      	b.n	80066dc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800656a:	461c      	mov	r4, r3
 800656c:	f04f 0500 	mov.w	r5, #0
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1891      	adds	r1, r2, r2
 8006576:	6139      	str	r1, [r7, #16]
 8006578:	415b      	adcs	r3, r3
 800657a:	617b      	str	r3, [r7, #20]
 800657c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006580:	1912      	adds	r2, r2, r4
 8006582:	eb45 0303 	adc.w	r3, r5, r3
 8006586:	f04f 0000 	mov.w	r0, #0
 800658a:	f04f 0100 	mov.w	r1, #0
 800658e:	00d9      	lsls	r1, r3, #3
 8006590:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006594:	00d0      	lsls	r0, r2, #3
 8006596:	4602      	mov	r2, r0
 8006598:	460b      	mov	r3, r1
 800659a:	eb12 0804 	adds.w	r8, r2, r4
 800659e:	eb43 0905 	adc.w	r9, r3, r5
 80065a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	4618      	mov	r0, r3
 80065a8:	f04f 0100 	mov.w	r1, #0
 80065ac:	f04f 0200 	mov.w	r2, #0
 80065b0:	f04f 0300 	mov.w	r3, #0
 80065b4:	008b      	lsls	r3, r1, #2
 80065b6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80065ba:	0082      	lsls	r2, r0, #2
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	f7fa f9ac 	bl	800091c <__aeabi_uldivmod>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4b49      	ldr	r3, [pc, #292]	; (80066f0 <UART_SetConfig+0x38c>)
 80065ca:	fba3 2302 	umull	r2, r3, r3, r2
 80065ce:	095b      	lsrs	r3, r3, #5
 80065d0:	011e      	lsls	r6, r3, #4
 80065d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065d4:	4618      	mov	r0, r3
 80065d6:	f04f 0100 	mov.w	r1, #0
 80065da:	4602      	mov	r2, r0
 80065dc:	460b      	mov	r3, r1
 80065de:	1894      	adds	r4, r2, r2
 80065e0:	60bc      	str	r4, [r7, #8]
 80065e2:	415b      	adcs	r3, r3
 80065e4:	60fb      	str	r3, [r7, #12]
 80065e6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065ea:	1812      	adds	r2, r2, r0
 80065ec:	eb41 0303 	adc.w	r3, r1, r3
 80065f0:	f04f 0400 	mov.w	r4, #0
 80065f4:	f04f 0500 	mov.w	r5, #0
 80065f8:	00dd      	lsls	r5, r3, #3
 80065fa:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80065fe:	00d4      	lsls	r4, r2, #3
 8006600:	4622      	mov	r2, r4
 8006602:	462b      	mov	r3, r5
 8006604:	1814      	adds	r4, r2, r0
 8006606:	64bc      	str	r4, [r7, #72]	; 0x48
 8006608:	414b      	adcs	r3, r1
 800660a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800660c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	4618      	mov	r0, r3
 8006612:	f04f 0100 	mov.w	r1, #0
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	008b      	lsls	r3, r1, #2
 8006620:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006624:	0082      	lsls	r2, r0, #2
 8006626:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800662a:	f7fa f977 	bl	800091c <__aeabi_uldivmod>
 800662e:	4602      	mov	r2, r0
 8006630:	460b      	mov	r3, r1
 8006632:	4b2f      	ldr	r3, [pc, #188]	; (80066f0 <UART_SetConfig+0x38c>)
 8006634:	fba3 1302 	umull	r1, r3, r3, r2
 8006638:	095b      	lsrs	r3, r3, #5
 800663a:	2164      	movs	r1, #100	; 0x64
 800663c:	fb01 f303 	mul.w	r3, r1, r3
 8006640:	1ad3      	subs	r3, r2, r3
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	3332      	adds	r3, #50	; 0x32
 8006646:	4a2a      	ldr	r2, [pc, #168]	; (80066f0 <UART_SetConfig+0x38c>)
 8006648:	fba2 2303 	umull	r2, r3, r2, r3
 800664c:	095b      	lsrs	r3, r3, #5
 800664e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006652:	441e      	add	r6, r3
 8006654:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006656:	4618      	mov	r0, r3
 8006658:	f04f 0100 	mov.w	r1, #0
 800665c:	4602      	mov	r2, r0
 800665e:	460b      	mov	r3, r1
 8006660:	1894      	adds	r4, r2, r2
 8006662:	603c      	str	r4, [r7, #0]
 8006664:	415b      	adcs	r3, r3
 8006666:	607b      	str	r3, [r7, #4]
 8006668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800666c:	1812      	adds	r2, r2, r0
 800666e:	eb41 0303 	adc.w	r3, r1, r3
 8006672:	f04f 0400 	mov.w	r4, #0
 8006676:	f04f 0500 	mov.w	r5, #0
 800667a:	00dd      	lsls	r5, r3, #3
 800667c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006680:	00d4      	lsls	r4, r2, #3
 8006682:	4622      	mov	r2, r4
 8006684:	462b      	mov	r3, r5
 8006686:	eb12 0a00 	adds.w	sl, r2, r0
 800668a:	eb43 0b01 	adc.w	fp, r3, r1
 800668e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	4618      	mov	r0, r3
 8006694:	f04f 0100 	mov.w	r1, #0
 8006698:	f04f 0200 	mov.w	r2, #0
 800669c:	f04f 0300 	mov.w	r3, #0
 80066a0:	008b      	lsls	r3, r1, #2
 80066a2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80066a6:	0082      	lsls	r2, r0, #2
 80066a8:	4650      	mov	r0, sl
 80066aa:	4659      	mov	r1, fp
 80066ac:	f7fa f936 	bl	800091c <__aeabi_uldivmod>
 80066b0:	4602      	mov	r2, r0
 80066b2:	460b      	mov	r3, r1
 80066b4:	4b0e      	ldr	r3, [pc, #56]	; (80066f0 <UART_SetConfig+0x38c>)
 80066b6:	fba3 1302 	umull	r1, r3, r3, r2
 80066ba:	095b      	lsrs	r3, r3, #5
 80066bc:	2164      	movs	r1, #100	; 0x64
 80066be:	fb01 f303 	mul.w	r3, r1, r3
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	3332      	adds	r3, #50	; 0x32
 80066c8:	4a09      	ldr	r2, [pc, #36]	; (80066f0 <UART_SetConfig+0x38c>)
 80066ca:	fba2 2303 	umull	r2, r3, r2, r3
 80066ce:	095b      	lsrs	r3, r3, #5
 80066d0:	f003 020f 	and.w	r2, r3, #15
 80066d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4432      	add	r2, r6
 80066da:	609a      	str	r2, [r3, #8]
}
 80066dc:	bf00      	nop
 80066de:	377c      	adds	r7, #124	; 0x7c
 80066e0:	46bd      	mov	sp, r7
 80066e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066e6:	bf00      	nop
 80066e8:	40011000 	.word	0x40011000
 80066ec:	40011400 	.word	0x40011400
 80066f0:	51eb851f 	.word	0x51eb851f

080066f4 <__errno>:
 80066f4:	4b01      	ldr	r3, [pc, #4]	; (80066fc <__errno+0x8>)
 80066f6:	6818      	ldr	r0, [r3, #0]
 80066f8:	4770      	bx	lr
 80066fa:	bf00      	nop
 80066fc:	20000014 	.word	0x20000014

08006700 <__libc_init_array>:
 8006700:	b570      	push	{r4, r5, r6, lr}
 8006702:	4d0d      	ldr	r5, [pc, #52]	; (8006738 <__libc_init_array+0x38>)
 8006704:	4c0d      	ldr	r4, [pc, #52]	; (800673c <__libc_init_array+0x3c>)
 8006706:	1b64      	subs	r4, r4, r5
 8006708:	10a4      	asrs	r4, r4, #2
 800670a:	2600      	movs	r6, #0
 800670c:	42a6      	cmp	r6, r4
 800670e:	d109      	bne.n	8006724 <__libc_init_array+0x24>
 8006710:	4d0b      	ldr	r5, [pc, #44]	; (8006740 <__libc_init_array+0x40>)
 8006712:	4c0c      	ldr	r4, [pc, #48]	; (8006744 <__libc_init_array+0x44>)
 8006714:	f000 fc4e 	bl	8006fb4 <_init>
 8006718:	1b64      	subs	r4, r4, r5
 800671a:	10a4      	asrs	r4, r4, #2
 800671c:	2600      	movs	r6, #0
 800671e:	42a6      	cmp	r6, r4
 8006720:	d105      	bne.n	800672e <__libc_init_array+0x2e>
 8006722:	bd70      	pop	{r4, r5, r6, pc}
 8006724:	f855 3b04 	ldr.w	r3, [r5], #4
 8006728:	4798      	blx	r3
 800672a:	3601      	adds	r6, #1
 800672c:	e7ee      	b.n	800670c <__libc_init_array+0xc>
 800672e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006732:	4798      	blx	r3
 8006734:	3601      	adds	r6, #1
 8006736:	e7f2      	b.n	800671e <__libc_init_array+0x1e>
 8006738:	08007438 	.word	0x08007438
 800673c:	08007438 	.word	0x08007438
 8006740:	08007438 	.word	0x08007438
 8006744:	0800743c 	.word	0x0800743c

08006748 <memset>:
 8006748:	4402      	add	r2, r0
 800674a:	4603      	mov	r3, r0
 800674c:	4293      	cmp	r3, r2
 800674e:	d100      	bne.n	8006752 <memset+0xa>
 8006750:	4770      	bx	lr
 8006752:	f803 1b01 	strb.w	r1, [r3], #1
 8006756:	e7f9      	b.n	800674c <memset+0x4>

08006758 <_vsiprintf_r>:
 8006758:	b500      	push	{lr}
 800675a:	b09b      	sub	sp, #108	; 0x6c
 800675c:	9100      	str	r1, [sp, #0]
 800675e:	9104      	str	r1, [sp, #16]
 8006760:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006764:	9105      	str	r1, [sp, #20]
 8006766:	9102      	str	r1, [sp, #8]
 8006768:	4905      	ldr	r1, [pc, #20]	; (8006780 <_vsiprintf_r+0x28>)
 800676a:	9103      	str	r1, [sp, #12]
 800676c:	4669      	mov	r1, sp
 800676e:	f000 f86f 	bl	8006850 <_svfiprintf_r>
 8006772:	9b00      	ldr	r3, [sp, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	701a      	strb	r2, [r3, #0]
 8006778:	b01b      	add	sp, #108	; 0x6c
 800677a:	f85d fb04 	ldr.w	pc, [sp], #4
 800677e:	bf00      	nop
 8006780:	ffff0208 	.word	0xffff0208

08006784 <vsiprintf>:
 8006784:	4613      	mov	r3, r2
 8006786:	460a      	mov	r2, r1
 8006788:	4601      	mov	r1, r0
 800678a:	4802      	ldr	r0, [pc, #8]	; (8006794 <vsiprintf+0x10>)
 800678c:	6800      	ldr	r0, [r0, #0]
 800678e:	f7ff bfe3 	b.w	8006758 <_vsiprintf_r>
 8006792:	bf00      	nop
 8006794:	20000014 	.word	0x20000014

08006798 <__ssputs_r>:
 8006798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800679c:	688e      	ldr	r6, [r1, #8]
 800679e:	429e      	cmp	r6, r3
 80067a0:	4682      	mov	sl, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	4690      	mov	r8, r2
 80067a6:	461f      	mov	r7, r3
 80067a8:	d838      	bhi.n	800681c <__ssputs_r+0x84>
 80067aa:	898a      	ldrh	r2, [r1, #12]
 80067ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80067b0:	d032      	beq.n	8006818 <__ssputs_r+0x80>
 80067b2:	6825      	ldr	r5, [r4, #0]
 80067b4:	6909      	ldr	r1, [r1, #16]
 80067b6:	eba5 0901 	sub.w	r9, r5, r1
 80067ba:	6965      	ldr	r5, [r4, #20]
 80067bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80067c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80067c4:	3301      	adds	r3, #1
 80067c6:	444b      	add	r3, r9
 80067c8:	106d      	asrs	r5, r5, #1
 80067ca:	429d      	cmp	r5, r3
 80067cc:	bf38      	it	cc
 80067ce:	461d      	movcc	r5, r3
 80067d0:	0553      	lsls	r3, r2, #21
 80067d2:	d531      	bpl.n	8006838 <__ssputs_r+0xa0>
 80067d4:	4629      	mov	r1, r5
 80067d6:	f000 fb47 	bl	8006e68 <_malloc_r>
 80067da:	4606      	mov	r6, r0
 80067dc:	b950      	cbnz	r0, 80067f4 <__ssputs_r+0x5c>
 80067de:	230c      	movs	r3, #12
 80067e0:	f8ca 3000 	str.w	r3, [sl]
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067ea:	81a3      	strh	r3, [r4, #12]
 80067ec:	f04f 30ff 	mov.w	r0, #4294967295
 80067f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067f4:	6921      	ldr	r1, [r4, #16]
 80067f6:	464a      	mov	r2, r9
 80067f8:	f000 fabe 	bl	8006d78 <memcpy>
 80067fc:	89a3      	ldrh	r3, [r4, #12]
 80067fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006802:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006806:	81a3      	strh	r3, [r4, #12]
 8006808:	6126      	str	r6, [r4, #16]
 800680a:	6165      	str	r5, [r4, #20]
 800680c:	444e      	add	r6, r9
 800680e:	eba5 0509 	sub.w	r5, r5, r9
 8006812:	6026      	str	r6, [r4, #0]
 8006814:	60a5      	str	r5, [r4, #8]
 8006816:	463e      	mov	r6, r7
 8006818:	42be      	cmp	r6, r7
 800681a:	d900      	bls.n	800681e <__ssputs_r+0x86>
 800681c:	463e      	mov	r6, r7
 800681e:	4632      	mov	r2, r6
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	4641      	mov	r1, r8
 8006824:	f000 fab6 	bl	8006d94 <memmove>
 8006828:	68a3      	ldr	r3, [r4, #8]
 800682a:	6822      	ldr	r2, [r4, #0]
 800682c:	1b9b      	subs	r3, r3, r6
 800682e:	4432      	add	r2, r6
 8006830:	60a3      	str	r3, [r4, #8]
 8006832:	6022      	str	r2, [r4, #0]
 8006834:	2000      	movs	r0, #0
 8006836:	e7db      	b.n	80067f0 <__ssputs_r+0x58>
 8006838:	462a      	mov	r2, r5
 800683a:	f000 fb6f 	bl	8006f1c <_realloc_r>
 800683e:	4606      	mov	r6, r0
 8006840:	2800      	cmp	r0, #0
 8006842:	d1e1      	bne.n	8006808 <__ssputs_r+0x70>
 8006844:	6921      	ldr	r1, [r4, #16]
 8006846:	4650      	mov	r0, sl
 8006848:	f000 fabe 	bl	8006dc8 <_free_r>
 800684c:	e7c7      	b.n	80067de <__ssputs_r+0x46>
	...

08006850 <_svfiprintf_r>:
 8006850:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006854:	4698      	mov	r8, r3
 8006856:	898b      	ldrh	r3, [r1, #12]
 8006858:	061b      	lsls	r3, r3, #24
 800685a:	b09d      	sub	sp, #116	; 0x74
 800685c:	4607      	mov	r7, r0
 800685e:	460d      	mov	r5, r1
 8006860:	4614      	mov	r4, r2
 8006862:	d50e      	bpl.n	8006882 <_svfiprintf_r+0x32>
 8006864:	690b      	ldr	r3, [r1, #16]
 8006866:	b963      	cbnz	r3, 8006882 <_svfiprintf_r+0x32>
 8006868:	2140      	movs	r1, #64	; 0x40
 800686a:	f000 fafd 	bl	8006e68 <_malloc_r>
 800686e:	6028      	str	r0, [r5, #0]
 8006870:	6128      	str	r0, [r5, #16]
 8006872:	b920      	cbnz	r0, 800687e <_svfiprintf_r+0x2e>
 8006874:	230c      	movs	r3, #12
 8006876:	603b      	str	r3, [r7, #0]
 8006878:	f04f 30ff 	mov.w	r0, #4294967295
 800687c:	e0d1      	b.n	8006a22 <_svfiprintf_r+0x1d2>
 800687e:	2340      	movs	r3, #64	; 0x40
 8006880:	616b      	str	r3, [r5, #20]
 8006882:	2300      	movs	r3, #0
 8006884:	9309      	str	r3, [sp, #36]	; 0x24
 8006886:	2320      	movs	r3, #32
 8006888:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800688c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006890:	2330      	movs	r3, #48	; 0x30
 8006892:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a3c <_svfiprintf_r+0x1ec>
 8006896:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800689a:	f04f 0901 	mov.w	r9, #1
 800689e:	4623      	mov	r3, r4
 80068a0:	469a      	mov	sl, r3
 80068a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068a6:	b10a      	cbz	r2, 80068ac <_svfiprintf_r+0x5c>
 80068a8:	2a25      	cmp	r2, #37	; 0x25
 80068aa:	d1f9      	bne.n	80068a0 <_svfiprintf_r+0x50>
 80068ac:	ebba 0b04 	subs.w	fp, sl, r4
 80068b0:	d00b      	beq.n	80068ca <_svfiprintf_r+0x7a>
 80068b2:	465b      	mov	r3, fp
 80068b4:	4622      	mov	r2, r4
 80068b6:	4629      	mov	r1, r5
 80068b8:	4638      	mov	r0, r7
 80068ba:	f7ff ff6d 	bl	8006798 <__ssputs_r>
 80068be:	3001      	adds	r0, #1
 80068c0:	f000 80aa 	beq.w	8006a18 <_svfiprintf_r+0x1c8>
 80068c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068c6:	445a      	add	r2, fp
 80068c8:	9209      	str	r2, [sp, #36]	; 0x24
 80068ca:	f89a 3000 	ldrb.w	r3, [sl]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	f000 80a2 	beq.w	8006a18 <_svfiprintf_r+0x1c8>
 80068d4:	2300      	movs	r3, #0
 80068d6:	f04f 32ff 	mov.w	r2, #4294967295
 80068da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80068de:	f10a 0a01 	add.w	sl, sl, #1
 80068e2:	9304      	str	r3, [sp, #16]
 80068e4:	9307      	str	r3, [sp, #28]
 80068e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80068ea:	931a      	str	r3, [sp, #104]	; 0x68
 80068ec:	4654      	mov	r4, sl
 80068ee:	2205      	movs	r2, #5
 80068f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f4:	4851      	ldr	r0, [pc, #324]	; (8006a3c <_svfiprintf_r+0x1ec>)
 80068f6:	f7f9 fc6b 	bl	80001d0 <memchr>
 80068fa:	9a04      	ldr	r2, [sp, #16]
 80068fc:	b9d8      	cbnz	r0, 8006936 <_svfiprintf_r+0xe6>
 80068fe:	06d0      	lsls	r0, r2, #27
 8006900:	bf44      	itt	mi
 8006902:	2320      	movmi	r3, #32
 8006904:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006908:	0711      	lsls	r1, r2, #28
 800690a:	bf44      	itt	mi
 800690c:	232b      	movmi	r3, #43	; 0x2b
 800690e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006912:	f89a 3000 	ldrb.w	r3, [sl]
 8006916:	2b2a      	cmp	r3, #42	; 0x2a
 8006918:	d015      	beq.n	8006946 <_svfiprintf_r+0xf6>
 800691a:	9a07      	ldr	r2, [sp, #28]
 800691c:	4654      	mov	r4, sl
 800691e:	2000      	movs	r0, #0
 8006920:	f04f 0c0a 	mov.w	ip, #10
 8006924:	4621      	mov	r1, r4
 8006926:	f811 3b01 	ldrb.w	r3, [r1], #1
 800692a:	3b30      	subs	r3, #48	; 0x30
 800692c:	2b09      	cmp	r3, #9
 800692e:	d94e      	bls.n	80069ce <_svfiprintf_r+0x17e>
 8006930:	b1b0      	cbz	r0, 8006960 <_svfiprintf_r+0x110>
 8006932:	9207      	str	r2, [sp, #28]
 8006934:	e014      	b.n	8006960 <_svfiprintf_r+0x110>
 8006936:	eba0 0308 	sub.w	r3, r0, r8
 800693a:	fa09 f303 	lsl.w	r3, r9, r3
 800693e:	4313      	orrs	r3, r2
 8006940:	9304      	str	r3, [sp, #16]
 8006942:	46a2      	mov	sl, r4
 8006944:	e7d2      	b.n	80068ec <_svfiprintf_r+0x9c>
 8006946:	9b03      	ldr	r3, [sp, #12]
 8006948:	1d19      	adds	r1, r3, #4
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	9103      	str	r1, [sp, #12]
 800694e:	2b00      	cmp	r3, #0
 8006950:	bfbb      	ittet	lt
 8006952:	425b      	neglt	r3, r3
 8006954:	f042 0202 	orrlt.w	r2, r2, #2
 8006958:	9307      	strge	r3, [sp, #28]
 800695a:	9307      	strlt	r3, [sp, #28]
 800695c:	bfb8      	it	lt
 800695e:	9204      	strlt	r2, [sp, #16]
 8006960:	7823      	ldrb	r3, [r4, #0]
 8006962:	2b2e      	cmp	r3, #46	; 0x2e
 8006964:	d10c      	bne.n	8006980 <_svfiprintf_r+0x130>
 8006966:	7863      	ldrb	r3, [r4, #1]
 8006968:	2b2a      	cmp	r3, #42	; 0x2a
 800696a:	d135      	bne.n	80069d8 <_svfiprintf_r+0x188>
 800696c:	9b03      	ldr	r3, [sp, #12]
 800696e:	1d1a      	adds	r2, r3, #4
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	9203      	str	r2, [sp, #12]
 8006974:	2b00      	cmp	r3, #0
 8006976:	bfb8      	it	lt
 8006978:	f04f 33ff 	movlt.w	r3, #4294967295
 800697c:	3402      	adds	r4, #2
 800697e:	9305      	str	r3, [sp, #20]
 8006980:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006a4c <_svfiprintf_r+0x1fc>
 8006984:	7821      	ldrb	r1, [r4, #0]
 8006986:	2203      	movs	r2, #3
 8006988:	4650      	mov	r0, sl
 800698a:	f7f9 fc21 	bl	80001d0 <memchr>
 800698e:	b140      	cbz	r0, 80069a2 <_svfiprintf_r+0x152>
 8006990:	2340      	movs	r3, #64	; 0x40
 8006992:	eba0 000a 	sub.w	r0, r0, sl
 8006996:	fa03 f000 	lsl.w	r0, r3, r0
 800699a:	9b04      	ldr	r3, [sp, #16]
 800699c:	4303      	orrs	r3, r0
 800699e:	3401      	adds	r4, #1
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069a6:	4826      	ldr	r0, [pc, #152]	; (8006a40 <_svfiprintf_r+0x1f0>)
 80069a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069ac:	2206      	movs	r2, #6
 80069ae:	f7f9 fc0f 	bl	80001d0 <memchr>
 80069b2:	2800      	cmp	r0, #0
 80069b4:	d038      	beq.n	8006a28 <_svfiprintf_r+0x1d8>
 80069b6:	4b23      	ldr	r3, [pc, #140]	; (8006a44 <_svfiprintf_r+0x1f4>)
 80069b8:	bb1b      	cbnz	r3, 8006a02 <_svfiprintf_r+0x1b2>
 80069ba:	9b03      	ldr	r3, [sp, #12]
 80069bc:	3307      	adds	r3, #7
 80069be:	f023 0307 	bic.w	r3, r3, #7
 80069c2:	3308      	adds	r3, #8
 80069c4:	9303      	str	r3, [sp, #12]
 80069c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069c8:	4433      	add	r3, r6
 80069ca:	9309      	str	r3, [sp, #36]	; 0x24
 80069cc:	e767      	b.n	800689e <_svfiprintf_r+0x4e>
 80069ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80069d2:	460c      	mov	r4, r1
 80069d4:	2001      	movs	r0, #1
 80069d6:	e7a5      	b.n	8006924 <_svfiprintf_r+0xd4>
 80069d8:	2300      	movs	r3, #0
 80069da:	3401      	adds	r4, #1
 80069dc:	9305      	str	r3, [sp, #20]
 80069de:	4619      	mov	r1, r3
 80069e0:	f04f 0c0a 	mov.w	ip, #10
 80069e4:	4620      	mov	r0, r4
 80069e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069ea:	3a30      	subs	r2, #48	; 0x30
 80069ec:	2a09      	cmp	r2, #9
 80069ee:	d903      	bls.n	80069f8 <_svfiprintf_r+0x1a8>
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d0c5      	beq.n	8006980 <_svfiprintf_r+0x130>
 80069f4:	9105      	str	r1, [sp, #20]
 80069f6:	e7c3      	b.n	8006980 <_svfiprintf_r+0x130>
 80069f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80069fc:	4604      	mov	r4, r0
 80069fe:	2301      	movs	r3, #1
 8006a00:	e7f0      	b.n	80069e4 <_svfiprintf_r+0x194>
 8006a02:	ab03      	add	r3, sp, #12
 8006a04:	9300      	str	r3, [sp, #0]
 8006a06:	462a      	mov	r2, r5
 8006a08:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <_svfiprintf_r+0x1f8>)
 8006a0a:	a904      	add	r1, sp, #16
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f3af 8000 	nop.w
 8006a12:	1c42      	adds	r2, r0, #1
 8006a14:	4606      	mov	r6, r0
 8006a16:	d1d6      	bne.n	80069c6 <_svfiprintf_r+0x176>
 8006a18:	89ab      	ldrh	r3, [r5, #12]
 8006a1a:	065b      	lsls	r3, r3, #25
 8006a1c:	f53f af2c 	bmi.w	8006878 <_svfiprintf_r+0x28>
 8006a20:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a22:	b01d      	add	sp, #116	; 0x74
 8006a24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a28:	ab03      	add	r3, sp, #12
 8006a2a:	9300      	str	r3, [sp, #0]
 8006a2c:	462a      	mov	r2, r5
 8006a2e:	4b06      	ldr	r3, [pc, #24]	; (8006a48 <_svfiprintf_r+0x1f8>)
 8006a30:	a904      	add	r1, sp, #16
 8006a32:	4638      	mov	r0, r7
 8006a34:	f000 f87a 	bl	8006b2c <_printf_i>
 8006a38:	e7eb      	b.n	8006a12 <_svfiprintf_r+0x1c2>
 8006a3a:	bf00      	nop
 8006a3c:	080073fc 	.word	0x080073fc
 8006a40:	08007406 	.word	0x08007406
 8006a44:	00000000 	.word	0x00000000
 8006a48:	08006799 	.word	0x08006799
 8006a4c:	08007402 	.word	0x08007402

08006a50 <_printf_common>:
 8006a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a54:	4616      	mov	r6, r2
 8006a56:	4699      	mov	r9, r3
 8006a58:	688a      	ldr	r2, [r1, #8]
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006a60:	4293      	cmp	r3, r2
 8006a62:	bfb8      	it	lt
 8006a64:	4613      	movlt	r3, r2
 8006a66:	6033      	str	r3, [r6, #0]
 8006a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006a6c:	4607      	mov	r7, r0
 8006a6e:	460c      	mov	r4, r1
 8006a70:	b10a      	cbz	r2, 8006a76 <_printf_common+0x26>
 8006a72:	3301      	adds	r3, #1
 8006a74:	6033      	str	r3, [r6, #0]
 8006a76:	6823      	ldr	r3, [r4, #0]
 8006a78:	0699      	lsls	r1, r3, #26
 8006a7a:	bf42      	ittt	mi
 8006a7c:	6833      	ldrmi	r3, [r6, #0]
 8006a7e:	3302      	addmi	r3, #2
 8006a80:	6033      	strmi	r3, [r6, #0]
 8006a82:	6825      	ldr	r5, [r4, #0]
 8006a84:	f015 0506 	ands.w	r5, r5, #6
 8006a88:	d106      	bne.n	8006a98 <_printf_common+0x48>
 8006a8a:	f104 0a19 	add.w	sl, r4, #25
 8006a8e:	68e3      	ldr	r3, [r4, #12]
 8006a90:	6832      	ldr	r2, [r6, #0]
 8006a92:	1a9b      	subs	r3, r3, r2
 8006a94:	42ab      	cmp	r3, r5
 8006a96:	dc26      	bgt.n	8006ae6 <_printf_common+0x96>
 8006a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006a9c:	1e13      	subs	r3, r2, #0
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	bf18      	it	ne
 8006aa2:	2301      	movne	r3, #1
 8006aa4:	0692      	lsls	r2, r2, #26
 8006aa6:	d42b      	bmi.n	8006b00 <_printf_common+0xb0>
 8006aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006aac:	4649      	mov	r1, r9
 8006aae:	4638      	mov	r0, r7
 8006ab0:	47c0      	blx	r8
 8006ab2:	3001      	adds	r0, #1
 8006ab4:	d01e      	beq.n	8006af4 <_printf_common+0xa4>
 8006ab6:	6823      	ldr	r3, [r4, #0]
 8006ab8:	68e5      	ldr	r5, [r4, #12]
 8006aba:	6832      	ldr	r2, [r6, #0]
 8006abc:	f003 0306 	and.w	r3, r3, #6
 8006ac0:	2b04      	cmp	r3, #4
 8006ac2:	bf08      	it	eq
 8006ac4:	1aad      	subeq	r5, r5, r2
 8006ac6:	68a3      	ldr	r3, [r4, #8]
 8006ac8:	6922      	ldr	r2, [r4, #16]
 8006aca:	bf0c      	ite	eq
 8006acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ad0:	2500      	movne	r5, #0
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	bfc4      	itt	gt
 8006ad6:	1a9b      	subgt	r3, r3, r2
 8006ad8:	18ed      	addgt	r5, r5, r3
 8006ada:	2600      	movs	r6, #0
 8006adc:	341a      	adds	r4, #26
 8006ade:	42b5      	cmp	r5, r6
 8006ae0:	d11a      	bne.n	8006b18 <_printf_common+0xc8>
 8006ae2:	2000      	movs	r0, #0
 8006ae4:	e008      	b.n	8006af8 <_printf_common+0xa8>
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	4652      	mov	r2, sl
 8006aea:	4649      	mov	r1, r9
 8006aec:	4638      	mov	r0, r7
 8006aee:	47c0      	blx	r8
 8006af0:	3001      	adds	r0, #1
 8006af2:	d103      	bne.n	8006afc <_printf_common+0xac>
 8006af4:	f04f 30ff 	mov.w	r0, #4294967295
 8006af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006afc:	3501      	adds	r5, #1
 8006afe:	e7c6      	b.n	8006a8e <_printf_common+0x3e>
 8006b00:	18e1      	adds	r1, r4, r3
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	2030      	movs	r0, #48	; 0x30
 8006b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b0a:	4422      	add	r2, r4
 8006b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b14:	3302      	adds	r3, #2
 8006b16:	e7c7      	b.n	8006aa8 <_printf_common+0x58>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	4622      	mov	r2, r4
 8006b1c:	4649      	mov	r1, r9
 8006b1e:	4638      	mov	r0, r7
 8006b20:	47c0      	blx	r8
 8006b22:	3001      	adds	r0, #1
 8006b24:	d0e6      	beq.n	8006af4 <_printf_common+0xa4>
 8006b26:	3601      	adds	r6, #1
 8006b28:	e7d9      	b.n	8006ade <_printf_common+0x8e>
	...

08006b2c <_printf_i>:
 8006b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b30:	460c      	mov	r4, r1
 8006b32:	4691      	mov	r9, r2
 8006b34:	7e27      	ldrb	r7, [r4, #24]
 8006b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b38:	2f78      	cmp	r7, #120	; 0x78
 8006b3a:	4680      	mov	r8, r0
 8006b3c:	469a      	mov	sl, r3
 8006b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b42:	d807      	bhi.n	8006b54 <_printf_i+0x28>
 8006b44:	2f62      	cmp	r7, #98	; 0x62
 8006b46:	d80a      	bhi.n	8006b5e <_printf_i+0x32>
 8006b48:	2f00      	cmp	r7, #0
 8006b4a:	f000 80d8 	beq.w	8006cfe <_printf_i+0x1d2>
 8006b4e:	2f58      	cmp	r7, #88	; 0x58
 8006b50:	f000 80a3 	beq.w	8006c9a <_printf_i+0x16e>
 8006b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006b5c:	e03a      	b.n	8006bd4 <_printf_i+0xa8>
 8006b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006b62:	2b15      	cmp	r3, #21
 8006b64:	d8f6      	bhi.n	8006b54 <_printf_i+0x28>
 8006b66:	a001      	add	r0, pc, #4	; (adr r0, 8006b6c <_printf_i+0x40>)
 8006b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006b6c:	08006bc5 	.word	0x08006bc5
 8006b70:	08006bd9 	.word	0x08006bd9
 8006b74:	08006b55 	.word	0x08006b55
 8006b78:	08006b55 	.word	0x08006b55
 8006b7c:	08006b55 	.word	0x08006b55
 8006b80:	08006b55 	.word	0x08006b55
 8006b84:	08006bd9 	.word	0x08006bd9
 8006b88:	08006b55 	.word	0x08006b55
 8006b8c:	08006b55 	.word	0x08006b55
 8006b90:	08006b55 	.word	0x08006b55
 8006b94:	08006b55 	.word	0x08006b55
 8006b98:	08006ce5 	.word	0x08006ce5
 8006b9c:	08006c09 	.word	0x08006c09
 8006ba0:	08006cc7 	.word	0x08006cc7
 8006ba4:	08006b55 	.word	0x08006b55
 8006ba8:	08006b55 	.word	0x08006b55
 8006bac:	08006d07 	.word	0x08006d07
 8006bb0:	08006b55 	.word	0x08006b55
 8006bb4:	08006c09 	.word	0x08006c09
 8006bb8:	08006b55 	.word	0x08006b55
 8006bbc:	08006b55 	.word	0x08006b55
 8006bc0:	08006ccf 	.word	0x08006ccf
 8006bc4:	680b      	ldr	r3, [r1, #0]
 8006bc6:	1d1a      	adds	r2, r3, #4
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	600a      	str	r2, [r1, #0]
 8006bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	e0a3      	b.n	8006d20 <_printf_i+0x1f4>
 8006bd8:	6825      	ldr	r5, [r4, #0]
 8006bda:	6808      	ldr	r0, [r1, #0]
 8006bdc:	062e      	lsls	r6, r5, #24
 8006bde:	f100 0304 	add.w	r3, r0, #4
 8006be2:	d50a      	bpl.n	8006bfa <_printf_i+0xce>
 8006be4:	6805      	ldr	r5, [r0, #0]
 8006be6:	600b      	str	r3, [r1, #0]
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	da03      	bge.n	8006bf4 <_printf_i+0xc8>
 8006bec:	232d      	movs	r3, #45	; 0x2d
 8006bee:	426d      	negs	r5, r5
 8006bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006bf4:	485e      	ldr	r0, [pc, #376]	; (8006d70 <_printf_i+0x244>)
 8006bf6:	230a      	movs	r3, #10
 8006bf8:	e019      	b.n	8006c2e <_printf_i+0x102>
 8006bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006bfe:	6805      	ldr	r5, [r0, #0]
 8006c00:	600b      	str	r3, [r1, #0]
 8006c02:	bf18      	it	ne
 8006c04:	b22d      	sxthne	r5, r5
 8006c06:	e7ef      	b.n	8006be8 <_printf_i+0xbc>
 8006c08:	680b      	ldr	r3, [r1, #0]
 8006c0a:	6825      	ldr	r5, [r4, #0]
 8006c0c:	1d18      	adds	r0, r3, #4
 8006c0e:	6008      	str	r0, [r1, #0]
 8006c10:	0628      	lsls	r0, r5, #24
 8006c12:	d501      	bpl.n	8006c18 <_printf_i+0xec>
 8006c14:	681d      	ldr	r5, [r3, #0]
 8006c16:	e002      	b.n	8006c1e <_printf_i+0xf2>
 8006c18:	0669      	lsls	r1, r5, #25
 8006c1a:	d5fb      	bpl.n	8006c14 <_printf_i+0xe8>
 8006c1c:	881d      	ldrh	r5, [r3, #0]
 8006c1e:	4854      	ldr	r0, [pc, #336]	; (8006d70 <_printf_i+0x244>)
 8006c20:	2f6f      	cmp	r7, #111	; 0x6f
 8006c22:	bf0c      	ite	eq
 8006c24:	2308      	moveq	r3, #8
 8006c26:	230a      	movne	r3, #10
 8006c28:	2100      	movs	r1, #0
 8006c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c2e:	6866      	ldr	r6, [r4, #4]
 8006c30:	60a6      	str	r6, [r4, #8]
 8006c32:	2e00      	cmp	r6, #0
 8006c34:	bfa2      	ittt	ge
 8006c36:	6821      	ldrge	r1, [r4, #0]
 8006c38:	f021 0104 	bicge.w	r1, r1, #4
 8006c3c:	6021      	strge	r1, [r4, #0]
 8006c3e:	b90d      	cbnz	r5, 8006c44 <_printf_i+0x118>
 8006c40:	2e00      	cmp	r6, #0
 8006c42:	d04d      	beq.n	8006ce0 <_printf_i+0x1b4>
 8006c44:	4616      	mov	r6, r2
 8006c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8006c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8006c4e:	5dc7      	ldrb	r7, [r0, r7]
 8006c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006c54:	462f      	mov	r7, r5
 8006c56:	42bb      	cmp	r3, r7
 8006c58:	460d      	mov	r5, r1
 8006c5a:	d9f4      	bls.n	8006c46 <_printf_i+0x11a>
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d10b      	bne.n	8006c78 <_printf_i+0x14c>
 8006c60:	6823      	ldr	r3, [r4, #0]
 8006c62:	07df      	lsls	r7, r3, #31
 8006c64:	d508      	bpl.n	8006c78 <_printf_i+0x14c>
 8006c66:	6923      	ldr	r3, [r4, #16]
 8006c68:	6861      	ldr	r1, [r4, #4]
 8006c6a:	4299      	cmp	r1, r3
 8006c6c:	bfde      	ittt	le
 8006c6e:	2330      	movle	r3, #48	; 0x30
 8006c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006c78:	1b92      	subs	r2, r2, r6
 8006c7a:	6122      	str	r2, [r4, #16]
 8006c7c:	f8cd a000 	str.w	sl, [sp]
 8006c80:	464b      	mov	r3, r9
 8006c82:	aa03      	add	r2, sp, #12
 8006c84:	4621      	mov	r1, r4
 8006c86:	4640      	mov	r0, r8
 8006c88:	f7ff fee2 	bl	8006a50 <_printf_common>
 8006c8c:	3001      	adds	r0, #1
 8006c8e:	d14c      	bne.n	8006d2a <_printf_i+0x1fe>
 8006c90:	f04f 30ff 	mov.w	r0, #4294967295
 8006c94:	b004      	add	sp, #16
 8006c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c9a:	4835      	ldr	r0, [pc, #212]	; (8006d70 <_printf_i+0x244>)
 8006c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006ca0:	6823      	ldr	r3, [r4, #0]
 8006ca2:	680e      	ldr	r6, [r1, #0]
 8006ca4:	061f      	lsls	r7, r3, #24
 8006ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006caa:	600e      	str	r6, [r1, #0]
 8006cac:	d514      	bpl.n	8006cd8 <_printf_i+0x1ac>
 8006cae:	07d9      	lsls	r1, r3, #31
 8006cb0:	bf44      	itt	mi
 8006cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8006cb6:	6023      	strmi	r3, [r4, #0]
 8006cb8:	b91d      	cbnz	r5, 8006cc2 <_printf_i+0x196>
 8006cba:	6823      	ldr	r3, [r4, #0]
 8006cbc:	f023 0320 	bic.w	r3, r3, #32
 8006cc0:	6023      	str	r3, [r4, #0]
 8006cc2:	2310      	movs	r3, #16
 8006cc4:	e7b0      	b.n	8006c28 <_printf_i+0xfc>
 8006cc6:	6823      	ldr	r3, [r4, #0]
 8006cc8:	f043 0320 	orr.w	r3, r3, #32
 8006ccc:	6023      	str	r3, [r4, #0]
 8006cce:	2378      	movs	r3, #120	; 0x78
 8006cd0:	4828      	ldr	r0, [pc, #160]	; (8006d74 <_printf_i+0x248>)
 8006cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006cd6:	e7e3      	b.n	8006ca0 <_printf_i+0x174>
 8006cd8:	065e      	lsls	r6, r3, #25
 8006cda:	bf48      	it	mi
 8006cdc:	b2ad      	uxthmi	r5, r5
 8006cde:	e7e6      	b.n	8006cae <_printf_i+0x182>
 8006ce0:	4616      	mov	r6, r2
 8006ce2:	e7bb      	b.n	8006c5c <_printf_i+0x130>
 8006ce4:	680b      	ldr	r3, [r1, #0]
 8006ce6:	6826      	ldr	r6, [r4, #0]
 8006ce8:	6960      	ldr	r0, [r4, #20]
 8006cea:	1d1d      	adds	r5, r3, #4
 8006cec:	600d      	str	r5, [r1, #0]
 8006cee:	0635      	lsls	r5, r6, #24
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	d501      	bpl.n	8006cf8 <_printf_i+0x1cc>
 8006cf4:	6018      	str	r0, [r3, #0]
 8006cf6:	e002      	b.n	8006cfe <_printf_i+0x1d2>
 8006cf8:	0671      	lsls	r1, r6, #25
 8006cfa:	d5fb      	bpl.n	8006cf4 <_printf_i+0x1c8>
 8006cfc:	8018      	strh	r0, [r3, #0]
 8006cfe:	2300      	movs	r3, #0
 8006d00:	6123      	str	r3, [r4, #16]
 8006d02:	4616      	mov	r6, r2
 8006d04:	e7ba      	b.n	8006c7c <_printf_i+0x150>
 8006d06:	680b      	ldr	r3, [r1, #0]
 8006d08:	1d1a      	adds	r2, r3, #4
 8006d0a:	600a      	str	r2, [r1, #0]
 8006d0c:	681e      	ldr	r6, [r3, #0]
 8006d0e:	6862      	ldr	r2, [r4, #4]
 8006d10:	2100      	movs	r1, #0
 8006d12:	4630      	mov	r0, r6
 8006d14:	f7f9 fa5c 	bl	80001d0 <memchr>
 8006d18:	b108      	cbz	r0, 8006d1e <_printf_i+0x1f2>
 8006d1a:	1b80      	subs	r0, r0, r6
 8006d1c:	6060      	str	r0, [r4, #4]
 8006d1e:	6863      	ldr	r3, [r4, #4]
 8006d20:	6123      	str	r3, [r4, #16]
 8006d22:	2300      	movs	r3, #0
 8006d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d28:	e7a8      	b.n	8006c7c <_printf_i+0x150>
 8006d2a:	6923      	ldr	r3, [r4, #16]
 8006d2c:	4632      	mov	r2, r6
 8006d2e:	4649      	mov	r1, r9
 8006d30:	4640      	mov	r0, r8
 8006d32:	47d0      	blx	sl
 8006d34:	3001      	adds	r0, #1
 8006d36:	d0ab      	beq.n	8006c90 <_printf_i+0x164>
 8006d38:	6823      	ldr	r3, [r4, #0]
 8006d3a:	079b      	lsls	r3, r3, #30
 8006d3c:	d413      	bmi.n	8006d66 <_printf_i+0x23a>
 8006d3e:	68e0      	ldr	r0, [r4, #12]
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	4298      	cmp	r0, r3
 8006d44:	bfb8      	it	lt
 8006d46:	4618      	movlt	r0, r3
 8006d48:	e7a4      	b.n	8006c94 <_printf_i+0x168>
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	4632      	mov	r2, r6
 8006d4e:	4649      	mov	r1, r9
 8006d50:	4640      	mov	r0, r8
 8006d52:	47d0      	blx	sl
 8006d54:	3001      	adds	r0, #1
 8006d56:	d09b      	beq.n	8006c90 <_printf_i+0x164>
 8006d58:	3501      	adds	r5, #1
 8006d5a:	68e3      	ldr	r3, [r4, #12]
 8006d5c:	9903      	ldr	r1, [sp, #12]
 8006d5e:	1a5b      	subs	r3, r3, r1
 8006d60:	42ab      	cmp	r3, r5
 8006d62:	dcf2      	bgt.n	8006d4a <_printf_i+0x21e>
 8006d64:	e7eb      	b.n	8006d3e <_printf_i+0x212>
 8006d66:	2500      	movs	r5, #0
 8006d68:	f104 0619 	add.w	r6, r4, #25
 8006d6c:	e7f5      	b.n	8006d5a <_printf_i+0x22e>
 8006d6e:	bf00      	nop
 8006d70:	0800740d 	.word	0x0800740d
 8006d74:	0800741e 	.word	0x0800741e

08006d78 <memcpy>:
 8006d78:	440a      	add	r2, r1
 8006d7a:	4291      	cmp	r1, r2
 8006d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006d80:	d100      	bne.n	8006d84 <memcpy+0xc>
 8006d82:	4770      	bx	lr
 8006d84:	b510      	push	{r4, lr}
 8006d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006d8e:	4291      	cmp	r1, r2
 8006d90:	d1f9      	bne.n	8006d86 <memcpy+0xe>
 8006d92:	bd10      	pop	{r4, pc}

08006d94 <memmove>:
 8006d94:	4288      	cmp	r0, r1
 8006d96:	b510      	push	{r4, lr}
 8006d98:	eb01 0402 	add.w	r4, r1, r2
 8006d9c:	d902      	bls.n	8006da4 <memmove+0x10>
 8006d9e:	4284      	cmp	r4, r0
 8006da0:	4623      	mov	r3, r4
 8006da2:	d807      	bhi.n	8006db4 <memmove+0x20>
 8006da4:	1e43      	subs	r3, r0, #1
 8006da6:	42a1      	cmp	r1, r4
 8006da8:	d008      	beq.n	8006dbc <memmove+0x28>
 8006daa:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006dae:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006db2:	e7f8      	b.n	8006da6 <memmove+0x12>
 8006db4:	4402      	add	r2, r0
 8006db6:	4601      	mov	r1, r0
 8006db8:	428a      	cmp	r2, r1
 8006dba:	d100      	bne.n	8006dbe <memmove+0x2a>
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006dc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006dc6:	e7f7      	b.n	8006db8 <memmove+0x24>

08006dc8 <_free_r>:
 8006dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006dca:	2900      	cmp	r1, #0
 8006dcc:	d048      	beq.n	8006e60 <_free_r+0x98>
 8006dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006dd2:	9001      	str	r0, [sp, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8006dda:	bfb8      	it	lt
 8006ddc:	18e4      	addlt	r4, r4, r3
 8006dde:	f000 f8d3 	bl	8006f88 <__malloc_lock>
 8006de2:	4a20      	ldr	r2, [pc, #128]	; (8006e64 <_free_r+0x9c>)
 8006de4:	9801      	ldr	r0, [sp, #4]
 8006de6:	6813      	ldr	r3, [r2, #0]
 8006de8:	4615      	mov	r5, r2
 8006dea:	b933      	cbnz	r3, 8006dfa <_free_r+0x32>
 8006dec:	6063      	str	r3, [r4, #4]
 8006dee:	6014      	str	r4, [r2, #0]
 8006df0:	b003      	add	sp, #12
 8006df2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006df6:	f000 b8cd 	b.w	8006f94 <__malloc_unlock>
 8006dfa:	42a3      	cmp	r3, r4
 8006dfc:	d90b      	bls.n	8006e16 <_free_r+0x4e>
 8006dfe:	6821      	ldr	r1, [r4, #0]
 8006e00:	1862      	adds	r2, r4, r1
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bf04      	itt	eq
 8006e06:	681a      	ldreq	r2, [r3, #0]
 8006e08:	685b      	ldreq	r3, [r3, #4]
 8006e0a:	6063      	str	r3, [r4, #4]
 8006e0c:	bf04      	itt	eq
 8006e0e:	1852      	addeq	r2, r2, r1
 8006e10:	6022      	streq	r2, [r4, #0]
 8006e12:	602c      	str	r4, [r5, #0]
 8006e14:	e7ec      	b.n	8006df0 <_free_r+0x28>
 8006e16:	461a      	mov	r2, r3
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	b10b      	cbz	r3, 8006e20 <_free_r+0x58>
 8006e1c:	42a3      	cmp	r3, r4
 8006e1e:	d9fa      	bls.n	8006e16 <_free_r+0x4e>
 8006e20:	6811      	ldr	r1, [r2, #0]
 8006e22:	1855      	adds	r5, r2, r1
 8006e24:	42a5      	cmp	r5, r4
 8006e26:	d10b      	bne.n	8006e40 <_free_r+0x78>
 8006e28:	6824      	ldr	r4, [r4, #0]
 8006e2a:	4421      	add	r1, r4
 8006e2c:	1854      	adds	r4, r2, r1
 8006e2e:	42a3      	cmp	r3, r4
 8006e30:	6011      	str	r1, [r2, #0]
 8006e32:	d1dd      	bne.n	8006df0 <_free_r+0x28>
 8006e34:	681c      	ldr	r4, [r3, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	6053      	str	r3, [r2, #4]
 8006e3a:	4421      	add	r1, r4
 8006e3c:	6011      	str	r1, [r2, #0]
 8006e3e:	e7d7      	b.n	8006df0 <_free_r+0x28>
 8006e40:	d902      	bls.n	8006e48 <_free_r+0x80>
 8006e42:	230c      	movs	r3, #12
 8006e44:	6003      	str	r3, [r0, #0]
 8006e46:	e7d3      	b.n	8006df0 <_free_r+0x28>
 8006e48:	6825      	ldr	r5, [r4, #0]
 8006e4a:	1961      	adds	r1, r4, r5
 8006e4c:	428b      	cmp	r3, r1
 8006e4e:	bf04      	itt	eq
 8006e50:	6819      	ldreq	r1, [r3, #0]
 8006e52:	685b      	ldreq	r3, [r3, #4]
 8006e54:	6063      	str	r3, [r4, #4]
 8006e56:	bf04      	itt	eq
 8006e58:	1949      	addeq	r1, r1, r5
 8006e5a:	6021      	streq	r1, [r4, #0]
 8006e5c:	6054      	str	r4, [r2, #4]
 8006e5e:	e7c7      	b.n	8006df0 <_free_r+0x28>
 8006e60:	b003      	add	sp, #12
 8006e62:	bd30      	pop	{r4, r5, pc}
 8006e64:	20000130 	.word	0x20000130

08006e68 <_malloc_r>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	1ccd      	adds	r5, r1, #3
 8006e6c:	f025 0503 	bic.w	r5, r5, #3
 8006e70:	3508      	adds	r5, #8
 8006e72:	2d0c      	cmp	r5, #12
 8006e74:	bf38      	it	cc
 8006e76:	250c      	movcc	r5, #12
 8006e78:	2d00      	cmp	r5, #0
 8006e7a:	4606      	mov	r6, r0
 8006e7c:	db01      	blt.n	8006e82 <_malloc_r+0x1a>
 8006e7e:	42a9      	cmp	r1, r5
 8006e80:	d903      	bls.n	8006e8a <_malloc_r+0x22>
 8006e82:	230c      	movs	r3, #12
 8006e84:	6033      	str	r3, [r6, #0]
 8006e86:	2000      	movs	r0, #0
 8006e88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e8a:	f000 f87d 	bl	8006f88 <__malloc_lock>
 8006e8e:	4921      	ldr	r1, [pc, #132]	; (8006f14 <_malloc_r+0xac>)
 8006e90:	680a      	ldr	r2, [r1, #0]
 8006e92:	4614      	mov	r4, r2
 8006e94:	b99c      	cbnz	r4, 8006ebe <_malloc_r+0x56>
 8006e96:	4f20      	ldr	r7, [pc, #128]	; (8006f18 <_malloc_r+0xb0>)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	b923      	cbnz	r3, 8006ea6 <_malloc_r+0x3e>
 8006e9c:	4621      	mov	r1, r4
 8006e9e:	4630      	mov	r0, r6
 8006ea0:	f000 f862 	bl	8006f68 <_sbrk_r>
 8006ea4:	6038      	str	r0, [r7, #0]
 8006ea6:	4629      	mov	r1, r5
 8006ea8:	4630      	mov	r0, r6
 8006eaa:	f000 f85d 	bl	8006f68 <_sbrk_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	d123      	bne.n	8006efa <_malloc_r+0x92>
 8006eb2:	230c      	movs	r3, #12
 8006eb4:	6033      	str	r3, [r6, #0]
 8006eb6:	4630      	mov	r0, r6
 8006eb8:	f000 f86c 	bl	8006f94 <__malloc_unlock>
 8006ebc:	e7e3      	b.n	8006e86 <_malloc_r+0x1e>
 8006ebe:	6823      	ldr	r3, [r4, #0]
 8006ec0:	1b5b      	subs	r3, r3, r5
 8006ec2:	d417      	bmi.n	8006ef4 <_malloc_r+0x8c>
 8006ec4:	2b0b      	cmp	r3, #11
 8006ec6:	d903      	bls.n	8006ed0 <_malloc_r+0x68>
 8006ec8:	6023      	str	r3, [r4, #0]
 8006eca:	441c      	add	r4, r3
 8006ecc:	6025      	str	r5, [r4, #0]
 8006ece:	e004      	b.n	8006eda <_malloc_r+0x72>
 8006ed0:	6863      	ldr	r3, [r4, #4]
 8006ed2:	42a2      	cmp	r2, r4
 8006ed4:	bf0c      	ite	eq
 8006ed6:	600b      	streq	r3, [r1, #0]
 8006ed8:	6053      	strne	r3, [r2, #4]
 8006eda:	4630      	mov	r0, r6
 8006edc:	f000 f85a 	bl	8006f94 <__malloc_unlock>
 8006ee0:	f104 000b 	add.w	r0, r4, #11
 8006ee4:	1d23      	adds	r3, r4, #4
 8006ee6:	f020 0007 	bic.w	r0, r0, #7
 8006eea:	1ac2      	subs	r2, r0, r3
 8006eec:	d0cc      	beq.n	8006e88 <_malloc_r+0x20>
 8006eee:	1a1b      	subs	r3, r3, r0
 8006ef0:	50a3      	str	r3, [r4, r2]
 8006ef2:	e7c9      	b.n	8006e88 <_malloc_r+0x20>
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	6864      	ldr	r4, [r4, #4]
 8006ef8:	e7cc      	b.n	8006e94 <_malloc_r+0x2c>
 8006efa:	1cc4      	adds	r4, r0, #3
 8006efc:	f024 0403 	bic.w	r4, r4, #3
 8006f00:	42a0      	cmp	r0, r4
 8006f02:	d0e3      	beq.n	8006ecc <_malloc_r+0x64>
 8006f04:	1a21      	subs	r1, r4, r0
 8006f06:	4630      	mov	r0, r6
 8006f08:	f000 f82e 	bl	8006f68 <_sbrk_r>
 8006f0c:	3001      	adds	r0, #1
 8006f0e:	d1dd      	bne.n	8006ecc <_malloc_r+0x64>
 8006f10:	e7cf      	b.n	8006eb2 <_malloc_r+0x4a>
 8006f12:	bf00      	nop
 8006f14:	20000130 	.word	0x20000130
 8006f18:	20000134 	.word	0x20000134

08006f1c <_realloc_r>:
 8006f1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f1e:	4607      	mov	r7, r0
 8006f20:	4614      	mov	r4, r2
 8006f22:	460e      	mov	r6, r1
 8006f24:	b921      	cbnz	r1, 8006f30 <_realloc_r+0x14>
 8006f26:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f2a:	4611      	mov	r1, r2
 8006f2c:	f7ff bf9c 	b.w	8006e68 <_malloc_r>
 8006f30:	b922      	cbnz	r2, 8006f3c <_realloc_r+0x20>
 8006f32:	f7ff ff49 	bl	8006dc8 <_free_r>
 8006f36:	4625      	mov	r5, r4
 8006f38:	4628      	mov	r0, r5
 8006f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3c:	f000 f830 	bl	8006fa0 <_malloc_usable_size_r>
 8006f40:	42a0      	cmp	r0, r4
 8006f42:	d20f      	bcs.n	8006f64 <_realloc_r+0x48>
 8006f44:	4621      	mov	r1, r4
 8006f46:	4638      	mov	r0, r7
 8006f48:	f7ff ff8e 	bl	8006e68 <_malloc_r>
 8006f4c:	4605      	mov	r5, r0
 8006f4e:	2800      	cmp	r0, #0
 8006f50:	d0f2      	beq.n	8006f38 <_realloc_r+0x1c>
 8006f52:	4631      	mov	r1, r6
 8006f54:	4622      	mov	r2, r4
 8006f56:	f7ff ff0f 	bl	8006d78 <memcpy>
 8006f5a:	4631      	mov	r1, r6
 8006f5c:	4638      	mov	r0, r7
 8006f5e:	f7ff ff33 	bl	8006dc8 <_free_r>
 8006f62:	e7e9      	b.n	8006f38 <_realloc_r+0x1c>
 8006f64:	4635      	mov	r5, r6
 8006f66:	e7e7      	b.n	8006f38 <_realloc_r+0x1c>

08006f68 <_sbrk_r>:
 8006f68:	b538      	push	{r3, r4, r5, lr}
 8006f6a:	4d06      	ldr	r5, [pc, #24]	; (8006f84 <_sbrk_r+0x1c>)
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	4604      	mov	r4, r0
 8006f70:	4608      	mov	r0, r1
 8006f72:	602b      	str	r3, [r5, #0]
 8006f74:	f7fc f856 	bl	8003024 <_sbrk>
 8006f78:	1c43      	adds	r3, r0, #1
 8006f7a:	d102      	bne.n	8006f82 <_sbrk_r+0x1a>
 8006f7c:	682b      	ldr	r3, [r5, #0]
 8006f7e:	b103      	cbz	r3, 8006f82 <_sbrk_r+0x1a>
 8006f80:	6023      	str	r3, [r4, #0]
 8006f82:	bd38      	pop	{r3, r4, r5, pc}
 8006f84:	200014c8 	.word	0x200014c8

08006f88 <__malloc_lock>:
 8006f88:	4801      	ldr	r0, [pc, #4]	; (8006f90 <__malloc_lock+0x8>)
 8006f8a:	f000 b811 	b.w	8006fb0 <__retarget_lock_acquire_recursive>
 8006f8e:	bf00      	nop
 8006f90:	200014d0 	.word	0x200014d0

08006f94 <__malloc_unlock>:
 8006f94:	4801      	ldr	r0, [pc, #4]	; (8006f9c <__malloc_unlock+0x8>)
 8006f96:	f000 b80c 	b.w	8006fb2 <__retarget_lock_release_recursive>
 8006f9a:	bf00      	nop
 8006f9c:	200014d0 	.word	0x200014d0

08006fa0 <_malloc_usable_size_r>:
 8006fa0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006fa4:	1f18      	subs	r0, r3, #4
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bfbc      	itt	lt
 8006faa:	580b      	ldrlt	r3, [r1, r0]
 8006fac:	18c0      	addlt	r0, r0, r3
 8006fae:	4770      	bx	lr

08006fb0 <__retarget_lock_acquire_recursive>:
 8006fb0:	4770      	bx	lr

08006fb2 <__retarget_lock_release_recursive>:
 8006fb2:	4770      	bx	lr

08006fb4 <_init>:
 8006fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fb6:	bf00      	nop
 8006fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fba:	bc08      	pop	{r3}
 8006fbc:	469e      	mov	lr, r3
 8006fbe:	4770      	bx	lr

08006fc0 <_fini>:
 8006fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc2:	bf00      	nop
 8006fc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fc6:	bc08      	pop	{r3}
 8006fc8:	469e      	mov	lr, r3
 8006fca:	4770      	bx	lr
